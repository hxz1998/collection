// Generated from H:/Workspace/antlr-tutorial/src/main/antlr4\MySqlParser.g4 by ANTLR 4.10.1
package org.example.mysql;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class MySqlParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.10.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		SPACE=1, SPEC_MYSQL_COMMENT=2, COMMENT_INPUT=3, LINE_COMMENT=4, ADD=5, 
		ALL=6, ALTER=7, ALWAYS=8, ANALYZE=9, AND=10, ARRAY=11, AS=12, ASC=13, 
		BEFORE=14, BETWEEN=15, BOTH=16, BUCKETS=17, BY=18, CALL=19, CASCADE=20, 
		CASE=21, CAST=22, CHANGE=23, CHARACTER=24, CHECK=25, COLLATE=26, COLUMN=27, 
		CONDITION=28, CONSTRAINT=29, CONTINUE=30, CONVERT=31, CREATE=32, CROSS=33, 
		CURRENT=34, CURRENT_USER=35, CURSOR=36, DATABASE=37, DATABASES=38, DECLARE=39, 
		DEFAULT=40, DELAYED=41, DELETE=42, DESC=43, DESCRIBE=44, DETERMINISTIC=45, 
		DIAGNOSTICS=46, DISTINCT=47, DISTINCTROW=48, DROP=49, EACH=50, ELSE=51, 
		ELSEIF=52, EMPTY=53, ENCLOSED=54, ESCAPED=55, EXCEPT=56, EXISTS=57, EXIT=58, 
		EXPLAIN=59, FALSE=60, FETCH=61, FOR=62, FORCE=63, FOREIGN=64, FROM=65, 
		FULLTEXT=66, GENERATED=67, GET=68, GRANT=69, GROUP=70, HAVING=71, HIGH_PRIORITY=72, 
		HISTOGRAM=73, IF=74, IGNORE=75, IGNORED=76, IN=77, INDEX=78, INFILE=79, 
		INNER=80, INOUT=81, INSERT=82, INTERVAL=83, INTO=84, IS=85, ITERATE=86, 
		JOIN=87, KEY=88, KEYS=89, KILL=90, LEADING=91, LEAVE=92, LEFT=93, LIKE=94, 
		LIMIT=95, LINEAR=96, LINES=97, LOAD=98, LOCK=99, LOCKED=100, LOOP=101, 
		LOW_PRIORITY=102, MASTER_BIND=103, MASTER_SSL_VERIFY_SERVER_CERT=104, 
		MATCH=105, MAXVALUE=106, MINVALUE=107, MODIFIES=108, NATURAL=109, NOT=110, 
		NO_WRITE_TO_BINLOG=111, NULL_LITERAL=112, NUMBER=113, ON=114, OPTIMIZE=115, 
		OPTION=116, OPTIONAL=117, OPTIONALLY=118, OR=119, ORDER=120, OUT=121, 
		OVER=122, OUTER=123, OUTFILE=124, PARTITION=125, PRIMARY=126, PROCEDURE=127, 
		PURGE=128, RANGE=129, READ=130, READS=131, REFERENCES=132, REGEXP=133, 
		RELEASE=134, RENAME=135, REPEAT=136, REPLACE=137, REQUIRE=138, RESIGNAL=139, 
		RESTRICT=140, RETAIN=141, RETURN=142, REVOKE=143, RIGHT=144, RLIKE=145, 
		SCHEMA=146, SCHEMAS=147, SELECT=148, SET=149, SEPARATOR=150, SHOW=151, 
		SIGNAL=152, SKIP_=153, SPATIAL=154, SQL=155, SQLEXCEPTION=156, SQLSTATE=157, 
		SQLWARNING=158, SQL_BIG_RESULT=159, SQL_CALC_FOUND_ROWS=160, SQL_SMALL_RESULT=161, 
		SSL=162, STACKED=163, STARTING=164, STRAIGHT_JOIN=165, TABLE=166, TERMINATED=167, 
		THEN=168, TO=169, TRAILING=170, TRIGGER=171, TRUE=172, UNDO=173, UNION=174, 
		UNIQUE=175, UNLOCK=176, UNSIGNED=177, UPDATE=178, USAGE=179, USE=180, 
		USING=181, VALUES=182, WHEN=183, WHERE=184, WHILE=185, WITH=186, WRITE=187, 
		XOR=188, ZEROFILL=189, TINYINT=190, SMALLINT=191, MEDIUMINT=192, MIDDLEINT=193, 
		INT=194, INT1=195, INT2=196, INT3=197, INT4=198, INT8=199, INTEGER=200, 
		BIGINT=201, REAL=202, DOUBLE=203, PRECISION=204, FLOAT=205, FLOAT4=206, 
		FLOAT8=207, DECIMAL=208, DEC=209, NUMERIC=210, DATE=211, TIME=212, TIMESTAMP=213, 
		DATETIME=214, YEAR=215, CHAR=216, VARCHAR=217, NVARCHAR=218, NATIONAL=219, 
		BINARY=220, VARBINARY=221, TINYBLOB=222, BLOB=223, MEDIUMBLOB=224, LONG=225, 
		LONGBLOB=226, TINYTEXT=227, TEXT=228, MEDIUMTEXT=229, LONGTEXT=230, ENUM=231, 
		VARYING=232, SERIAL=233, YEAR_MONTH=234, DAY_HOUR=235, DAY_MINUTE=236, 
		DAY_SECOND=237, HOUR_MINUTE=238, HOUR_SECOND=239, MINUTE_SECOND=240, SECOND_MICROSECOND=241, 
		MINUTE_MICROSECOND=242, HOUR_MICROSECOND=243, DAY_MICROSECOND=244, JSON_ARRAY=245, 
		JSON_OBJECT=246, JSON_QUOTE=247, JSON_CONTAINS=248, JSON_CONTAINS_PATH=249, 
		JSON_EXTRACT=250, JSON_KEYS=251, JSON_OVERLAPS=252, JSON_SEARCH=253, JSON_VALUE=254, 
		JSON_ARRAY_APPEND=255, JSON_ARRAY_INSERT=256, JSON_INSERT=257, JSON_MERGE=258, 
		JSON_MERGE_PATCH=259, JSON_MERGE_PRESERVE=260, JSON_REMOVE=261, JSON_REPLACE=262, 
		JSON_SET=263, JSON_UNQUOTE=264, JSON_DEPTH=265, JSON_LENGTH=266, JSON_TYPE=267, 
		JSON_VALID=268, JSON_TABLE=269, JSON_SCHEMA_VALID=270, JSON_SCHEMA_VALIDATION_REPORT=271, 
		JSON_PRETTY=272, JSON_STORAGE_FREE=273, JSON_STORAGE_SIZE=274, JSON_ARRAYAGG=275, 
		JSON_OBJECTAGG=276, AVG=277, BIT_AND=278, BIT_OR=279, BIT_XOR=280, COUNT=281, 
		CUME_DIST=282, DENSE_RANK=283, FIRST_VALUE=284, GROUP_CONCAT=285, LAG=286, 
		LAST_VALUE=287, LEAD=288, MAX=289, MIN=290, NTILE=291, NTH_VALUE=292, 
		PERCENT_RANK=293, RANK=294, ROW_NUMBER=295, STD=296, STDDEV=297, STDDEV_POP=298, 
		STDDEV_SAMP=299, SUM=300, VAR_POP=301, VAR_SAMP=302, VARIANCE=303, CURRENT_DATE=304, 
		CURRENT_TIME=305, CURRENT_TIMESTAMP=306, LOCALTIME=307, CURDATE=308, CURTIME=309, 
		DATE_ADD=310, DATE_SUB=311, EXTRACT=312, LOCALTIMESTAMP=313, NOW=314, 
		POSITION=315, SUBSTR=316, SUBSTRING=317, SYSDATE=318, TRIM=319, UTC_DATE=320, 
		UTC_TIME=321, UTC_TIMESTAMP=322, ACCOUNT=323, ACTION=324, AFTER=325, AGGREGATE=326, 
		ALGORITHM=327, ANY=328, AT=329, AUTHORS=330, AUTOCOMMIT=331, AUTOEXTEND_SIZE=332, 
		AUTO_INCREMENT=333, AVG_ROW_LENGTH=334, BEGIN=335, BINLOG=336, BIT=337, 
		BLOCK=338, BOOL=339, BOOLEAN=340, BTREE=341, CACHE=342, CASCADED=343, 
		CHAIN=344, CHANGED=345, CHANNEL=346, CHECKSUM=347, PAGE_CHECKSUM=348, 
		CIPHER=349, CLASS_ORIGIN=350, CLIENT=351, CLOSE=352, CLUSTERING=353, COALESCE=354, 
		CODE=355, COLUMNS=356, COLUMN_FORMAT=357, COLUMN_NAME=358, COMMENT=359, 
		COMMIT=360, COMPACT=361, COMPLETION=362, COMPRESSED=363, COMPRESSION=364, 
		CONCURRENT=365, CONNECT=366, CONNECTION=367, CONSISTENT=368, CONSTRAINT_CATALOG=369, 
		CONSTRAINT_SCHEMA=370, CONSTRAINT_NAME=371, CONTAINS=372, CONTEXT=373, 
		CONTRIBUTORS=374, COPY=375, CPU=376, CYCLE=377, CURSOR_NAME=378, DATA=379, 
		DATAFILE=380, DEALLOCATE=381, DEFAULT_AUTH=382, DEFINER=383, DELAY_KEY_WRITE=384, 
		DES_KEY_FILE=385, DIRECTORY=386, DISABLE=387, DISCARD=388, DISK=389, DO=390, 
		DUMPFILE=391, DUPLICATE=392, DYNAMIC=393, ENABLE=394, ENCRYPTION=395, 
		END=396, ENDS=397, ENGINE=398, ENGINES=399, ERROR=400, ERRORS=401, ESCAPE=402, 
		EVEN=403, EVENT=404, EVENTS=405, EVERY=406, EXCHANGE=407, EXCLUSIVE=408, 
		EXPIRE=409, EXPORT=410, EXTENDED=411, EXTENT_SIZE=412, FAST=413, FAULTS=414, 
		FIELDS=415, FILE_BLOCK_SIZE=416, FILTER=417, FIRST=418, FIXED=419, FLUSH=420, 
		FOLLOWING=421, FOLLOWS=422, FOUND=423, FULL=424, FUNCTION=425, GENERAL=426, 
		GLOBAL=427, GRANTS=428, GROUP_REPLICATION=429, HANDLER=430, HASH=431, 
		HELP=432, HOST=433, HOSTS=434, IDENTIFIED=435, IGNORE_SERVER_IDS=436, 
		IMPORT=437, INCREMENT=438, INDEXES=439, INITIAL_SIZE=440, INPLACE=441, 
		INSERT_METHOD=442, INSTALL=443, INSTANCE=444, INSTANT=445, INVISIBLE=446, 
		INVOKER=447, IO=448, IO_THREAD=449, IPC=450, ISOLATION=451, ISSUER=452, 
		JSON=453, KEY_BLOCK_SIZE=454, LANGUAGE=455, LAST=456, LEAVES=457, LESS=458, 
		LEVEL=459, LIST=460, LOCAL=461, LOGFILE=462, LOGS=463, MASTER=464, MASTER_AUTO_POSITION=465, 
		MASTER_CONNECT_RETRY=466, MASTER_DELAY=467, MASTER_HEARTBEAT_PERIOD=468, 
		MASTER_HOST=469, MASTER_LOG_FILE=470, MASTER_LOG_POS=471, MASTER_PASSWORD=472, 
		MASTER_PORT=473, MASTER_RETRY_COUNT=474, MASTER_SSL=475, MASTER_SSL_CA=476, 
		MASTER_SSL_CAPATH=477, MASTER_SSL_CERT=478, MASTER_SSL_CIPHER=479, MASTER_SSL_CRL=480, 
		MASTER_SSL_CRLPATH=481, MASTER_SSL_KEY=482, MASTER_TLS_VERSION=483, MASTER_USER=484, 
		MAX_CONNECTIONS_PER_HOUR=485, MAX_QUERIES_PER_HOUR=486, MAX_ROWS=487, 
		MAX_SIZE=488, MAX_UPDATES_PER_HOUR=489, MAX_USER_CONNECTIONS=490, MEDIUM=491, 
		MEMBER=492, MERGE=493, MESSAGE_TEXT=494, MID=495, MIGRATE=496, MIN_ROWS=497, 
		MODE=498, MODIFY=499, MUTEX=500, MYSQL=501, MYSQL_ERRNO=502, NAME=503, 
		NAMES=504, NCHAR=505, NEVER=506, NEXT=507, NO=508, NOCACHE=509, NOCOPY=510, 
		NOCYCLE=511, NOMAXVALUE=512, NOMINVALUE=513, NOWAIT=514, NODEGROUP=515, 
		NONE=516, ODBC=517, OFFLINE=518, OFFSET=519, OF=520, OJ=521, OLD_PASSWORD=522, 
		ONE=523, ONLINE=524, ONLY=525, OPEN=526, OPTIMIZER_COSTS=527, OPTIONS=528, 
		OWNER=529, PACK_KEYS=530, PAGE=531, PARSER=532, PARTIAL=533, PARTITIONING=534, 
		PARTITIONS=535, PASSWORD=536, PHASE=537, PLUGIN=538, PLUGIN_DIR=539, PLUGINS=540, 
		PORT=541, PRECEDES=542, PRECEDING=543, PREPARE=544, PRESERVE=545, PREV=546, 
		PROCESSLIST=547, PROFILE=548, PROFILES=549, PROXY=550, QUERY=551, QUICK=552, 
		REBUILD=553, RECOVER=554, RECURSIVE=555, REDO_BUFFER_SIZE=556, REDUNDANT=557, 
		RELAY=558, RELAY_LOG_FILE=559, RELAY_LOG_POS=560, RELAYLOG=561, REMOVE=562, 
		REORGANIZE=563, REPAIR=564, REPLICATE_DO_DB=565, REPLICATE_DO_TABLE=566, 
		REPLICATE_IGNORE_DB=567, REPLICATE_IGNORE_TABLE=568, REPLICATE_REWRITE_DB=569, 
		REPLICATE_WILD_DO_TABLE=570, REPLICATE_WILD_IGNORE_TABLE=571, REPLICATION=572, 
		RESET=573, RESTART=574, RESUME=575, RETURNED_SQLSTATE=576, RETURNING=577, 
		RETURNS=578, ROLE=579, ROLLBACK=580, ROLLUP=581, ROTATE=582, ROW=583, 
		ROWS=584, ROW_FORMAT=585, RTREE=586, SAVEPOINT=587, SCHEDULE=588, SECURITY=589, 
		SEQUENCE=590, SERVER=591, SESSION=592, SHARE=593, SHARED=594, SIGNED=595, 
		SIMPLE=596, SLAVE=597, SLOW=598, SNAPSHOT=599, SOCKET=600, SOME=601, SONAME=602, 
		SOUNDS=603, SOURCE=604, SQL_AFTER_GTIDS=605, SQL_AFTER_MTS_GAPS=606, SQL_BEFORE_GTIDS=607, 
		SQL_BUFFER_RESULT=608, SQL_CACHE=609, SQL_NO_CACHE=610, SQL_THREAD=611, 
		START=612, STARTS=613, STATS_AUTO_RECALC=614, STATS_PERSISTENT=615, STATS_SAMPLE_PAGES=616, 
		STATUS=617, STOP=618, STORAGE=619, STORED=620, STRING=621, SUBCLASS_ORIGIN=622, 
		SUBJECT=623, SUBPARTITION=624, SUBPARTITIONS=625, SUSPEND=626, SWAPS=627, 
		SWITCHES=628, TABLE_NAME=629, TABLESPACE=630, TABLE_TYPE=631, TEMPORARY=632, 
		TEMPTABLE=633, THAN=634, TRADITIONAL=635, TRANSACTION=636, TRANSACTIONAL=637, 
		TRIGGERS=638, TRUNCATE=639, UNBOUNDED=640, UNDEFINED=641, UNDOFILE=642, 
		UNDO_BUFFER_SIZE=643, UNINSTALL=644, UNKNOWN=645, UNTIL=646, UPGRADE=647, 
		USER=648, USE_FRM=649, USER_RESOURCES=650, VALIDATION=651, VALUE=652, 
		VARIABLES=653, VIEW=654, VIRTUAL=655, VISIBLE=656, WAIT=657, WARNINGS=658, 
		WINDOW=659, WITHOUT=660, WORK=661, WRAPPER=662, X509=663, XA=664, XML=665, 
		YES=666, EUR=667, USA=668, JIS=669, ISO=670, INTERNAL=671, QUARTER=672, 
		MONTH=673, DAY=674, HOUR=675, MINUTE=676, WEEK=677, SECOND=678, MICROSECOND=679, 
		TABLES=680, ROUTINE=681, EXECUTE=682, FILE=683, PROCESS=684, RELOAD=685, 
		SHUTDOWN=686, SUPER=687, PRIVILEGES=688, APPLICATION_PASSWORD_ADMIN=689, 
		AUDIT_ADMIN=690, BACKUP_ADMIN=691, BINLOG_ADMIN=692, BINLOG_ENCRYPTION_ADMIN=693, 
		CLONE_ADMIN=694, CONNECTION_ADMIN=695, ENCRYPTION_KEY_ADMIN=696, FIREWALL_ADMIN=697, 
		FIREWALL_USER=698, FLUSH_OPTIMIZER_COSTS=699, FLUSH_STATUS=700, FLUSH_TABLES=701, 
		FLUSH_USER_RESOURCES=702, ADMIN=703, GROUP_REPLICATION_ADMIN=704, INNODB_REDO_LOG_ARCHIVE=705, 
		INNODB_REDO_LOG_ENABLE=706, INVOKE=707, LAMBDA=708, NDB_STORED_USER=709, 
		PASSWORDLESS_USER_ADMIN=710, PERSIST_RO_VARIABLES_ADMIN=711, REPLICATION_APPLIER=712, 
		REPLICATION_SLAVE_ADMIN=713, RESOURCE_GROUP_ADMIN=714, RESOURCE_GROUP_USER=715, 
		ROLE_ADMIN=716, S3=717, SERVICE_CONNECTION_ADMIN=718, SESSION_VARIABLES_ADMIN=719, 
		SET_USER_ID=720, SHOW_ROUTINE=721, SYSTEM_VARIABLES_ADMIN=722, TABLE_ENCRYPTION_ADMIN=723, 
		VERSION_TOKEN_ADMIN=724, XA_RECOVER_ADMIN=725, ARMSCII8=726, ASCII=727, 
		BIG5=728, CP1250=729, CP1251=730, CP1256=731, CP1257=732, CP850=733, CP852=734, 
		CP866=735, CP932=736, DEC8=737, EUCJPMS=738, EUCKR=739, GB18030=740, GB2312=741, 
		GBK=742, GEOSTD8=743, GREEK=744, HEBREW=745, HP8=746, KEYBCS2=747, KOI8R=748, 
		KOI8U=749, LATIN1=750, LATIN2=751, LATIN5=752, LATIN7=753, MACCE=754, 
		MACROMAN=755, SJIS=756, SWE7=757, TIS620=758, UCS2=759, UJIS=760, UTF16=761, 
		UTF16LE=762, UTF32=763, UTF8=764, UTF8MB3=765, UTF8MB4=766, ARCHIVE=767, 
		BLACKHOLE=768, CSV=769, FEDERATED=770, INNODB=771, MEMORY=772, MRG_MYISAM=773, 
		MYISAM=774, NDB=775, NDBCLUSTER=776, PERFORMANCE_SCHEMA=777, TOKUDB=778, 
		REPEATABLE=779, COMMITTED=780, UNCOMMITTED=781, SERIALIZABLE=782, GEOMETRYCOLLECTION=783, 
		GEOMCOLLECTION=784, GEOMETRY=785, LINESTRING=786, MULTILINESTRING=787, 
		MULTIPOINT=788, MULTIPOLYGON=789, POINT=790, POLYGON=791, ABS=792, ACOS=793, 
		ADDDATE=794, ADDTIME=795, AES_DECRYPT=796, AES_ENCRYPT=797, AREA=798, 
		ASBINARY=799, ASIN=800, ASTEXT=801, ASWKB=802, ASWKT=803, ASYMMETRIC_DECRYPT=804, 
		ASYMMETRIC_DERIVE=805, ASYMMETRIC_ENCRYPT=806, ASYMMETRIC_SIGN=807, ASYMMETRIC_VERIFY=808, 
		ATAN=809, ATAN2=810, BENCHMARK=811, BIN=812, BIT_COUNT=813, BIT_LENGTH=814, 
		BUFFER=815, CATALOG_NAME=816, CEIL=817, CEILING=818, CENTROID=819, CHARACTER_LENGTH=820, 
		CHARSET=821, CHAR_LENGTH=822, COERCIBILITY=823, COLLATION=824, COMPRESS=825, 
		CONCAT=826, CONCAT_WS=827, CONNECTION_ID=828, CONV=829, CONVERT_TZ=830, 
		COS=831, COT=832, CRC32=833, CREATE_ASYMMETRIC_PRIV_KEY=834, CREATE_ASYMMETRIC_PUB_KEY=835, 
		CREATE_DH_PARAMETERS=836, CREATE_DIGEST=837, CROSSES=838, DATEDIFF=839, 
		DATE_FORMAT=840, DAYNAME=841, DAYOFMONTH=842, DAYOFWEEK=843, DAYOFYEAR=844, 
		DECODE=845, DEGREES=846, DES_DECRYPT=847, DES_ENCRYPT=848, DIMENSION=849, 
		DISJOINT=850, ELT=851, ENCODE=852, ENCRYPT=853, ENDPOINT=854, ENGINE_ATTRIBUTE=855, 
		ENVELOPE=856, EQUALS=857, EXP=858, EXPORT_SET=859, EXTERIORRING=860, EXTRACTVALUE=861, 
		FIELD=862, FIND_IN_SET=863, FLOOR=864, FORMAT=865, FOUND_ROWS=866, FROM_BASE64=867, 
		FROM_DAYS=868, FROM_UNIXTIME=869, GEOMCOLLFROMTEXT=870, GEOMCOLLFROMWKB=871, 
		GEOMETRYCOLLECTIONFROMTEXT=872, GEOMETRYCOLLECTIONFROMWKB=873, GEOMETRYFROMTEXT=874, 
		GEOMETRYFROMWKB=875, GEOMETRYN=876, GEOMETRYTYPE=877, GEOMFROMTEXT=878, 
		GEOMFROMWKB=879, GET_FORMAT=880, GET_LOCK=881, GLENGTH=882, GREATEST=883, 
		GTID_SUBSET=884, GTID_SUBTRACT=885, HEX=886, IFNULL=887, INET6_ATON=888, 
		INET6_NTOA=889, INET_ATON=890, INET_NTOA=891, INSTR=892, INTERIORRINGN=893, 
		INTERSECTS=894, ISCLOSED=895, ISEMPTY=896, ISNULL=897, ISSIMPLE=898, IS_FREE_LOCK=899, 
		IS_IPV4=900, IS_IPV4_COMPAT=901, IS_IPV4_MAPPED=902, IS_IPV6=903, IS_USED_LOCK=904, 
		LAST_INSERT_ID=905, LCASE=906, LEAST=907, LENGTH=908, LINEFROMTEXT=909, 
		LINEFROMWKB=910, LINESTRINGFROMTEXT=911, LINESTRINGFROMWKB=912, LN=913, 
		LOAD_FILE=914, LOCATE=915, LOG=916, LOG10=917, LOG2=918, LOWER=919, LPAD=920, 
		LTRIM=921, MAKEDATE=922, MAKETIME=923, MAKE_SET=924, MASTER_POS_WAIT=925, 
		MBRCONTAINS=926, MBRDISJOINT=927, MBREQUAL=928, MBRINTERSECTS=929, MBROVERLAPS=930, 
		MBRTOUCHES=931, MBRWITHIN=932, MD5=933, MLINEFROMTEXT=934, MLINEFROMWKB=935, 
		MONTHNAME=936, MPOINTFROMTEXT=937, MPOINTFROMWKB=938, MPOLYFROMTEXT=939, 
		MPOLYFROMWKB=940, MULTILINESTRINGFROMTEXT=941, MULTILINESTRINGFROMWKB=942, 
		MULTIPOINTFROMTEXT=943, MULTIPOINTFROMWKB=944, MULTIPOLYGONFROMTEXT=945, 
		MULTIPOLYGONFROMWKB=946, NAME_CONST=947, NULLIF=948, NUMGEOMETRIES=949, 
		NUMINTERIORRINGS=950, NUMPOINTS=951, OCT=952, OCTET_LENGTH=953, ORD=954, 
		OVERLAPS=955, PERIOD_ADD=956, PERIOD_DIFF=957, PI=958, POINTFROMTEXT=959, 
		POINTFROMWKB=960, POINTN=961, POLYFROMTEXT=962, POLYFROMWKB=963, POLYGONFROMTEXT=964, 
		POLYGONFROMWKB=965, POW=966, POWER=967, QUOTE=968, RADIANS=969, RAND=970, 
		RANDOM_BYTES=971, RELEASE_LOCK=972, REVERSE=973, ROUND=974, ROW_COUNT=975, 
		RPAD=976, RTRIM=977, SEC_TO_TIME=978, SECONDARY_ENGINE_ATTRIBUTE=979, 
		SESSION_USER=980, SHA=981, SHA1=982, SHA2=983, SCHEMA_NAME=984, SIGN=985, 
		SIN=986, SLEEP=987, SOUNDEX=988, SQL_THREAD_WAIT_AFTER_GTIDS=989, SQRT=990, 
		SRID=991, STARTPOINT=992, STRCMP=993, STR_TO_DATE=994, ST_AREA=995, ST_ASBINARY=996, 
		ST_ASTEXT=997, ST_ASWKB=998, ST_ASWKT=999, ST_BUFFER=1000, ST_CENTROID=1001, 
		ST_CONTAINS=1002, ST_CROSSES=1003, ST_DIFFERENCE=1004, ST_DIMENSION=1005, 
		ST_DISJOINT=1006, ST_DISTANCE=1007, ST_ENDPOINT=1008, ST_ENVELOPE=1009, 
		ST_EQUALS=1010, ST_EXTERIORRING=1011, ST_GEOMCOLLFROMTEXT=1012, ST_GEOMCOLLFROMTXT=1013, 
		ST_GEOMCOLLFROMWKB=1014, ST_GEOMETRYCOLLECTIONFROMTEXT=1015, ST_GEOMETRYCOLLECTIONFROMWKB=1016, 
		ST_GEOMETRYFROMTEXT=1017, ST_GEOMETRYFROMWKB=1018, ST_GEOMETRYN=1019, 
		ST_GEOMETRYTYPE=1020, ST_GEOMFROMTEXT=1021, ST_GEOMFROMWKB=1022, ST_INTERIORRINGN=1023, 
		ST_INTERSECTION=1024, ST_INTERSECTS=1025, ST_ISCLOSED=1026, ST_ISEMPTY=1027, 
		ST_ISSIMPLE=1028, ST_LINEFROMTEXT=1029, ST_LINEFROMWKB=1030, ST_LINESTRINGFROMTEXT=1031, 
		ST_LINESTRINGFROMWKB=1032, ST_NUMGEOMETRIES=1033, ST_NUMINTERIORRING=1034, 
		ST_NUMINTERIORRINGS=1035, ST_NUMPOINTS=1036, ST_OVERLAPS=1037, ST_POINTFROMTEXT=1038, 
		ST_POINTFROMWKB=1039, ST_POINTN=1040, ST_POLYFROMTEXT=1041, ST_POLYFROMWKB=1042, 
		ST_POLYGONFROMTEXT=1043, ST_POLYGONFROMWKB=1044, ST_SRID=1045, ST_STARTPOINT=1046, 
		ST_SYMDIFFERENCE=1047, ST_TOUCHES=1048, ST_UNION=1049, ST_WITHIN=1050, 
		ST_X=1051, ST_Y=1052, SUBDATE=1053, SUBSTRING_INDEX=1054, SUBTIME=1055, 
		SYSTEM_USER=1056, TAN=1057, TIMEDIFF=1058, TIMESTAMPADD=1059, TIMESTAMPDIFF=1060, 
		TIME_FORMAT=1061, TIME_TO_SEC=1062, TOUCHES=1063, TO_BASE64=1064, TO_DAYS=1065, 
		TO_SECONDS=1066, UCASE=1067, UNCOMPRESS=1068, UNCOMPRESSED_LENGTH=1069, 
		UNHEX=1070, UNIX_TIMESTAMP=1071, UPDATEXML=1072, UPPER=1073, UUID=1074, 
		UUID_SHORT=1075, VALIDATE_PASSWORD_STRENGTH=1076, VERSION=1077, WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=1078, 
		WEEKDAY=1079, WEEKOFYEAR=1080, WEIGHT_STRING=1081, WITHIN=1082, YEARWEEK=1083, 
		Y_FUNCTION=1084, X_FUNCTION=1085, VIA=1086, LASTVAL=1087, NEXTVAL=1088, 
		SETVAL=1089, PREVIOUS=1090, PERSISTENT=1091, BINLOG_MONITOR=1092, BINLOG_REPLAY=1093, 
		FEDERATED_ADMIN=1094, READ_ONLY_ADMIN=1095, REPLICA=1096, REPLICATION_MASTER_ADMIN=1097, 
		VAR_ASSIGN=1098, PLUS_ASSIGN=1099, MINUS_ASSIGN=1100, MULT_ASSIGN=1101, 
		DIV_ASSIGN=1102, MOD_ASSIGN=1103, AND_ASSIGN=1104, XOR_ASSIGN=1105, OR_ASSIGN=1106, 
		STAR=1107, DIVIDE=1108, MODULE=1109, PLUS=1110, MINUS=1111, DIV=1112, 
		MOD=1113, EQUAL_SYMBOL=1114, GREATER_SYMBOL=1115, LESS_SYMBOL=1116, EXCLAMATION_SYMBOL=1117, 
		BIT_NOT_OP=1118, BIT_OR_OP=1119, BIT_AND_OP=1120, BIT_XOR_OP=1121, DOT=1122, 
		LR_BRACKET=1123, RR_BRACKET=1124, COMMA=1125, SEMI=1126, AT_SIGN=1127, 
		ZERO_DECIMAL=1128, ONE_DECIMAL=1129, TWO_DECIMAL=1130, SINGLE_QUOTE_SYMB=1131, 
		DOUBLE_QUOTE_SYMB=1132, REVERSE_QUOTE_SYMB=1133, COLON_SYMB=1134, CHARSET_REVERSE_QOUTE_STRING=1135, 
		FILESIZE_LITERAL=1136, START_NATIONAL_STRING_LITERAL=1137, STRING_LITERAL=1138, 
		DECIMAL_LITERAL=1139, HEXADECIMAL_LITERAL=1140, REAL_LITERAL=1141, NULL_SPEC_LITERAL=1142, 
		BIT_STRING=1143, STRING_CHARSET_NAME=1144, DOT_ID=1145, ID=1146, REVERSE_QUOTE_ID=1147, 
		STRING_USER_NAME=1148, IP_ADDRESS=1149, STRING_USER_NAME_MARIADB=1150, 
		LOCAL_ID=1151, GLOBAL_ID=1152, ERROR_RECONGNIGION=1153, ENCRYPTED=1154, 
		ENCRYPTION_KEY_ID=1155;
	public static final int
		RULE_sqlStatements = 0, RULE_sqlStatement = 1, RULE_emptyStatement_ = 2, 
		RULE_ddlStatement = 3, RULE_dmlStatement = 4, RULE_createDatabase = 5, 
		RULE_withClause = 6, RULE_commonTableExpressions = 7, RULE_cteName = 8, 
		RULE_cteColumnName = 9, RULE_sequenceSpec = 10, RULE_timestampValue = 11, 
		RULE_intervalExpr = 12, RULE_intervalType = 13, RULE_enableType = 14, 
		RULE_indexType = 15, RULE_indexOption = 16, RULE_procedureParameter = 17, 
		RULE_functionParameter = 18, RULE_routineOption = 19, RULE_serverOption = 20, 
		RULE_createDefinitions = 21, RULE_createDefinition = 22, RULE_columnDefinition = 23, 
		RULE_columnConstraint = 24, RULE_tableConstraint = 25, RULE_referenceDefinition = 26, 
		RULE_referenceAction = 27, RULE_referenceControlType = 28, RULE_indexColumnDefinition = 29, 
		RULE_tableType = 30, RULE_tablespaceStorage = 31, RULE_dropDatabase = 32, 
		RULE_dropTable = 33, RULE_renameTable = 34, RULE_renameTableClause = 35, 
		RULE_truncateTable = 36, RULE_callStatement = 37, RULE_deleteStatement = 38, 
		RULE_doStatement = 39, RULE_handlerStatement = 40, RULE_insertStatement = 41, 
		RULE_loadDataStatement = 42, RULE_loadXmlStatement = 43, RULE_replaceStatement = 44, 
		RULE_selectStatement = 45, RULE_updateStatement = 46, RULE_insertStatementValue = 47, 
		RULE_updatedElement = 48, RULE_assignmentField = 49, RULE_singleDeleteStatement = 50, 
		RULE_multipleDeleteStatement = 51, RULE_handlerOpenStatement = 52, RULE_handlerReadIndexStatement = 53, 
		RULE_handlerReadStatement = 54, RULE_handlerCloseStatement = 55, RULE_singleUpdateStatement = 56, 
		RULE_multipleUpdateStatement = 57, RULE_orderByClause = 58, RULE_orderByExpression = 59, 
		RULE_tableSources = 60, RULE_tableSource = 61, RULE_tableSourceItem = 62, 
		RULE_indexHint = 63, RULE_indexHintType = 64, RULE_joinPart = 65, RULE_queryExpression = 66, 
		RULE_queryExpressionNointo = 67, RULE_querySpecification = 68, RULE_querySpecificationNointo = 69, 
		RULE_unionParenthesis = 70, RULE_unionStatement = 71, RULE_selectSpec = 72, 
		RULE_selectElements = 73, RULE_selectElement = 74, RULE_selectIntoExpression = 75, 
		RULE_selectFieldsInto = 76, RULE_selectLinesInto = 77, RULE_fromClause = 78, 
		RULE_groupByClause = 79, RULE_havingClause = 80, RULE_windowClause = 81, 
		RULE_groupByItem = 82, RULE_limitClause = 83, RULE_limitClauseAtom = 84, 
		RULE_showStatement = 85, RULE_variableClause = 86, RULE_showCommonEntity = 87, 
		RULE_showFilter = 88, RULE_showGlobalInfoClause = 89, RULE_showSchemaEntity = 90, 
		RULE_showProfileType = 91, RULE_simpleDescribeStatement = 92, RULE_fullDescribeStatement = 93, 
		RULE_helpStatement = 94, RULE_useStatement = 95, RULE_signalStatement = 96, 
		RULE_resignalStatement = 97, RULE_signalConditionInformation = 98, RULE_diagnosticsStatement = 99, 
		RULE_diagnosticsConditionInformationName = 100, RULE_describeObjectClause = 101, 
		RULE_fullId = 102, RULE_tableName = 103, RULE_roleName = 104, RULE_fullColumnName = 105, 
		RULE_indexColumnName = 106, RULE_userName = 107, RULE_mysqlVariable = 108, 
		RULE_charsetName = 109, RULE_collationName = 110, RULE_engineName = 111, 
		RULE_uuidSet = 112, RULE_xid = 113, RULE_xuidStringId = 114, RULE_authPlugin = 115, 
		RULE_uid = 116, RULE_simpleId = 117, RULE_dottedId = 118, RULE_decimalLiteral = 119, 
		RULE_fileSizeLiteral = 120, RULE_stringLiteral = 121, RULE_booleanLiteral = 122, 
		RULE_hexadecimalLiteral = 123, RULE_nullNotnull = 124, RULE_constant = 125, 
		RULE_dataType = 126, RULE_collectionOptions = 127, RULE_convertedDataType = 128, 
		RULE_lengthOneDimension = 129, RULE_lengthTwoDimension = 130, RULE_lengthTwoOptionalDimension = 131, 
		RULE_uidList = 132, RULE_tables = 133, RULE_indexColumnNames = 134, RULE_expressions = 135, 
		RULE_expressionsWithDefaults = 136, RULE_constants = 137, RULE_simpleStrings = 138, 
		RULE_userVariables = 139, RULE_defaultValue = 140, RULE_currentTimestamp = 141, 
		RULE_expressionOrDefault = 142, RULE_ifExists = 143, RULE_ifNotExists = 144, 
		RULE_waitNowaitClause = 145, RULE_functionCall = 146, RULE_specificFunction = 147, 
		RULE_caseFuncAlternative = 148, RULE_levelsInWeightString = 149, RULE_levelInWeightListElement = 150, 
		RULE_aggregateWindowedFunction = 151, RULE_nonAggregateWindowedFunction = 152, 
		RULE_overClause = 153, RULE_windowSpec = 154, RULE_windowName = 155, RULE_frameClause = 156, 
		RULE_frameUnits = 157, RULE_frameExtent = 158, RULE_frameBetween = 159, 
		RULE_frameRange = 160, RULE_partitionClause = 161, RULE_scalarFunctionName = 162, 
		RULE_functionArgs = 163, RULE_functionArg = 164, RULE_expression = 165, 
		RULE_predicate = 166, RULE_expressionAtom = 167, RULE_unaryOperator = 168, 
		RULE_comparisonOperator = 169, RULE_logicalOperator = 170, RULE_bitOperator = 171, 
		RULE_mathOperator = 172, RULE_jsonOperator = 173, RULE_charsetNameBase = 174, 
		RULE_transactionLevelBase = 175, RULE_privilegesBase = 176, RULE_intervalTypeBase = 177, 
		RULE_dataTypeBase = 178, RULE_keywordsCanBeId = 179, RULE_functionNameBase = 180;
	private static String[] makeRuleNames() {
		return new String[] {
			"sqlStatements", "sqlStatement", "emptyStatement_", "ddlStatement", "dmlStatement", 
			"createDatabase", "withClause", "commonTableExpressions", "cteName", 
			"cteColumnName", "sequenceSpec", "timestampValue", "intervalExpr", "intervalType", 
			"enableType", "indexType", "indexOption", "procedureParameter", "functionParameter", 
			"routineOption", "serverOption", "createDefinitions", "createDefinition", 
			"columnDefinition", "columnConstraint", "tableConstraint", "referenceDefinition", 
			"referenceAction", "referenceControlType", "indexColumnDefinition", "tableType", 
			"tablespaceStorage", "dropDatabase", "dropTable", "renameTable", "renameTableClause", 
			"truncateTable", "callStatement", "deleteStatement", "doStatement", "handlerStatement", 
			"insertStatement", "loadDataStatement", "loadXmlStatement", "replaceStatement", 
			"selectStatement", "updateStatement", "insertStatementValue", "updatedElement", 
			"assignmentField", "singleDeleteStatement", "multipleDeleteStatement", 
			"handlerOpenStatement", "handlerReadIndexStatement", "handlerReadStatement", 
			"handlerCloseStatement", "singleUpdateStatement", "multipleUpdateStatement", 
			"orderByClause", "orderByExpression", "tableSources", "tableSource", 
			"tableSourceItem", "indexHint", "indexHintType", "joinPart", "queryExpression", 
			"queryExpressionNointo", "querySpecification", "querySpecificationNointo", 
			"unionParenthesis", "unionStatement", "selectSpec", "selectElements", 
			"selectElement", "selectIntoExpression", "selectFieldsInto", "selectLinesInto", 
			"fromClause", "groupByClause", "havingClause", "windowClause", "groupByItem", 
			"limitClause", "limitClauseAtom", "showStatement", "variableClause", 
			"showCommonEntity", "showFilter", "showGlobalInfoClause", "showSchemaEntity", 
			"showProfileType", "simpleDescribeStatement", "fullDescribeStatement", 
			"helpStatement", "useStatement", "signalStatement", "resignalStatement", 
			"signalConditionInformation", "diagnosticsStatement", "diagnosticsConditionInformationName", 
			"describeObjectClause", "fullId", "tableName", "roleName", "fullColumnName", 
			"indexColumnName", "userName", "mysqlVariable", "charsetName", "collationName", 
			"engineName", "uuidSet", "xid", "xuidStringId", "authPlugin", "uid", 
			"simpleId", "dottedId", "decimalLiteral", "fileSizeLiteral", "stringLiteral", 
			"booleanLiteral", "hexadecimalLiteral", "nullNotnull", "constant", "dataType", 
			"collectionOptions", "convertedDataType", "lengthOneDimension", "lengthTwoDimension", 
			"lengthTwoOptionalDimension", "uidList", "tables", "indexColumnNames", 
			"expressions", "expressionsWithDefaults", "constants", "simpleStrings", 
			"userVariables", "defaultValue", "currentTimestamp", "expressionOrDefault", 
			"ifExists", "ifNotExists", "waitNowaitClause", "functionCall", "specificFunction", 
			"caseFuncAlternative", "levelsInWeightString", "levelInWeightListElement", 
			"aggregateWindowedFunction", "nonAggregateWindowedFunction", "overClause", 
			"windowSpec", "windowName", "frameClause", "frameUnits", "frameExtent", 
			"frameBetween", "frameRange", "partitionClause", "scalarFunctionName", 
			"functionArgs", "functionArg", "expression", "predicate", "expressionAtom", 
			"unaryOperator", "comparisonOperator", "logicalOperator", "bitOperator", 
			"mathOperator", "jsonOperator", "charsetNameBase", "transactionLevelBase", 
			"privilegesBase", "intervalTypeBase", "dataTypeBase", "keywordsCanBeId", 
			"functionNameBase"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, null, null, null, null, "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", 
			"'ANALYZE'", "'AND'", "'ARRAY'", "'AS'", "'ASC'", "'BEFORE'", "'BETWEEN'", 
			"'BOTH'", "'BUCKETS'", "'BY'", "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", 
			"'CHANGE'", "'CHARACTER'", "'CHECK'", "'COLLATE'", "'COLUMN'", "'CONDITION'", 
			"'CONSTRAINT'", "'CONTINUE'", "'CONVERT'", "'CREATE'", "'CROSS'", "'CURRENT'", 
			"'CURRENT_USER'", "'CURSOR'", "'DATABASE'", "'DATABASES'", "'DECLARE'", 
			"'DEFAULT'", "'DELAYED'", "'DELETE'", "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", 
			"'DIAGNOSTICS'", "'DISTINCT'", "'DISTINCTROW'", "'DROP'", "'EACH'", "'ELSE'", 
			"'ELSEIF'", "'EMPTY'", "'ENCLOSED'", "'ESCAPED'", "'EXCEPT'", "'EXISTS'", 
			"'EXIT'", "'EXPLAIN'", "'FALSE'", "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", 
			"'FROM'", "'FULLTEXT'", "'GENERATED'", "'GET'", "'GRANT'", "'GROUP'", 
			"'HAVING'", "'HIGH_PRIORITY'", "'HISTOGRAM'", "'IF'", "'IGNORE'", "'IGNORED'", 
			"'IN'", "'INDEX'", "'INFILE'", "'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", 
			"'INTO'", "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", "'KILL'", 
			"'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", "'LIMIT'", "'LINEAR'", "'LINES'", 
			"'LOAD'", "'LOCK'", "'LOCKED'", "'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", 
			"'MASTER_SSL_VERIFY_SERVER_CERT'", "'MATCH'", "'MAXVALUE'", "'MINVALUE'", 
			"'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", "'NULL'", 
			"'NUMBER'", "'ON'", "'OPTIMIZE'", "'OPTION'", "'OPTIONAL'", "'OPTIONALLY'", 
			"'OR'", "'ORDER'", "'OUT'", "'OVER'", "'OUTER'", "'OUTFILE'", "'PARTITION'", 
			"'PRIMARY'", "'PROCEDURE'", "'PURGE'", "'RANGE'", "'READ'", "'READS'", 
			"'REFERENCES'", "'REGEXP'", "'RELEASE'", "'RENAME'", "'REPEAT'", "'REPLACE'", 
			"'REQUIRE'", "'RESIGNAL'", "'RESTRICT'", "'RETAIN'", "'RETURN'", "'REVOKE'", 
			"'RIGHT'", "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", "'SET'", "'SEPARATOR'", 
			"'SHOW'", "'SIGNAL'", "'SKIP'", "'SPATIAL'", "'SQL'", "'SQLEXCEPTION'", 
			"'SQLSTATE'", "'SQLWARNING'", "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", 
			"'SQL_SMALL_RESULT'", "'SSL'", "'STACKED'", "'STARTING'", "'STRAIGHT_JOIN'", 
			"'TABLE'", "'TERMINATED'", "'THEN'", "'TO'", "'TRAILING'", "'TRIGGER'", 
			"'TRUE'", "'UNDO'", "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", 
			"'UPDATE'", "'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", "'WHERE'", 
			"'WHILE'", "'WITH'", "'WRITE'", "'XOR'", "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", 
			"'MEDIUMINT'", "'MIDDLEINT'", "'INT'", "'INT1'", "'INT2'", "'INT3'", 
			"'INT4'", "'INT8'", "'INTEGER'", "'BIGINT'", "'REAL'", "'DOUBLE'", "'PRECISION'", 
			"'FLOAT'", "'FLOAT4'", "'FLOAT8'", "'DECIMAL'", "'DEC'", "'NUMERIC'", 
			"'DATE'", "'TIME'", "'TIMESTAMP'", "'DATETIME'", "'YEAR'", "'CHAR'", 
			"'VARCHAR'", "'NVARCHAR'", "'NATIONAL'", "'BINARY'", "'VARBINARY'", "'TINYBLOB'", 
			"'BLOB'", "'MEDIUMBLOB'", "'LONG'", "'LONGBLOB'", "'TINYTEXT'", "'TEXT'", 
			"'MEDIUMTEXT'", "'LONGTEXT'", "'ENUM'", "'VARYING'", "'SERIAL'", "'YEAR_MONTH'", 
			"'DAY_HOUR'", "'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", "'HOUR_SECOND'", 
			"'MINUTE_SECOND'", "'SECOND_MICROSECOND'", "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", 
			"'DAY_MICROSECOND'", "'JSON_ARRAY'", "'JSON_OBJECT'", "'JSON_QUOTE'", 
			"'JSON_CONTAINS'", "'JSON_CONTAINS_PATH'", "'JSON_EXTRACT'", "'JSON_KEYS'", 
			"'JSON_OVERLAPS'", "'JSON_SEARCH'", "'JSON_VALUE'", "'JSON_ARRAY_APPEND'", 
			"'JSON_ARRAY_INSERT'", "'JSON_INSERT'", "'JSON_MERGE'", "'JSON_MERGE_PATCH'", 
			"'JSON_MERGE_PRESERVE'", "'JSON_REMOVE'", "'JSON_REPLACE'", "'JSON_SET'", 
			"'JSON_UNQUOTE'", "'JSON_DEPTH'", "'JSON_LENGTH'", "'JSON_TYPE'", "'JSON_VALID'", 
			"'JSON_TABLE'", "'JSON_SCHEMA_VALID'", "'JSON_SCHEMA_VALIDATION_REPORT'", 
			"'JSON_PRETTY'", "'JSON_STORAGE_FREE'", "'JSON_STORAGE_SIZE'", "'JSON_ARRAYAGG'", 
			"'JSON_OBJECTAGG'", "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", 
			"'CUME_DIST'", "'DENSE_RANK'", "'FIRST_VALUE'", "'GROUP_CONCAT'", "'LAG'", 
			"'LAST_VALUE'", "'LEAD'", "'MAX'", "'MIN'", "'NTILE'", "'NTH_VALUE'", 
			"'PERCENT_RANK'", "'RANK'", "'ROW_NUMBER'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
			"'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", "'VARIANCE'", "'CURRENT_DATE'", 
			"'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", "'LOCALTIME'", "'CURDATE'", 
			"'CURTIME'", "'DATE_ADD'", "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", 
			"'NOW'", "'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", "'TRIM'", 
			"'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'", "'ACCOUNT'", "'ACTION'", 
			"'AFTER'", "'AGGREGATE'", "'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", 
			"'AUTOCOMMIT'", "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", 
			"'BEGIN'", "'BINLOG'", "'BIT'", "'BLOCK'", "'BOOL'", "'BOOLEAN'", "'BTREE'", 
			"'CACHE'", "'CASCADED'", "'CHAIN'", "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", 
			"'PAGE_CHECKSUM'", "'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", 
			"'CLUSTERING'", "'COALESCE'", "'CODE'", "'COLUMNS'", "'COLUMN_FORMAT'", 
			"'COLUMN_NAME'", "'COMMENT'", "'COMMIT'", "'COMPACT'", "'COMPLETION'", 
			"'COMPRESSED'", "'COMPRESSION'", "'CONCURRENT'", "'CONNECT'", "'CONNECTION'", 
			"'CONSISTENT'", "'CONSTRAINT_CATALOG'", "'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", 
			"'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", "'CPU'", "'CYCLE'", 
			"'CURSOR_NAME'", "'DATA'", "'DATAFILE'", "'DEALLOCATE'", "'DEFAULT_AUTH'", 
			"'DEFINER'", "'DELAY_KEY_WRITE'", "'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", 
			"'DISCARD'", "'DISK'", "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", 
			"'ENABLE'", "'ENCRYPTION'", "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", 
			"'ERROR'", "'ERRORS'", "'ESCAPE'", "'EVEN'", "'EVENT'", "'EVENTS'", "'EVERY'", 
			"'EXCHANGE'", "'EXCLUSIVE'", "'EXPIRE'", "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", 
			"'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", "'FILTER'", "'FIRST'", 
			"'FIXED'", "'FLUSH'", "'FOLLOWING'", "'FOLLOWS'", "'FOUND'", "'FULL'", 
			"'FUNCTION'", "'GENERAL'", "'GLOBAL'", "'GRANTS'", "'GROUP_REPLICATION'", 
			"'HANDLER'", "'HASH'", "'HELP'", "'HOST'", "'HOSTS'", "'IDENTIFIED'", 
			"'IGNORE_SERVER_IDS'", "'IMPORT'", "'INCREMENT'", "'INDEXES'", "'INITIAL_SIZE'", 
			"'INPLACE'", "'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", "'INSTANT'", 
			"'INVISIBLE'", "'INVOKER'", "'IO'", "'IO_THREAD'", "'IPC'", "'ISOLATION'", 
			"'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", "'LANGUAGE'", "'LAST'", "'LEAVES'", 
			"'LESS'", "'LEVEL'", "'LIST'", "'LOCAL'", "'LOGFILE'", "'LOGS'", "'MASTER'", 
			"'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", "'MASTER_DELAY'", 
			"'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", "'MASTER_LOG_FILE'", "'MASTER_LOG_POS'", 
			"'MASTER_PASSWORD'", "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", "'MASTER_SSL'", 
			"'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", "'MASTER_SSL_CIPHER'", 
			"'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", 
			"'MASTER_USER'", "'MAX_CONNECTIONS_PER_HOUR'", "'MAX_QUERIES_PER_HOUR'", 
			"'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", "'MAX_USER_CONNECTIONS'", 
			"'MEDIUM'", "'MEMBER'", "'MERGE'", "'MESSAGE_TEXT'", "'MID'", "'MIGRATE'", 
			"'MIN_ROWS'", "'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", "'MYSQL_ERRNO'", 
			"'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", "'NO'", "'NOCACHE'", 
			"'NOCOPY'", "'NOCYCLE'", "'NOMAXVALUE'", "'NOMINVALUE'", "'NOWAIT'", 
			"'NODEGROUP'", "'NONE'", "'ODBC'", "'OFFLINE'", "'OFFSET'", "'OF'", "'OJ'", 
			"'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", "'OPTIMIZER_COSTS'", 
			"'OPTIONS'", "'OWNER'", "'PACK_KEYS'", "'PAGE'", "'PARSER'", "'PARTIAL'", 
			"'PARTITIONING'", "'PARTITIONS'", "'PASSWORD'", "'PHASE'", "'PLUGIN'", 
			"'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", "'PRECEDING'", "'PREPARE'", 
			"'PRESERVE'", "'PREV'", "'PROCESSLIST'", "'PROFILE'", "'PROFILES'", "'PROXY'", 
			"'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", "'RECURSIVE'", "'REDO_BUFFER_SIZE'", 
			"'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", "'RELAY_LOG_POS'", "'RELAYLOG'", 
			"'REMOVE'", "'REORGANIZE'", "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", 
			"'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", "'REPLICATE_REWRITE_DB'", 
			"'REPLICATE_WILD_DO_TABLE'", "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", 
			"'RESET'", "'RESTART'", "'RESUME'", "'RETURNED_SQLSTATE'", "'RETURNING'", 
			"'RETURNS'", "'ROLE'", "'ROLLBACK'", "'ROLLUP'", "'ROTATE'", "'ROW'", 
			"'ROWS'", "'ROW_FORMAT'", "'RTREE'", "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", 
			"'SEQUENCE'", "'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", "'SIGNED'", 
			"'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'", "'SOCKET'", "'SOME'", 
			"'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", "'SQL_AFTER_MTS_GAPS'", 
			"'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", "'SQL_CACHE'", "'SQL_NO_CACHE'", 
			"'SQL_THREAD'", "'START'", "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", 
			"'STATS_SAMPLE_PAGES'", "'STATUS'", "'STOP'", "'STORAGE'", "'STORED'", 
			"'STRING'", "'SUBCLASS_ORIGIN'", "'SUBJECT'", "'SUBPARTITION'", "'SUBPARTITIONS'", 
			"'SUSPEND'", "'SWAPS'", "'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", 
			"'TABLE_TYPE'", "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", 
			"'TRANSACTION'", "'TRANSACTIONAL'", "'TRIGGERS'", "'TRUNCATE'", "'UNBOUNDED'", 
			"'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", "'UNINSTALL'", "'UNKNOWN'", 
			"'UNTIL'", "'UPGRADE'", "'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'", 
			"'VALUE'", "'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", "'WAIT'", 
			"'WARNINGS'", "'WINDOW'", "'WITHOUT'", "'WORK'", "'WRAPPER'", "'X509'", 
			"'XA'", "'XML'", "'YES'", "'EUR'", "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", 
			"'QUARTER'", "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", "'SECOND'", 
			"'MICROSECOND'", "'TABLES'", "'ROUTINE'", "'EXECUTE'", "'FILE'", "'PROCESS'", 
			"'RELOAD'", "'SHUTDOWN'", "'SUPER'", "'PRIVILEGES'", "'APPLICATION_PASSWORD_ADMIN'", 
			"'AUDIT_ADMIN'", "'BACKUP_ADMIN'", "'BINLOG_ADMIN'", "'BINLOG_ENCRYPTION_ADMIN'", 
			"'CLONE_ADMIN'", "'CONNECTION_ADMIN'", "'ENCRYPTION_KEY_ADMIN'", "'FIREWALL_ADMIN'", 
			"'FIREWALL_USER'", "'FLUSH_OPTIMIZER_COSTS'", "'FLUSH_STATUS'", "'FLUSH_TABLES'", 
			"'FLUSH_USER_RESOURCES'", "'ADMIN'", "'GROUP_REPLICATION_ADMIN'", "'INNODB_REDO_LOG_ARCHIVE'", 
			"'INNODB_REDO_LOG_ENABLE'", "'INVOKE'", "'LAMBDA'", "'NDB_STORED_USER'", 
			"'PASSWORDLESS_USER_ADMIN'", "'PERSIST_RO_VARIABLES_ADMIN'", "'REPLICATION_APPLIER'", 
			"'REPLICATION_SLAVE_ADMIN'", "'RESOURCE_GROUP_ADMIN'", "'RESOURCE_GROUP_USER'", 
			"'ROLE_ADMIN'", "'S3'", "'SERVICE_CONNECTION_ADMIN'", null, "'SET_USER_ID'", 
			"'SHOW_ROUTINE'", "'SYSTEM_VARIABLES_ADMIN'", "'TABLE_ENCRYPTION_ADMIN'", 
			"'VERSION_TOKEN_ADMIN'", "'XA_RECOVER_ADMIN'", "'ARMSCII8'", "'ASCII'", 
			"'BIG5'", "'CP1250'", "'CP1251'", "'CP1256'", "'CP1257'", "'CP850'", 
			"'CP852'", "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", "'EUCKR'", "'GB18030'", 
			"'GB2312'", "'GBK'", "'GEOSTD8'", "'GREEK'", "'HEBREW'", "'HP8'", "'KEYBCS2'", 
			"'KOI8R'", "'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'", "'LATIN7'", 
			"'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", "'TIS620'", "'UCS2'", "'UJIS'", 
			"'UTF16'", "'UTF16LE'", "'UTF32'", "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", 
			"'ARCHIVE'", "'BLACKHOLE'", "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", 
			"'MRG_MYISAM'", "'MYISAM'", "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", 
			"'TOKUDB'", "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", "'SERIALIZABLE'", 
			"'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'", "'GEOMETRY'", "'LINESTRING'", 
			"'MULTILINESTRING'", "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", 
			"'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", "'AES_ENCRYPT'", 
			"'AREA'", "'ASBINARY'", "'ASIN'", "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
			"'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", "'ASYMMETRIC_VERIFY'", 
			"'ATAN'", "'ATAN2'", "'BENCHMARK'", "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", 
			"'BUFFER'", "'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", "'CHARACTER_LENGTH'", 
			"'CHARSET'", "'CHAR_LENGTH'", "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", 
			"'CONCAT'", "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
			"'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", "'CREATE_ASYMMETRIC_PUB_KEY'", 
			"'CREATE_DH_PARAMETERS'", "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", 
			"'DATE_FORMAT'", "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
			"'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", "'DIMENSION'", 
			"'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", "'ENDPOINT'", "'ENGINE_ATTRIBUTE'", 
			"'ENVELOPE'", "'EQUALS'", "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", 
			"'EXTRACTVALUE'", "'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", 
			"'FOUND_ROWS'", "'FROM_BASE64'", "'FROM_DAYS'", "'FROM_UNIXTIME'", "'GEOMCOLLFROMTEXT'", 
			"'GEOMCOLLFROMWKB'", "'GEOMETRYCOLLECTIONFROMTEXT'", "'GEOMETRYCOLLECTIONFROMWKB'", 
			"'GEOMETRYFROMTEXT'", "'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", 
			"'GEOMFROMTEXT'", "'GEOMFROMWKB'", "'GET_FORMAT'", "'GET_LOCK'", "'GLENGTH'", 
			"'GREATEST'", "'GTID_SUBSET'", "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", 
			"'INET6_ATON'", "'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", 
			"'INTERIORRINGN'", "'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", "'ISNULL'", 
			"'ISSIMPLE'", "'IS_FREE_LOCK'", "'IS_IPV4'", "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", 
			"'IS_IPV6'", "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", 
			"'LENGTH'", "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", 
			"'LINESTRINGFROMWKB'", "'LN'", "'LOAD_FILE'", "'LOCATE'", "'LOG'", "'LOG10'", 
			"'LOG2'", "'LOWER'", "'LPAD'", "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", 
			"'MAKE_SET'", "'MASTER_POS_WAIT'", "'MBRCONTAINS'", "'MBRDISJOINT'", 
			"'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", "'MBRTOUCHES'", "'MBRWITHIN'", 
			"'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", "'MONTHNAME'", "'MPOINTFROMTEXT'", 
			"'MPOINTFROMWKB'", "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", 
			"'MULTILINESTRINGFROMWKB'", "'MULTIPOINTFROMTEXT'", "'MULTIPOINTFROMWKB'", 
			"'MULTIPOLYGONFROMTEXT'", "'MULTIPOLYGONFROMWKB'", "'NAME_CONST'", "'NULLIF'", 
			"'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", 
			"'ORD'", "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", "'POINTFROMTEXT'", 
			"'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", "'POLYFROMWKB'", "'POLYGONFROMTEXT'", 
			"'POLYGONFROMWKB'", "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
			"'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", "'ROW_COUNT'", 
			"'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", "'SECONDARY_ENGINE_ATTRIBUTE'", 
			"'SESSION_USER'", "'SHA'", "'SHA1'", "'SHA2'", "'SCHEMA_NAME'", "'SIGN'", 
			"'SIN'", "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", "'SQRT'", 
			"'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", "'ST_AREA'", "'ST_ASBINARY'", 
			"'ST_ASTEXT'", "'ST_ASWKB'", "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", 
			"'ST_CONTAINS'", "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", 
			"'ST_DISJOINT'", "'ST_DISTANCE'", "'ST_ENDPOINT'", "'ST_ENVELOPE'", "'ST_EQUALS'", 
			"'ST_EXTERIORRING'", "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", 
			"'ST_GEOMCOLLFROMWKB'", "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
			"'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", "'ST_GEOMETRYTYPE'", 
			"'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", 
			"'ST_INTERSECTS'", "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", 
			"'ST_LINEFROMTEXT'", "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
			"'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
			"'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", "'ST_POINTFROMWKB'", 
			"'ST_POINTN'", "'ST_POLYFROMTEXT'", "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", 
			"'ST_POLYGONFROMWKB'", "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
			"'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", "'ST_Y'", "'SUBDATE'", 
			"'SUBSTRING_INDEX'", "'SUBTIME'", "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", 
			"'TIMESTAMPADD'", "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
			"'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", "'UCASE'", "'UNCOMPRESS'", 
			"'UNCOMPRESSED_LENGTH'", "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", 
			"'UPPER'", "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", 
			"'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", "'WEEKDAY'", "'WEEKOFYEAR'", 
			"'WEIGHT_STRING'", "'WITHIN'", "'YEARWEEK'", "'Y'", "'X'", "'VIA'", "'LASTVAL'", 
			"'NEXTVAL'", "'SETVAL'", "'PREVIOUS'", "'PERSISTENT'", "'BINLOG_MONITOR'", 
			"'BINLOG_REPLAY'", "'FEDERATED_ADMIN'", "'READ_ONLY_ADMIN'", "'REPLICA'", 
			"'REPLICATION_MASTER_ADMIN'", "':='", "'+='", "'-='", "'*='", "'/='", 
			"'%='", "'&='", "'^='", "'|='", "'*'", "'/'", "'%'", "'+'", "'-'", "'DIV'", 
			"'MOD'", "'='", "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", "'.'", 
			"'('", "')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", "'''", "'\"'", 
			"'`'", "':'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", "LINE_COMMENT", 
			"ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", "AND", "ARRAY", "AS", "ASC", 
			"BEFORE", "BETWEEN", "BOTH", "BUCKETS", "BY", "CALL", "CASCADE", "CASE", 
			"CAST", "CHANGE", "CHARACTER", "CHECK", "COLLATE", "COLUMN", "CONDITION", 
			"CONSTRAINT", "CONTINUE", "CONVERT", "CREATE", "CROSS", "CURRENT", "CURRENT_USER", 
			"CURSOR", "DATABASE", "DATABASES", "DECLARE", "DEFAULT", "DELAYED", "DELETE", 
			"DESC", "DESCRIBE", "DETERMINISTIC", "DIAGNOSTICS", "DISTINCT", "DISTINCTROW", 
			"DROP", "EACH", "ELSE", "ELSEIF", "EMPTY", "ENCLOSED", "ESCAPED", "EXCEPT", 
			"EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", "FOR", "FORCE", "FOREIGN", 
			"FROM", "FULLTEXT", "GENERATED", "GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", 
			"HISTOGRAM", "IF", "IGNORE", "IGNORED", "IN", "INDEX", "INFILE", "INNER", 
			"INOUT", "INSERT", "INTERVAL", "INTO", "IS", "ITERATE", "JOIN", "KEY", 
			"KEYS", "KILL", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", "LINEAR", 
			"LINES", "LOAD", "LOCK", "LOCKED", "LOOP", "LOW_PRIORITY", "MASTER_BIND", 
			"MASTER_SSL_VERIFY_SERVER_CERT", "MATCH", "MAXVALUE", "MINVALUE", "MODIFIES", 
			"NATURAL", "NOT", "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "NUMBER", "ON", 
			"OPTIMIZE", "OPTION", "OPTIONAL", "OPTIONALLY", "OR", "ORDER", "OUT", 
			"OVER", "OUTER", "OUTFILE", "PARTITION", "PRIMARY", "PROCEDURE", "PURGE", 
			"RANGE", "READ", "READS", "REFERENCES", "REGEXP", "RELEASE", "RENAME", 
			"REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", "RESTRICT", "RETAIN", "RETURN", 
			"REVOKE", "RIGHT", "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", "SET", "SEPARATOR", 
			"SHOW", "SIGNAL", "SKIP_", "SPATIAL", "SQL", "SQLEXCEPTION", "SQLSTATE", 
			"SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", "SQL_SMALL_RESULT", 
			"SSL", "STACKED", "STARTING", "STRAIGHT_JOIN", "TABLE", "TERMINATED", 
			"THEN", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", "UNION", "UNIQUE", 
			"UNLOCK", "UNSIGNED", "UPDATE", "USAGE", "USE", "USING", "VALUES", "WHEN", 
			"WHERE", "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT", "SMALLINT", 
			"MEDIUMINT", "MIDDLEINT", "INT", "INT1", "INT2", "INT3", "INT4", "INT8", 
			"INTEGER", "BIGINT", "REAL", "DOUBLE", "PRECISION", "FLOAT", "FLOAT4", 
			"FLOAT8", "DECIMAL", "DEC", "NUMERIC", "DATE", "TIME", "TIMESTAMP", "DATETIME", 
			"YEAR", "CHAR", "VARCHAR", "NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", 
			"TINYBLOB", "BLOB", "MEDIUMBLOB", "LONG", "LONGBLOB", "TINYTEXT", "TEXT", 
			"MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", "SERIAL", "YEAR_MONTH", 
			"DAY_HOUR", "DAY_MINUTE", "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", 
			"MINUTE_SECOND", "SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", 
			"DAY_MICROSECOND", "JSON_ARRAY", "JSON_OBJECT", "JSON_QUOTE", "JSON_CONTAINS", 
			"JSON_CONTAINS_PATH", "JSON_EXTRACT", "JSON_KEYS", "JSON_OVERLAPS", "JSON_SEARCH", 
			"JSON_VALUE", "JSON_ARRAY_APPEND", "JSON_ARRAY_INSERT", "JSON_INSERT", 
			"JSON_MERGE", "JSON_MERGE_PATCH", "JSON_MERGE_PRESERVE", "JSON_REMOVE", 
			"JSON_REPLACE", "JSON_SET", "JSON_UNQUOTE", "JSON_DEPTH", "JSON_LENGTH", 
			"JSON_TYPE", "JSON_VALID", "JSON_TABLE", "JSON_SCHEMA_VALID", "JSON_SCHEMA_VALIDATION_REPORT", 
			"JSON_PRETTY", "JSON_STORAGE_FREE", "JSON_STORAGE_SIZE", "JSON_ARRAYAGG", 
			"JSON_OBJECTAGG", "AVG", "BIT_AND", "BIT_OR", "BIT_XOR", "COUNT", "CUME_DIST", 
			"DENSE_RANK", "FIRST_VALUE", "GROUP_CONCAT", "LAG", "LAST_VALUE", "LEAD", 
			"MAX", "MIN", "NTILE", "NTH_VALUE", "PERCENT_RANK", "RANK", "ROW_NUMBER", 
			"STD", "STDDEV", "STDDEV_POP", "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", 
			"VARIANCE", "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", "LOCALTIME", 
			"CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", "EXTRACT", "LOCALTIMESTAMP", 
			"NOW", "POSITION", "SUBSTR", "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", 
			"UTC_TIME", "UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", 
			"ALGORITHM", "ANY", "AT", "AUTHORS", "AUTOCOMMIT", "AUTOEXTEND_SIZE", 
			"AUTO_INCREMENT", "AVG_ROW_LENGTH", "BEGIN", "BINLOG", "BIT", "BLOCK", 
			"BOOL", "BOOLEAN", "BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", 
			"CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", "CIPHER", "CLASS_ORIGIN", "CLIENT", 
			"CLOSE", "CLUSTERING", "COALESCE", "CODE", "COLUMNS", "COLUMN_FORMAT", 
			"COLUMN_NAME", "COMMENT", "COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", 
			"COMPRESSION", "CONCURRENT", "CONNECT", "CONNECTION", "CONSISTENT", "CONSTRAINT_CATALOG", 
			"CONSTRAINT_SCHEMA", "CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", 
			"COPY", "CPU", "CYCLE", "CURSOR_NAME", "DATA", "DATAFILE", "DEALLOCATE", 
			"DEFAULT_AUTH", "DEFINER", "DELAY_KEY_WRITE", "DES_KEY_FILE", "DIRECTORY", 
			"DISABLE", "DISCARD", "DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", 
			"ENABLE", "ENCRYPTION", "END", "ENDS", "ENGINE", "ENGINES", "ERROR", 
			"ERRORS", "ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", "EXCHANGE", "EXCLUSIVE", 
			"EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", "FAST", "FAULTS", "FIELDS", 
			"FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", "FLUSH", "FOLLOWING", 
			"FOLLOWS", "FOUND", "FULL", "FUNCTION", "GENERAL", "GLOBAL", "GRANTS", 
			"GROUP_REPLICATION", "HANDLER", "HASH", "HELP", "HOST", "HOSTS", "IDENTIFIED", 
			"IGNORE_SERVER_IDS", "IMPORT", "INCREMENT", "INDEXES", "INITIAL_SIZE", 
			"INPLACE", "INSERT_METHOD", "INSTALL", "INSTANCE", "INSTANT", "INVISIBLE", 
			"INVOKER", "IO", "IO_THREAD", "IPC", "ISOLATION", "ISSUER", "JSON", "KEY_BLOCK_SIZE", 
			"LANGUAGE", "LAST", "LEAVES", "LESS", "LEVEL", "LIST", "LOCAL", "LOGFILE", 
			"LOGS", "MASTER", "MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", 
			"MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", "MASTER_LOG_FILE", "MASTER_LOG_POS", 
			"MASTER_PASSWORD", "MASTER_PORT", "MASTER_RETRY_COUNT", "MASTER_SSL", 
			"MASTER_SSL_CA", "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", 
			"MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", "MASTER_TLS_VERSION", 
			"MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", "MAX_QUERIES_PER_HOUR", "MAX_ROWS", 
			"MAX_SIZE", "MAX_UPDATES_PER_HOUR", "MAX_USER_CONNECTIONS", "MEDIUM", 
			"MEMBER", "MERGE", "MESSAGE_TEXT", "MID", "MIGRATE", "MIN_ROWS", "MODE", 
			"MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", "NAME", "NAMES", "NCHAR", 
			"NEVER", "NEXT", "NO", "NOCACHE", "NOCOPY", "NOCYCLE", "NOMAXVALUE", 
			"NOMINVALUE", "NOWAIT", "NODEGROUP", "NONE", "ODBC", "OFFLINE", "OFFSET", 
			"OF", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", "ONLY", "OPEN", "OPTIMIZER_COSTS", 
			"OPTIONS", "OWNER", "PACK_KEYS", "PAGE", "PARSER", "PARTIAL", "PARTITIONING", 
			"PARTITIONS", "PASSWORD", "PHASE", "PLUGIN", "PLUGIN_DIR", "PLUGINS", 
			"PORT", "PRECEDES", "PRECEDING", "PREPARE", "PRESERVE", "PREV", "PROCESSLIST", 
			"PROFILE", "PROFILES", "PROXY", "QUERY", "QUICK", "REBUILD", "RECOVER", 
			"RECURSIVE", "REDO_BUFFER_SIZE", "REDUNDANT", "RELAY", "RELAY_LOG_FILE", 
			"RELAY_LOG_POS", "RELAYLOG", "REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", 
			"REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", 
			"REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", "REPLICATE_WILD_IGNORE_TABLE", 
			"REPLICATION", "RESET", "RESTART", "RESUME", "RETURNED_SQLSTATE", "RETURNING", 
			"RETURNS", "ROLE", "ROLLBACK", "ROLLUP", "ROTATE", "ROW", "ROWS", "ROW_FORMAT", 
			"RTREE", "SAVEPOINT", "SCHEDULE", "SECURITY", "SEQUENCE", "SERVER", "SESSION", 
			"SHARE", "SHARED", "SIGNED", "SIMPLE", "SLAVE", "SLOW", "SNAPSHOT", "SOCKET", 
			"SOME", "SONAME", "SOUNDS", "SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", 
			"SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", "SQL_CACHE", "SQL_NO_CACHE", 
			"SQL_THREAD", "START", "STARTS", "STATS_AUTO_RECALC", "STATS_PERSISTENT", 
			"STATS_SAMPLE_PAGES", "STATUS", "STOP", "STORAGE", "STORED", "STRING", 
			"SUBCLASS_ORIGIN", "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", "SUSPEND", 
			"SWAPS", "SWITCHES", "TABLE_NAME", "TABLESPACE", "TABLE_TYPE", "TEMPORARY", 
			"TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", "TRANSACTIONAL", "TRIGGERS", 
			"TRUNCATE", "UNBOUNDED", "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", 
			"UNINSTALL", "UNKNOWN", "UNTIL", "UPGRADE", "USER", "USE_FRM", "USER_RESOURCES", 
			"VALIDATION", "VALUE", "VARIABLES", "VIEW", "VIRTUAL", "VISIBLE", "WAIT", 
			"WARNINGS", "WINDOW", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", "XML", 
			"YES", "EUR", "USA", "JIS", "ISO", "INTERNAL", "QUARTER", "MONTH", "DAY", 
			"HOUR", "MINUTE", "WEEK", "SECOND", "MICROSECOND", "TABLES", "ROUTINE", 
			"EXECUTE", "FILE", "PROCESS", "RELOAD", "SHUTDOWN", "SUPER", "PRIVILEGES", 
			"APPLICATION_PASSWORD_ADMIN", "AUDIT_ADMIN", "BACKUP_ADMIN", "BINLOG_ADMIN", 
			"BINLOG_ENCRYPTION_ADMIN", "CLONE_ADMIN", "CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", 
			"FIREWALL_ADMIN", "FIREWALL_USER", "FLUSH_OPTIMIZER_COSTS", "FLUSH_STATUS", 
			"FLUSH_TABLES", "FLUSH_USER_RESOURCES", "ADMIN", "GROUP_REPLICATION_ADMIN", 
			"INNODB_REDO_LOG_ARCHIVE", "INNODB_REDO_LOG_ENABLE", "INVOKE", "LAMBDA", 
			"NDB_STORED_USER", "PASSWORDLESS_USER_ADMIN", "PERSIST_RO_VARIABLES_ADMIN", 
			"REPLICATION_APPLIER", "REPLICATION_SLAVE_ADMIN", "RESOURCE_GROUP_ADMIN", 
			"RESOURCE_GROUP_USER", "ROLE_ADMIN", "S3", "SERVICE_CONNECTION_ADMIN", 
			"SESSION_VARIABLES_ADMIN", "SET_USER_ID", "SHOW_ROUTINE", "SYSTEM_VARIABLES_ADMIN", 
			"TABLE_ENCRYPTION_ADMIN", "VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", 
			"ARMSCII8", "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", 
			"CP850", "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", "EUCKR", "GB18030", 
			"GB2312", "GBK", "GEOSTD8", "GREEK", "HEBREW", "HP8", "KEYBCS2", "KOI8R", 
			"KOI8U", "LATIN1", "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", 
			"SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF16", "UTF16LE", "UTF32", 
			"UTF8", "UTF8MB3", "UTF8MB4", "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", 
			"INNODB", "MEMORY", "MRG_MYISAM", "MYISAM", "NDB", "NDBCLUSTER", "PERFORMANCE_SCHEMA", 
			"TOKUDB", "REPEATABLE", "COMMITTED", "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", 
			"GEOMCOLLECTION", "GEOMETRY", "LINESTRING", "MULTILINESTRING", "MULTIPOINT", 
			"MULTIPOLYGON", "POINT", "POLYGON", "ABS", "ACOS", "ADDDATE", "ADDTIME", 
			"AES_DECRYPT", "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", "ASWKB", 
			"ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", "ASYMMETRIC_ENCRYPT", 
			"ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", "ATAN", "ATAN2", "BENCHMARK", 
			"BIN", "BIT_COUNT", "BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", 
			"CENTROID", "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", "COERCIBILITY", 
			"COLLATION", "COMPRESS", "CONCAT", "CONCAT_WS", "CONNECTION_ID", "CONV", 
			"CONVERT_TZ", "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", "CREATE_ASYMMETRIC_PUB_KEY", 
			"CREATE_DH_PARAMETERS", "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
			"DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", "DECODE", "DEGREES", 
			"DES_DECRYPT", "DES_ENCRYPT", "DIMENSION", "DISJOINT", "ELT", "ENCODE", 
			"ENCRYPT", "ENDPOINT", "ENGINE_ATTRIBUTE", "ENVELOPE", "EQUALS", "EXP", 
			"EXPORT_SET", "EXTERIORRING", "EXTRACTVALUE", "FIELD", "FIND_IN_SET", 
			"FLOOR", "FORMAT", "FOUND_ROWS", "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", 
			"GEOMCOLLFROMTEXT", "GEOMCOLLFROMWKB", "GEOMETRYCOLLECTIONFROMTEXT", 
			"GEOMETRYCOLLECTIONFROMWKB", "GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", "GEOMETRYN", 
			"GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", "GET_FORMAT", "GET_LOCK", 
			"GLENGTH", "GREATEST", "GTID_SUBSET", "GTID_SUBTRACT", "HEX", "IFNULL", 
			"INET6_ATON", "INET6_NTOA", "INET_ATON", "INET_NTOA", "INSTR", "INTERIORRINGN", 
			"INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", "ISSIMPLE", "IS_FREE_LOCK", 
			"IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", "IS_IPV6", "IS_USED_LOCK", 
			"LAST_INSERT_ID", "LCASE", "LEAST", "LENGTH", "LINEFROMTEXT", "LINEFROMWKB", 
			"LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", "LN", "LOAD_FILE", "LOCATE", 
			"LOG", "LOG10", "LOG2", "LOWER", "LPAD", "LTRIM", "MAKEDATE", "MAKETIME", 
			"MAKE_SET", "MASTER_POS_WAIT", "MBRCONTAINS", "MBRDISJOINT", "MBREQUAL", 
			"MBRINTERSECTS", "MBROVERLAPS", "MBRTOUCHES", "MBRWITHIN", "MD5", "MLINEFROMTEXT", 
			"MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", "MPOINTFROMWKB", "MPOLYFROMTEXT", 
			"MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", "MULTILINESTRINGFROMWKB", 
			"MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", "MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", 
			"NAME_CONST", "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", 
			"OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", "PERIOD_DIFF", 
			"PI", "POINTFROMTEXT", "POINTFROMWKB", "POINTN", "POLYFROMTEXT", "POLYFROMWKB", 
			"POLYGONFROMTEXT", "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
			"RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", "ROUND", "ROW_COUNT", 
			"RPAD", "RTRIM", "SEC_TO_TIME", "SECONDARY_ENGINE_ATTRIBUTE", "SESSION_USER", 
			"SHA", "SHA1", "SHA2", "SCHEMA_NAME", "SIGN", "SIN", "SLEEP", "SOUNDEX", 
			"SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", "SRID", "STARTPOINT", "STRCMP", 
			"STR_TO_DATE", "ST_AREA", "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", 
			"ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", "ST_CROSSES", "ST_DIFFERENCE", 
			"ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", "ST_ENDPOINT", "ST_ENVELOPE", 
			"ST_EQUALS", "ST_EXTERIORRING", "ST_GEOMCOLLFROMTEXT", "ST_GEOMCOLLFROMTXT", 
			"ST_GEOMCOLLFROMWKB", "ST_GEOMETRYCOLLECTIONFROMTEXT", "ST_GEOMETRYCOLLECTIONFROMWKB", 
			"ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", "ST_GEOMETRYN", "ST_GEOMETRYTYPE", 
			"ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", "ST_INTERIORRINGN", "ST_INTERSECTION", 
			"ST_INTERSECTS", "ST_ISCLOSED", "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", 
			"ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", "ST_LINESTRINGFROMWKB", "ST_NUMGEOMETRIES", 
			"ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", "ST_NUMPOINTS", "ST_OVERLAPS", 
			"ST_POINTFROMTEXT", "ST_POINTFROMWKB", "ST_POINTN", "ST_POLYFROMTEXT", 
			"ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", "ST_SRID", 
			"ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", "ST_UNION", "ST_WITHIN", 
			"ST_X", "ST_Y", "SUBDATE", "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER", 
			"TAN", "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", "TIME_TO_SEC", 
			"TOUCHES", "TO_BASE64", "TO_DAYS", "TO_SECONDS", "UCASE", "UNCOMPRESS", 
			"UNCOMPRESSED_LENGTH", "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", "UPPER", 
			"UUID", "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", "VERSION", "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", 
			"WEEKDAY", "WEEKOFYEAR", "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", 
			"X_FUNCTION", "VIA", "LASTVAL", "NEXTVAL", "SETVAL", "PREVIOUS", "PERSISTENT", 
			"BINLOG_MONITOR", "BINLOG_REPLAY", "FEDERATED_ADMIN", "READ_ONLY_ADMIN", 
			"REPLICA", "REPLICATION_MASTER_ADMIN", "VAR_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", 
			"MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", 
			"OR_ASSIGN", "STAR", "DIVIDE", "MODULE", "PLUS", "MINUS", "DIV", "MOD", 
			"EQUAL_SYMBOL", "GREATER_SYMBOL", "LESS_SYMBOL", "EXCLAMATION_SYMBOL", 
			"BIT_NOT_OP", "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", "DOT", "LR_BRACKET", 
			"RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", "ONE_DECIMAL", 
			"TWO_DECIMAL", "SINGLE_QUOTE_SYMB", "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", 
			"COLON_SYMB", "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", "START_NATIONAL_STRING_LITERAL", 
			"STRING_LITERAL", "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "REAL_LITERAL", 
			"NULL_SPEC_LITERAL", "BIT_STRING", "STRING_CHARSET_NAME", "DOT_ID", "ID", 
			"REVERSE_QUOTE_ID", "STRING_USER_NAME", "IP_ADDRESS", "STRING_USER_NAME_MARIADB", 
			"LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION", "ENCRYPTED", "ENCRYPTION_KEY_ID"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "MySqlParser.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public MySqlParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class SqlStatementsContext extends ParserRuleContext {
		public List<SqlStatementContext> sqlStatement() {
			return getRuleContexts(SqlStatementContext.class);
		}
		public SqlStatementContext sqlStatement(int i) {
			return getRuleContext(SqlStatementContext.class,i);
		}
		public List<EmptyStatement_Context> emptyStatement_() {
			return getRuleContexts(EmptyStatement_Context.class);
		}
		public EmptyStatement_Context emptyStatement_(int i) {
			return getRuleContext(EmptyStatement_Context.class,i);
		}
		public List<TerminalNode> SEMI() { return getTokens(MySqlParser.SEMI); }
		public TerminalNode SEMI(int i) {
			return getToken(MySqlParser.SEMI, i);
		}
		public List<TerminalNode> MINUS() { return getTokens(MySqlParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(MySqlParser.MINUS, i);
		}
		public SqlStatementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSqlStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSqlStatements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSqlStatements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementsContext sqlStatements() throws RecognitionException {
		SqlStatementsContext _localctx = new SqlStatementsContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_sqlStatements);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(373);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(371);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case CALL:
					case CREATE:
					case DELETE:
					case DROP:
					case INSERT:
					case LOAD:
					case RENAME:
					case REPLACE:
					case SELECT:
					case UPDATE:
					case DO:
					case HANDLER:
					case TRUNCATE:
					case LR_BRACKET:
						{
						setState(362);
						sqlStatement();
						setState(365);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==MINUS) {
							{
							setState(363);
							match(MINUS);
							setState(364);
							match(MINUS);
							}
						}

						setState(368);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,1,_ctx) ) {
						case 1:
							{
							setState(367);
							match(SEMI);
							}
							break;
						}
						}
						break;
					case SEMI:
						{
						setState(370);
						emptyStatement_();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(375);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,3,_ctx);
			}
			setState(385);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CALL:
			case CREATE:
			case DELETE:
			case DROP:
			case INSERT:
			case LOAD:
			case RENAME:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case DO:
			case HANDLER:
			case TRUNCATE:
			case LR_BRACKET:
				{
				setState(376);
				sqlStatement();
				setState(382);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==MINUS || _la==SEMI) {
					{
					setState(379);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==MINUS) {
						{
						setState(377);
						match(MINUS);
						setState(378);
						match(MINUS);
						}
					}

					setState(381);
					match(SEMI);
					}
				}

				}
				break;
			case SEMI:
				{
				setState(384);
				emptyStatement_();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SqlStatementContext extends ParserRuleContext {
		public DdlStatementContext ddlStatement() {
			return getRuleContext(DdlStatementContext.class,0);
		}
		public DmlStatementContext dmlStatement() {
			return getRuleContext(DmlStatementContext.class,0);
		}
		public SqlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSqlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSqlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSqlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SqlStatementContext sqlStatement() throws RecognitionException {
		SqlStatementContext _localctx = new SqlStatementContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_sqlStatement);
		try {
			setState(389);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CREATE:
			case DROP:
			case RENAME:
			case TRUNCATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(387);
				ddlStatement();
				}
				break;
			case CALL:
			case DELETE:
			case INSERT:
			case LOAD:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case DO:
			case HANDLER:
			case LR_BRACKET:
				enterOuterAlt(_localctx, 2);
				{
				setState(388);
				dmlStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EmptyStatement_Context extends ParserRuleContext {
		public TerminalNode SEMI() { return getToken(MySqlParser.SEMI, 0); }
		public EmptyStatement_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_emptyStatement_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterEmptyStatement_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitEmptyStatement_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitEmptyStatement_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EmptyStatement_Context emptyStatement_() throws RecognitionException {
		EmptyStatement_Context _localctx = new EmptyStatement_Context(_ctx, getState());
		enterRule(_localctx, 4, RULE_emptyStatement_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(391);
			match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DdlStatementContext extends ParserRuleContext {
		public CreateDatabaseContext createDatabase() {
			return getRuleContext(CreateDatabaseContext.class,0);
		}
		public DropDatabaseContext dropDatabase() {
			return getRuleContext(DropDatabaseContext.class,0);
		}
		public DropTableContext dropTable() {
			return getRuleContext(DropTableContext.class,0);
		}
		public RenameTableContext renameTable() {
			return getRuleContext(RenameTableContext.class,0);
		}
		public TruncateTableContext truncateTable() {
			return getRuleContext(TruncateTableContext.class,0);
		}
		public DdlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ddlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDdlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDdlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDdlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DdlStatementContext ddlStatement() throws RecognitionException {
		DdlStatementContext _localctx = new DdlStatementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_ddlStatement);
		try {
			setState(398);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,8,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(393);
				createDatabase();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(394);
				dropDatabase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(395);
				dropTable();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(396);
				renameTable();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(397);
				truncateTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DmlStatementContext extends ParserRuleContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public CallStatementContext callStatement() {
			return getRuleContext(CallStatementContext.class,0);
		}
		public LoadDataStatementContext loadDataStatement() {
			return getRuleContext(LoadDataStatementContext.class,0);
		}
		public LoadXmlStatementContext loadXmlStatement() {
			return getRuleContext(LoadXmlStatementContext.class,0);
		}
		public DoStatementContext doStatement() {
			return getRuleContext(DoStatementContext.class,0);
		}
		public HandlerStatementContext handlerStatement() {
			return getRuleContext(HandlerStatementContext.class,0);
		}
		public DmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dmlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDmlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDmlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DmlStatementContext dmlStatement() throws RecognitionException {
		DmlStatementContext _localctx = new DmlStatementContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_dmlStatement);
		try {
			setState(410);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,9,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(400);
				selectStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(401);
				insertStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(402);
				updateStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(403);
				deleteStatement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(404);
				replaceStatement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(405);
				callStatement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(406);
				loadDataStatement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(407);
				loadXmlStatement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(408);
				doStatement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(409);
				handlerStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDatabaseContext extends ParserRuleContext {
		public Token dbFormat;
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDatabaseContext createDatabase() throws RecognitionException {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_createDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(412);
			match(CREATE);
			setState(413);
			((CreateDatabaseContext)_localctx).dbFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				((CreateDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(415);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				setState(414);
				ifNotExists();
				}
				break;
			}
			setState(417);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WithClauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public CommonTableExpressionsContext commonTableExpressions() {
			return getRuleContext(CommonTableExpressionsContext.class,0);
		}
		public TerminalNode RECURSIVE() { return getToken(MySqlParser.RECURSIVE, 0); }
		public WithClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_withClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWithClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWithClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWithClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WithClauseContext withClause() throws RecognitionException {
		WithClauseContext _localctx = new WithClauseContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_withClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(419);
			match(WITH);
			setState(421);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
			case 1:
				{
				setState(420);
				match(RECURSIVE);
				}
				break;
			}
			setState(423);
			commonTableExpressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CommonTableExpressionsContext extends ParserRuleContext {
		public CteNameContext cteName() {
			return getRuleContext(CteNameContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public DmlStatementContext dmlStatement() {
			return getRuleContext(DmlStatementContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<CteColumnNameContext> cteColumnName() {
			return getRuleContexts(CteColumnNameContext.class);
		}
		public CteColumnNameContext cteColumnName(int i) {
			return getRuleContext(CteColumnNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CommonTableExpressionsContext commonTableExpressions() {
			return getRuleContext(CommonTableExpressionsContext.class,0);
		}
		public CommonTableExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commonTableExpressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCommonTableExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCommonTableExpressions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCommonTableExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CommonTableExpressionsContext commonTableExpressions() throws RecognitionException {
		CommonTableExpressionsContext _localctx = new CommonTableExpressionsContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_commonTableExpressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(425);
			cteName();
			setState(437);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(426);
				match(LR_BRACKET);
				setState(427);
				cteColumnName();
				setState(432);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(428);
					match(COMMA);
					setState(429);
					cteColumnName();
					}
					}
					setState(434);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(435);
				match(RR_BRACKET);
				}
			}

			setState(439);
			match(AS);
			setState(440);
			match(LR_BRACKET);
			setState(441);
			dmlStatement();
			setState(442);
			match(RR_BRACKET);
			setState(445);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(443);
				match(COMMA);
				setState(444);
				commonTableExpressions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CteNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CteNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cteName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCteName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCteName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCteName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CteNameContext cteName() throws RecognitionException {
		CteNameContext _localctx = new CteNameContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_cteName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(447);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CteColumnNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CteColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cteColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCteColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCteColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCteColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CteColumnNameContext cteColumnName() throws RecognitionException {
		CteColumnNameContext _localctx = new CteColumnNameContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_cteColumnName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(449);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SequenceSpecContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(MySqlParser.INCREMENT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode MINVALUE() { return getToken(MySqlParser.MINVALUE, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode NOMINVALUE() { return getToken(MySqlParser.NOMINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(MySqlParser.MAXVALUE, 0); }
		public TerminalNode NOMAXVALUE() { return getToken(MySqlParser.NOMAXVALUE, 0); }
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(MySqlParser.NOCACHE, 0); }
		public TerminalNode CYCLE() { return getToken(MySqlParser.CYCLE, 0); }
		public TerminalNode NOCYCLE() { return getToken(MySqlParser.NOCYCLE, 0); }
		public TerminalNode RESTART() { return getToken(MySqlParser.RESTART, 0); }
		public SequenceSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequenceSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSequenceSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSequenceSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSequenceSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SequenceSpecContext sequenceSpec() throws RecognitionException {
		SequenceSpecContext _localctx = new SequenceSpecContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_sequenceSpec);
		int _la;
		try {
			setState(490);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(451);
				match(INCREMENT);
				setState(453);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BY || _la==EQUAL_SYMBOL) {
					{
					setState(452);
					_la = _input.LA(1);
					if ( !(_la==BY || _la==EQUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(455);
				decimalLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(456);
				match(MINVALUE);
				setState(458);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(457);
					match(EQUAL_SYMBOL);
					}
				}

				setState(460);
				decimalLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(461);
				match(NO);
				setState(462);
				match(MINVALUE);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(463);
				match(NOMINVALUE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(464);
				match(MAXVALUE);
				setState(466);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(465);
					match(EQUAL_SYMBOL);
					}
				}

				setState(468);
				decimalLiteral();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(469);
				match(NO);
				setState(470);
				match(MAXVALUE);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(471);
				match(NOMAXVALUE);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(472);
				match(START);
				setState(474);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==EQUAL_SYMBOL) {
					{
					setState(473);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==EQUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(476);
				decimalLiteral();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(477);
				match(CACHE);
				setState(479);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(478);
					match(EQUAL_SYMBOL);
					}
				}

				setState(481);
				decimalLiteral();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(482);
				match(NOCACHE);
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(483);
				match(CYCLE);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(484);
				match(NOCYCLE);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(485);
				match(RESTART);
				setState(487);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH || _la==EQUAL_SYMBOL) {
					{
					setState(486);
					_la = _input.LA(1);
					if ( !(_la==WITH || _la==EQUAL_SYMBOL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(489);
				decimalLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TimestampValueContext extends ParserRuleContext {
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TimestampValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_timestampValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTimestampValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTimestampValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTimestampValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TimestampValueContext timestampValue() throws RecognitionException {
		TimestampValueContext _localctx = new TimestampValueContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_timestampValue);
		try {
			setState(496);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(492);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(493);
				stringLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(494);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(495);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalExprContext extends ParserRuleContext {
		public TerminalNode PLUS() { return getToken(MySqlParser.PLUS, 0); }
		public TerminalNode INTERVAL() { return getToken(MySqlParser.INTERVAL, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalExprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalExpr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalExpr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalExpr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalExpr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalExprContext intervalExpr() throws RecognitionException {
		IntervalExprContext _localctx = new IntervalExprContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_intervalExpr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(498);
			match(PLUS);
			setState(499);
			match(INTERVAL);
			setState(502);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,23,_ctx) ) {
			case 1:
				{
				setState(500);
				decimalLiteral();
				}
				break;
			case 2:
				{
				setState(501);
				expression(0);
				}
				break;
			}
			setState(504);
			intervalType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeContext extends ParserRuleContext {
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode YEAR_MONTH() { return getToken(MySqlParser.YEAR_MONTH, 0); }
		public TerminalNode DAY_HOUR() { return getToken(MySqlParser.DAY_HOUR, 0); }
		public TerminalNode DAY_MINUTE() { return getToken(MySqlParser.DAY_MINUTE, 0); }
		public TerminalNode DAY_SECOND() { return getToken(MySqlParser.DAY_SECOND, 0); }
		public TerminalNode HOUR_MINUTE() { return getToken(MySqlParser.HOUR_MINUTE, 0); }
		public TerminalNode HOUR_SECOND() { return getToken(MySqlParser.HOUR_SECOND, 0); }
		public TerminalNode MINUTE_SECOND() { return getToken(MySqlParser.MINUTE_SECOND, 0); }
		public TerminalNode SECOND_MICROSECOND() { return getToken(MySqlParser.SECOND_MICROSECOND, 0); }
		public TerminalNode MINUTE_MICROSECOND() { return getToken(MySqlParser.MINUTE_MICROSECOND, 0); }
		public TerminalNode HOUR_MICROSECOND() { return getToken(MySqlParser.HOUR_MICROSECOND, 0); }
		public TerminalNode DAY_MICROSECOND() { return getToken(MySqlParser.DAY_MICROSECOND, 0); }
		public IntervalTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeContext intervalType() throws RecognitionException {
		IntervalTypeContext _localctx = new IntervalTypeContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_intervalType);
		try {
			setState(519);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
				enterOuterAlt(_localctx, 1);
				{
				setState(506);
				intervalTypeBase();
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(507);
				match(YEAR);
				}
				break;
			case YEAR_MONTH:
				enterOuterAlt(_localctx, 3);
				{
				setState(508);
				match(YEAR_MONTH);
				}
				break;
			case DAY_HOUR:
				enterOuterAlt(_localctx, 4);
				{
				setState(509);
				match(DAY_HOUR);
				}
				break;
			case DAY_MINUTE:
				enterOuterAlt(_localctx, 5);
				{
				setState(510);
				match(DAY_MINUTE);
				}
				break;
			case DAY_SECOND:
				enterOuterAlt(_localctx, 6);
				{
				setState(511);
				match(DAY_SECOND);
				}
				break;
			case HOUR_MINUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(512);
				match(HOUR_MINUTE);
				}
				break;
			case HOUR_SECOND:
				enterOuterAlt(_localctx, 8);
				{
				setState(513);
				match(HOUR_SECOND);
				}
				break;
			case MINUTE_SECOND:
				enterOuterAlt(_localctx, 9);
				{
				setState(514);
				match(MINUTE_SECOND);
				}
				break;
			case SECOND_MICROSECOND:
				enterOuterAlt(_localctx, 10);
				{
				setState(515);
				match(SECOND_MICROSECOND);
				}
				break;
			case MINUTE_MICROSECOND:
				enterOuterAlt(_localctx, 11);
				{
				setState(516);
				match(MINUTE_MICROSECOND);
				}
				break;
			case HOUR_MICROSECOND:
				enterOuterAlt(_localctx, 12);
				{
				setState(517);
				match(HOUR_MICROSECOND);
				}
				break;
			case DAY_MICROSECOND:
				enterOuterAlt(_localctx, 13);
				{
				setState(518);
				match(DAY_MICROSECOND);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EnableTypeContext extends ParserRuleContext {
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public EnableTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_enableType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterEnableType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitEnableType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitEnableType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EnableTypeContext enableType() throws RecognitionException {
		EnableTypeContext _localctx = new EnableTypeContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_enableType);
		try {
			setState(526);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(521);
				match(ENABLE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(522);
				match(DISABLE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(523);
				match(DISABLE);
				setState(524);
				match(ON);
				setState(525);
				match(SLAVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexTypeContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode BTREE() { return getToken(MySqlParser.BTREE, 0); }
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode RTREE() { return getToken(MySqlParser.RTREE, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexTypeContext indexType() throws RecognitionException {
		IndexTypeContext _localctx = new IndexTypeContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_indexType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(528);
			match(USING);
			setState(529);
			_la = _input.LA(1);
			if ( !(_la==BTREE || _la==HASH || _la==RTREE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexOptionContext extends ParserRuleContext {
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public FileSizeLiteralContext fileSizeLiteral() {
			return getRuleContext(FileSizeLiteralContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode PARSER() { return getToken(MySqlParser.PARSER, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public TerminalNode ENGINE_ATTRIBUTE() { return getToken(MySqlParser.ENGINE_ATTRIBUTE, 0); }
		public TerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		public TerminalNode CLUSTERING() { return getToken(MySqlParser.CLUSTERING, 0); }
		public TerminalNode YES() { return getToken(MySqlParser.YES, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode IGNORED() { return getToken(MySqlParser.IGNORED, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public IndexOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexOptionContext indexOption() throws RecognitionException {
		IndexOptionContext _localctx = new IndexOptionContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_indexOption);
		int _la;
		try {
			setState(561);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case KEY_BLOCK_SIZE:
				enterOuterAlt(_localctx, 1);
				{
				setState(531);
				match(KEY_BLOCK_SIZE);
				setState(533);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(532);
					match(EQUAL_SYMBOL);
					}
				}

				setState(535);
				fileSizeLiteral();
				}
				break;
			case USING:
				enterOuterAlt(_localctx, 2);
				{
				setState(536);
				indexType();
				}
				break;
			case WITH:
				enterOuterAlt(_localctx, 3);
				{
				setState(537);
				match(WITH);
				setState(538);
				match(PARSER);
				setState(539);
				uid();
				}
				break;
			case COMMENT:
				enterOuterAlt(_localctx, 4);
				{
				setState(540);
				match(COMMENT);
				setState(541);
				match(STRING_LITERAL);
				}
				break;
			case INVISIBLE:
			case VISIBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(542);
				_la = _input.LA(1);
				if ( !(_la==INVISIBLE || _la==VISIBLE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ENGINE_ATTRIBUTE:
				enterOuterAlt(_localctx, 6);
				{
				setState(543);
				match(ENGINE_ATTRIBUTE);
				setState(545);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(544);
					match(EQUAL_SYMBOL);
					}
				}

				setState(547);
				match(STRING_LITERAL);
				}
				break;
			case SECONDARY_ENGINE_ATTRIBUTE:
				enterOuterAlt(_localctx, 7);
				{
				setState(548);
				match(SECONDARY_ENGINE_ATTRIBUTE);
				setState(550);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EQUAL_SYMBOL) {
					{
					setState(549);
					match(EQUAL_SYMBOL);
					}
				}

				setState(552);
				match(STRING_LITERAL);
				}
				break;
			case CLUSTERING:
				enterOuterAlt(_localctx, 8);
				{
				setState(553);
				match(CLUSTERING);
				setState(554);
				match(EQUAL_SYMBOL);
				setState(555);
				_la = _input.LA(1);
				if ( !(_la==NO || _la==YES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case IGNORED:
			case NOT:
				enterOuterAlt(_localctx, 9);
				{
				setState(559);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case IGNORED:
					{
					setState(556);
					match(IGNORED);
					}
					break;
				case NOT:
					{
					setState(557);
					match(NOT);
					setState(558);
					match(IGNORED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ProcedureParameterContext extends ParserRuleContext {
		public Token direction;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode OUT() { return getToken(MySqlParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(MySqlParser.INOUT, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedureParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterProcedureParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitProcedureParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitProcedureParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProcedureParameterContext procedureParameter() throws RecognitionException {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_procedureParameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(564);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (IN - 77)) | (1L << (INOUT - 77)) | (1L << (OUT - 77)))) != 0)) {
				{
				setState(563);
				((ProcedureParameterContext)_localctx).direction = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 77)) & ~0x3f) == 0 && ((1L << (_la - 77)) & ((1L << (IN - 77)) | (1L << (INOUT - 77)) | (1L << (OUT - 77)))) != 0)) ) {
					((ProcedureParameterContext)_localctx).direction = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(566);
			uid();
			setState(567);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionParameterContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionParameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionParameterContext functionParameter() throws RecognitionException {
		FunctionParameterContext _localctx = new FunctionParameterContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_functionParameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(569);
			uid();
			setState(570);
			dataType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoutineOptionContext extends ParserRuleContext {
		public RoutineOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routineOption; }
	 
		public RoutineOptionContext() { }
		public void copyFrom(RoutineOptionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class RoutineBehaviorContext extends RoutineOptionContext {
		public TerminalNode DETERMINISTIC() { return getToken(MySqlParser.DETERMINISTIC, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public RoutineBehaviorContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineBehavior(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineBehavior(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoutineBehavior(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineLanguageContext extends RoutineOptionContext {
		public TerminalNode LANGUAGE() { return getToken(MySqlParser.LANGUAGE, 0); }
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public RoutineLanguageContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineLanguage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineLanguage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoutineLanguage(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineCommentContext extends RoutineOptionContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public RoutineCommentContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineComment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineComment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoutineComment(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineSecurityContext extends RoutineOptionContext {
		public Token context;
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public RoutineSecurityContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineSecurity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineSecurity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoutineSecurity(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RoutineDataContext extends RoutineOptionContext {
		public TerminalNode CONTAINS() { return getToken(MySqlParser.CONTAINS, 0); }
		public TerminalNode SQL() { return getToken(MySqlParser.SQL, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode READS() { return getToken(MySqlParser.READS, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode MODIFIES() { return getToken(MySqlParser.MODIFIES, 0); }
		public RoutineDataContext(RoutineOptionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoutineData(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoutineData(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoutineData(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoutineOptionContext routineOption() throws RecognitionException {
		RoutineOptionContext _localctx = new RoutineOptionContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_routineOption);
		int _la;
		try {
			setState(595);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT:
				_localctx = new RoutineCommentContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(572);
				match(COMMENT);
				setState(573);
				match(STRING_LITERAL);
				}
				break;
			case LANGUAGE:
				_localctx = new RoutineLanguageContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(574);
				match(LANGUAGE);
				setState(575);
				match(SQL);
				}
				break;
			case DETERMINISTIC:
			case NOT:
				_localctx = new RoutineBehaviorContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(577);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(576);
					match(NOT);
					}
				}

				setState(579);
				match(DETERMINISTIC);
				}
				break;
			case MODIFIES:
			case READS:
			case CONTAINS:
			case NO:
				_localctx = new RoutineDataContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(590);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONTAINS:
					{
					setState(580);
					match(CONTAINS);
					setState(581);
					match(SQL);
					}
					break;
				case NO:
					{
					setState(582);
					match(NO);
					setState(583);
					match(SQL);
					}
					break;
				case READS:
					{
					setState(584);
					match(READS);
					setState(585);
					match(SQL);
					setState(586);
					match(DATA);
					}
					break;
				case MODIFIES:
					{
					setState(587);
					match(MODIFIES);
					setState(588);
					match(SQL);
					setState(589);
					match(DATA);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SQL:
				_localctx = new RoutineSecurityContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(592);
				match(SQL);
				setState(593);
				match(SECURITY);
				setState(594);
				((RoutineSecurityContext)_localctx).context = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFINER || _la==INVOKER) ) {
					((RoutineSecurityContext)_localctx).context = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ServerOptionContext extends ParserRuleContext {
		public TerminalNode HOST() { return getToken(MySqlParser.HOST, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode SOCKET() { return getToken(MySqlParser.SOCKET, 0); }
		public TerminalNode OWNER() { return getToken(MySqlParser.OWNER, 0); }
		public TerminalNode PORT() { return getToken(MySqlParser.PORT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public ServerOptionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_serverOption; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterServerOption(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitServerOption(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitServerOption(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ServerOptionContext serverOption() throws RecognitionException {
		ServerOptionContext _localctx = new ServerOptionContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_serverOption);
		try {
			setState(611);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case HOST:
				enterOuterAlt(_localctx, 1);
				{
				setState(597);
				match(HOST);
				setState(598);
				match(STRING_LITERAL);
				}
				break;
			case DATABASE:
				enterOuterAlt(_localctx, 2);
				{
				setState(599);
				match(DATABASE);
				setState(600);
				match(STRING_LITERAL);
				}
				break;
			case USER:
				enterOuterAlt(_localctx, 3);
				{
				setState(601);
				match(USER);
				setState(602);
				match(STRING_LITERAL);
				}
				break;
			case PASSWORD:
				enterOuterAlt(_localctx, 4);
				{
				setState(603);
				match(PASSWORD);
				setState(604);
				match(STRING_LITERAL);
				}
				break;
			case SOCKET:
				enterOuterAlt(_localctx, 5);
				{
				setState(605);
				match(SOCKET);
				setState(606);
				match(STRING_LITERAL);
				}
				break;
			case OWNER:
				enterOuterAlt(_localctx, 6);
				{
				setState(607);
				match(OWNER);
				setState(608);
				match(STRING_LITERAL);
				}
				break;
			case PORT:
				enterOuterAlt(_localctx, 7);
				{
				setState(609);
				match(PORT);
				setState(610);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<CreateDefinitionContext> createDefinition() {
			return getRuleContexts(CreateDefinitionContext.class);
		}
		public CreateDefinitionContext createDefinition(int i) {
			return getRuleContext(CreateDefinitionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CreateDefinitionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinitions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCreateDefinitions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCreateDefinitions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCreateDefinitions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionsContext createDefinitions() throws RecognitionException {
		CreateDefinitionsContext _localctx = new CreateDefinitionsContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_createDefinitions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(613);
			match(LR_BRACKET);
			setState(614);
			createDefinition();
			setState(619);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(615);
				match(COMMA);
				setState(616);
				createDefinition();
				}
				}
				setState(621);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(622);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CreateDefinitionContext extends ParserRuleContext {
		public CreateDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_createDefinition; }
	 
		public CreateDefinitionContext() { }
		public void copyFrom(CreateDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ColumnDeclarationContext extends CreateDefinitionContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ColumnDefinitionContext columnDefinition() {
			return getRuleContext(ColumnDefinitionContext.class,0);
		}
		public ColumnDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumnDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumnDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColumnDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConstraintDeclarationContext extends CreateDefinitionContext {
		public TableConstraintContext tableConstraint() {
			return getRuleContext(TableConstraintContext.class,0);
		}
		public ConstraintDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstraintDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstraintDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstraintDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IndexDeclarationContext extends CreateDefinitionContext {
		public IndexColumnDefinitionContext indexColumnDefinition() {
			return getRuleContext(IndexColumnDefinitionContext.class,0);
		}
		public IndexDeclarationContext(CreateDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CreateDefinitionContext createDefinition() throws RecognitionException {
		CreateDefinitionContext _localctx = new CreateDefinitionContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_createDefinition);
		try {
			setState(629);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {
			case 1:
				_localctx = new ColumnDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(624);
				uid();
				setState(625);
				columnDefinition();
				}
				break;
			case 2:
				_localctx = new ConstraintDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(627);
				tableConstraint();
				}
				break;
			case 3:
				_localctx = new IndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(628);
				indexColumnDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnDefinitionContext extends ParserRuleContext {
		public DataTypeContext dataType() {
			return getRuleContext(DataTypeContext.class,0);
		}
		public List<ColumnConstraintContext> columnConstraint() {
			return getRuleContexts(ColumnConstraintContext.class);
		}
		public ColumnConstraintContext columnConstraint(int i) {
			return getRuleContext(ColumnConstraintContext.class,i);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterColumnDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitColumnDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitColumnDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnDefinitionContext columnDefinition() throws RecognitionException {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_columnDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(631);
			dataType();
			setState(635);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (AS - 12)) | (1L << (CHECK - 12)) | (1L << (COLLATE - 12)) | (1L << (CONSTRAINT - 12)) | (1L << (DEFAULT - 12)) | (1L << (GENERATED - 12)))) != 0) || ((((_la - 88)) & ~0x3f) == 0 && ((1L << (_la - 88)) & ((1L << (KEY - 88)) | (1L << (NOT - 88)) | (1L << (NULL_LITERAL - 88)) | (1L << (ON - 88)) | (1L << (PRIMARY - 88)) | (1L << (REFERENCES - 88)))) != 0) || _la==UNIQUE || _la==SERIAL || ((((_la - 333)) & ~0x3f) == 0 && ((1L << (_la - 333)) & ((1L << (AUTO_INCREMENT - 333)) | (1L << (COLUMN_FORMAT - 333)) | (1L << (COMMENT - 333)))) != 0) || _la==INVISIBLE || _la==STORAGE || _la==VISIBLE || _la==NULL_SPEC_LITERAL) {
				{
				{
				setState(632);
				columnConstraint();
				}
				}
				setState(637);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ColumnConstraintContext extends ParserRuleContext {
		public ColumnConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_columnConstraint; }
	 
		public ColumnConstraintContext() { }
		public void copyFrom(ColumnConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class StorageColumnConstraintContext extends ColumnConstraintContext {
		public Token storageval;
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public StorageColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStorageColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStorageColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStorageColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class VisibilityColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public VisibilityColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterVisibilityColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitVisibilityColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitVisibilityColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AutoIncrementColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public CurrentTimestampContext currentTimestamp() {
			return getRuleContext(CurrentTimestampContext.class,0);
		}
		public AutoIncrementColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAutoIncrementColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAutoIncrementColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAutoIncrementColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CommentColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public CommentColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCommentColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCommentColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCommentColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UniqueKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UniqueKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUniqueKeyColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUniqueKeyColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUniqueKeyColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SerialDefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode SERIAL() { return getToken(MySqlParser.SERIAL, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public SerialDefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSerialDefaultColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSerialDefaultColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSerialDefaultColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GeneratedColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode GENERATED() { return getToken(MySqlParser.GENERATED, 0); }
		public TerminalNode ALWAYS() { return getToken(MySqlParser.ALWAYS, 0); }
		public TerminalNode VIRTUAL() { return getToken(MySqlParser.VIRTUAL, 0); }
		public TerminalNode STORED() { return getToken(MySqlParser.STORED, 0); }
		public GeneratedColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGeneratedColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGeneratedColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGeneratedColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FormatColumnConstraintContext extends ColumnConstraintContext {
		public Token colformat;
		public TerminalNode COLUMN_FORMAT() { return getToken(MySqlParser.COLUMN_FORMAT, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public FormatColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFormatColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFormatColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFormatColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollateColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollateColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollateColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollateColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryKeyColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public PrimaryKeyColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrimaryKeyColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrimaryKeyColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrimaryKeyColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CheckColumnConstraintContext extends ColumnConstraintContext {
		public UidContext name;
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CheckColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCheckColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCheckColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCheckColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NullColumnConstraintContext extends ColumnConstraintContext {
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public NullColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNullColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNullColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNullColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DefaultColumnConstraintContext extends ColumnConstraintContext {
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public DefaultValueContext defaultValue() {
			return getRuleContext(DefaultValueContext.class,0);
		}
		public DefaultColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefaultColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefaultColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefaultColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ReferenceColumnConstraintContext extends ColumnConstraintContext {
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public ReferenceColumnConstraintContext(ColumnConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceColumnConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceColumnConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceColumnConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ColumnConstraintContext columnConstraint() throws RecognitionException {
		ColumnConstraintContext _localctx = new ColumnConstraintContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_columnConstraint);
		int _la;
		try {
			setState(691);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
			case NULL_LITERAL:
			case NULL_SPEC_LITERAL:
				_localctx = new NullColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(638);
				nullNotnull();
				}
				break;
			case DEFAULT:
				_localctx = new DefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(639);
				match(DEFAULT);
				setState(640);
				defaultValue();
				}
				break;
			case VISIBLE:
				_localctx = new VisibilityColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(641);
				match(VISIBLE);
				}
				break;
			case INVISIBLE:
				_localctx = new VisibilityColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(642);
				match(INVISIBLE);
				}
				break;
			case ON:
			case AUTO_INCREMENT:
				_localctx = new AutoIncrementColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(647);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case AUTO_INCREMENT:
					{
					setState(643);
					match(AUTO_INCREMENT);
					}
					break;
				case ON:
					{
					setState(644);
					match(ON);
					setState(645);
					match(UPDATE);
					setState(646);
					currentTimestamp();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case KEY:
			case PRIMARY:
				_localctx = new PrimaryKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(650);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRIMARY) {
					{
					setState(649);
					match(PRIMARY);
					}
				}

				setState(652);
				match(KEY);
				}
				break;
			case UNIQUE:
				_localctx = new UniqueKeyColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(653);
				match(UNIQUE);
				setState(655);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,41,_ctx) ) {
				case 1:
					{
					setState(654);
					match(KEY);
					}
					break;
				}
				}
				break;
			case COMMENT:
				_localctx = new CommentColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(657);
				match(COMMENT);
				setState(658);
				match(STRING_LITERAL);
				}
				break;
			case COLUMN_FORMAT:
				_localctx = new FormatColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(659);
				match(COLUMN_FORMAT);
				setState(660);
				((FormatColumnConstraintContext)_localctx).colformat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DYNAMIC || _la==FIXED) ) {
					((FormatColumnConstraintContext)_localctx).colformat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case STORAGE:
				_localctx = new StorageColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(661);
				match(STORAGE);
				setState(662);
				((StorageColumnConstraintContext)_localctx).storageval = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
					((StorageColumnConstraintContext)_localctx).storageval = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case REFERENCES:
				_localctx = new ReferenceColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(663);
				referenceDefinition();
				}
				break;
			case COLLATE:
				_localctx = new CollateColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(664);
				match(COLLATE);
				setState(665);
				collationName();
				}
				break;
			case AS:
			case GENERATED:
				_localctx = new GeneratedColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(668);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GENERATED) {
					{
					setState(666);
					match(GENERATED);
					setState(667);
					match(ALWAYS);
					}
				}

				setState(670);
				match(AS);
				setState(671);
				match(LR_BRACKET);
				setState(672);
				expression(0);
				setState(673);
				match(RR_BRACKET);
				setState(675);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORED || _la==VIRTUAL) {
					{
					setState(674);
					_la = _input.LA(1);
					if ( !(_la==STORED || _la==VIRTUAL) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			case SERIAL:
				_localctx = new SerialDefaultColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(677);
				match(SERIAL);
				setState(678);
				match(DEFAULT);
				setState(679);
				match(VALUE);
				}
				break;
			case CHECK:
			case CONSTRAINT:
				_localctx = new CheckColumnConstraintContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(684);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(680);
					match(CONSTRAINT);
					setState(682);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IF - 70)) | (1L << (IGNORED - 70)) | (1L << (INSERT - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)) | (1L << (PRIMARY - 70)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (REPLACE - 137)) | (1L << (RIGHT - 137)) | (1L << (SCHEMA - 137)) | (1L << (SKIP_ - 137)) | (1L << (STACKED - 137)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (CURRENT_DATE - 275)) | (1L << (CURRENT_TIME - 275)) | (1L << (CURRENT_TIMESTAMP - 275)) | (1L << (LOCALTIME - 275)) | (1L << (CURDATE - 275)) | (1L << (CURTIME - 275)) | (1L << (DATE_ADD - 275)) | (1L << (DATE_SUB - 275)) | (1L << (LOCALTIMESTAMP - 275)) | (1L << (NOW - 275)) | (1L << (POSITION - 275)) | (1L << (SUBSTR - 275)) | (1L << (SUBSTRING - 275)) | (1L << (SYSDATE - 275)) | (1L << (TRIM - 275)) | (1L << (UTC_DATE - 275)) | (1L << (UTC_TIME - 275)) | (1L << (UTC_TIMESTAMP - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VIRTUAL - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
						{
						setState(681);
						((CheckColumnConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(686);
				match(CHECK);
				setState(687);
				match(LR_BRACKET);
				setState(688);
				expression(0);
				setState(689);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableConstraintContext extends ParserRuleContext {
		public TableConstraintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableConstraint; }
	 
		public TableConstraintContext() { }
		public void copyFrom(TableConstraintContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UniqueKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public Token indexFormat;
		public UidContext index;
		public TerminalNode UNIQUE() { return getToken(MySqlParser.UNIQUE, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UniqueKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUniqueKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUniqueKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUniqueKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CheckTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public TerminalNode CHECK() { return getToken(MySqlParser.CHECK, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public CheckTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCheckTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCheckTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCheckTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PrimaryKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public PrimaryKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrimaryKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrimaryKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrimaryKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ForeignKeyTableConstraintContext extends TableConstraintContext {
		public UidContext name;
		public UidContext index;
		public TerminalNode FOREIGN() { return getToken(MySqlParser.FOREIGN, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public ReferenceDefinitionContext referenceDefinition() {
			return getRuleContext(ReferenceDefinitionContext.class,0);
		}
		public TerminalNode CONSTRAINT() { return getToken(MySqlParser.CONSTRAINT, 0); }
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public ForeignKeyTableConstraintContext(TableConstraintContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterForeignKeyTableConstraint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitForeignKeyTableConstraint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitForeignKeyTableConstraint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableConstraintContext tableConstraint() throws RecognitionException {
		TableConstraintContext _localctx = new TableConstraintContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_tableConstraint);
		int _la;
		try {
			setState(762);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,63,_ctx) ) {
			case 1:
				_localctx = new PrimaryKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(697);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(693);
					match(CONSTRAINT);
					setState(695);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,47,_ctx) ) {
					case 1:
						{
						setState(694);
						((PrimaryKeyTableConstraintContext)_localctx).name = uid();
						}
						break;
					}
					}
				}

				setState(699);
				match(PRIMARY);
				setState(700);
				match(KEY);
				setState(702);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IF - 70)) | (1L << (IGNORED - 70)) | (1L << (INSERT - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)) | (1L << (PRIMARY - 70)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (REPLACE - 137)) | (1L << (RIGHT - 137)) | (1L << (SCHEMA - 137)) | (1L << (SKIP_ - 137)) | (1L << (STACKED - 137)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (CURRENT_DATE - 275)) | (1L << (CURRENT_TIME - 275)) | (1L << (CURRENT_TIMESTAMP - 275)) | (1L << (LOCALTIME - 275)) | (1L << (CURDATE - 275)) | (1L << (CURTIME - 275)) | (1L << (DATE_ADD - 275)) | (1L << (DATE_SUB - 275)) | (1L << (LOCALTIMESTAMP - 275)) | (1L << (NOW - 275)) | (1L << (POSITION - 275)) | (1L << (SUBSTR - 275)) | (1L << (SUBSTRING - 275)) | (1L << (SYSDATE - 275)) | (1L << (TRIM - 275)) | (1L << (UTC_DATE - 275)) | (1L << (UTC_TIME - 275)) | (1L << (UTC_TIMESTAMP - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VIRTUAL - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
					{
					setState(701);
					((PrimaryKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(705);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(704);
					indexType();
					}
				}

				setState(707);
				indexColumnNames();
				setState(711);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(708);
					indexOption();
					}
					}
					setState(713);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new UniqueKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(718);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(714);
					match(CONSTRAINT);
					setState(716);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IF - 70)) | (1L << (IGNORED - 70)) | (1L << (INSERT - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)) | (1L << (PRIMARY - 70)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (REPLACE - 137)) | (1L << (RIGHT - 137)) | (1L << (SCHEMA - 137)) | (1L << (SKIP_ - 137)) | (1L << (STACKED - 137)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (CURRENT_DATE - 275)) | (1L << (CURRENT_TIME - 275)) | (1L << (CURRENT_TIMESTAMP - 275)) | (1L << (LOCALTIME - 275)) | (1L << (CURDATE - 275)) | (1L << (CURTIME - 275)) | (1L << (DATE_ADD - 275)) | (1L << (DATE_SUB - 275)) | (1L << (LOCALTIMESTAMP - 275)) | (1L << (NOW - 275)) | (1L << (POSITION - 275)) | (1L << (SUBSTR - 275)) | (1L << (SUBSTRING - 275)) | (1L << (SYSDATE - 275)) | (1L << (TRIM - 275)) | (1L << (UTC_DATE - 275)) | (1L << (UTC_TIME - 275)) | (1L << (UTC_TIMESTAMP - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VIRTUAL - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
						{
						setState(715);
						((UniqueKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(720);
				match(UNIQUE);
				setState(722);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(721);
					((UniqueKeyTableConstraintContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((UniqueKeyTableConstraintContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(725);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IF - 70)) | (1L << (IGNORED - 70)) | (1L << (INSERT - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)) | (1L << (PRIMARY - 70)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (REPLACE - 137)) | (1L << (RIGHT - 137)) | (1L << (SCHEMA - 137)) | (1L << (SKIP_ - 137)) | (1L << (STACKED - 137)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (CURRENT_DATE - 275)) | (1L << (CURRENT_TIME - 275)) | (1L << (CURRENT_TIMESTAMP - 275)) | (1L << (LOCALTIME - 275)) | (1L << (CURDATE - 275)) | (1L << (CURTIME - 275)) | (1L << (DATE_ADD - 275)) | (1L << (DATE_SUB - 275)) | (1L << (LOCALTIMESTAMP - 275)) | (1L << (NOW - 275)) | (1L << (POSITION - 275)) | (1L << (SUBSTR - 275)) | (1L << (SUBSTRING - 275)) | (1L << (SYSDATE - 275)) | (1L << (TRIM - 275)) | (1L << (UTC_DATE - 275)) | (1L << (UTC_TIME - 275)) | (1L << (UTC_TIMESTAMP - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VIRTUAL - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
					{
					setState(724);
					((UniqueKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(728);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(727);
					indexType();
					}
				}

				setState(730);
				indexColumnNames();
				setState(734);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(731);
					indexOption();
					}
					}
					setState(736);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				_localctx = new ForeignKeyTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(741);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(737);
					match(CONSTRAINT);
					setState(739);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IF - 70)) | (1L << (IGNORED - 70)) | (1L << (INSERT - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)) | (1L << (PRIMARY - 70)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (REPLACE - 137)) | (1L << (RIGHT - 137)) | (1L << (SCHEMA - 137)) | (1L << (SKIP_ - 137)) | (1L << (STACKED - 137)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (CURRENT_DATE - 275)) | (1L << (CURRENT_TIME - 275)) | (1L << (CURRENT_TIMESTAMP - 275)) | (1L << (LOCALTIME - 275)) | (1L << (CURDATE - 275)) | (1L << (CURTIME - 275)) | (1L << (DATE_ADD - 275)) | (1L << (DATE_SUB - 275)) | (1L << (LOCALTIMESTAMP - 275)) | (1L << (NOW - 275)) | (1L << (POSITION - 275)) | (1L << (SUBSTR - 275)) | (1L << (SUBSTRING - 275)) | (1L << (SYSDATE - 275)) | (1L << (TRIM - 275)) | (1L << (UTC_DATE - 275)) | (1L << (UTC_TIME - 275)) | (1L << (UTC_TIMESTAMP - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VIRTUAL - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
						{
						setState(738);
						((ForeignKeyTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(743);
				match(FOREIGN);
				setState(744);
				match(KEY);
				setState(746);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IF - 70)) | (1L << (IGNORED - 70)) | (1L << (INSERT - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)) | (1L << (PRIMARY - 70)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (REPLACE - 137)) | (1L << (RIGHT - 137)) | (1L << (SCHEMA - 137)) | (1L << (SKIP_ - 137)) | (1L << (STACKED - 137)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (CURRENT_DATE - 275)) | (1L << (CURRENT_TIME - 275)) | (1L << (CURRENT_TIMESTAMP - 275)) | (1L << (LOCALTIME - 275)) | (1L << (CURDATE - 275)) | (1L << (CURTIME - 275)) | (1L << (DATE_ADD - 275)) | (1L << (DATE_SUB - 275)) | (1L << (LOCALTIMESTAMP - 275)) | (1L << (NOW - 275)) | (1L << (POSITION - 275)) | (1L << (SUBSTR - 275)) | (1L << (SUBSTRING - 275)) | (1L << (SYSDATE - 275)) | (1L << (TRIM - 275)) | (1L << (UTC_DATE - 275)) | (1L << (UTC_TIME - 275)) | (1L << (UTC_TIMESTAMP - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VIRTUAL - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
					{
					setState(745);
					((ForeignKeyTableConstraintContext)_localctx).index = uid();
					}
				}

				setState(748);
				indexColumnNames();
				setState(749);
				referenceDefinition();
				}
				break;
			case 4:
				_localctx = new CheckTableConstraintContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(755);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(751);
					match(CONSTRAINT);
					setState(753);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IF - 70)) | (1L << (IGNORED - 70)) | (1L << (INSERT - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)) | (1L << (PRIMARY - 70)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (REPLACE - 137)) | (1L << (RIGHT - 137)) | (1L << (SCHEMA - 137)) | (1L << (SKIP_ - 137)) | (1L << (STACKED - 137)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (CURRENT_DATE - 275)) | (1L << (CURRENT_TIME - 275)) | (1L << (CURRENT_TIMESTAMP - 275)) | (1L << (LOCALTIME - 275)) | (1L << (CURDATE - 275)) | (1L << (CURTIME - 275)) | (1L << (DATE_ADD - 275)) | (1L << (DATE_SUB - 275)) | (1L << (LOCALTIMESTAMP - 275)) | (1L << (NOW - 275)) | (1L << (POSITION - 275)) | (1L << (SUBSTR - 275)) | (1L << (SUBSTRING - 275)) | (1L << (SYSDATE - 275)) | (1L << (TRIM - 275)) | (1L << (UTC_DATE - 275)) | (1L << (UTC_TIME - 275)) | (1L << (UTC_TIMESTAMP - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VIRTUAL - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
						{
						setState(752);
						((CheckTableConstraintContext)_localctx).name = uid();
						}
					}

					}
				}

				setState(757);
				match(CHECK);
				setState(758);
				match(LR_BRACKET);
				setState(759);
				expression(0);
				setState(760);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceDefinitionContext extends ParserRuleContext {
		public Token matchType;
		public TerminalNode REFERENCES() { return getToken(MySqlParser.REFERENCES, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode MATCH() { return getToken(MySqlParser.MATCH, 0); }
		public ReferenceActionContext referenceAction() {
			return getRuleContext(ReferenceActionContext.class,0);
		}
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode PARTIAL() { return getToken(MySqlParser.PARTIAL, 0); }
		public TerminalNode SIMPLE() { return getToken(MySqlParser.SIMPLE, 0); }
		public ReferenceDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceDefinition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceDefinition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceDefinition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceDefinition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceDefinitionContext referenceDefinition() throws RecognitionException {
		ReferenceDefinitionContext _localctx = new ReferenceDefinitionContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_referenceDefinition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(764);
			match(REFERENCES);
			setState(765);
			tableName();
			setState(767);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LR_BRACKET) {
				{
				setState(766);
				indexColumnNames();
				}
			}

			setState(771);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MATCH) {
				{
				setState(769);
				match(MATCH);
				setState(770);
				((ReferenceDefinitionContext)_localctx).matchType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FULL || _la==PARTIAL || _la==SIMPLE) ) {
					((ReferenceDefinitionContext)_localctx).matchType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(774);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,66,_ctx) ) {
			case 1:
				{
				setState(773);
				referenceAction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceActionContext extends ParserRuleContext {
		public ReferenceControlTypeContext onDelete;
		public ReferenceControlTypeContext onUpdate;
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public List<ReferenceControlTypeContext> referenceControlType() {
			return getRuleContexts(ReferenceControlTypeContext.class);
		}
		public ReferenceControlTypeContext referenceControlType(int i) {
			return getRuleContext(ReferenceControlTypeContext.class,i);
		}
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public ReferenceActionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceAction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceAction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceAction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceAction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceActionContext referenceAction() throws RecognitionException {
		ReferenceActionContext _localctx = new ReferenceActionContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_referenceAction);
		try {
			setState(792);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,69,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(776);
				match(ON);
				setState(777);
				match(DELETE);
				setState(778);
				((ReferenceActionContext)_localctx).onDelete = referenceControlType();
				setState(782);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,67,_ctx) ) {
				case 1:
					{
					setState(779);
					match(ON);
					setState(780);
					match(UPDATE);
					setState(781);
					((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(784);
				match(ON);
				setState(785);
				match(UPDATE);
				setState(786);
				((ReferenceActionContext)_localctx).onUpdate = referenceControlType();
				setState(790);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,68,_ctx) ) {
				case 1:
					{
					setState(787);
					match(ON);
					setState(788);
					match(DELETE);
					setState(789);
					((ReferenceActionContext)_localctx).onDelete = referenceControlType();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReferenceControlTypeContext extends ParserRuleContext {
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode ACTION() { return getToken(MySqlParser.ACTION, 0); }
		public ReferenceControlTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_referenceControlType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReferenceControlType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReferenceControlType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReferenceControlType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReferenceControlTypeContext referenceControlType() throws RecognitionException {
		ReferenceControlTypeContext _localctx = new ReferenceControlTypeContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_referenceControlType);
		try {
			setState(800);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RESTRICT:
				enterOuterAlt(_localctx, 1);
				{
				setState(794);
				match(RESTRICT);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(795);
				match(CASCADE);
				}
				break;
			case SET:
				enterOuterAlt(_localctx, 3);
				{
				setState(796);
				match(SET);
				setState(797);
				match(NULL_LITERAL);
				}
				break;
			case NO:
				enterOuterAlt(_localctx, 4);
				{
				setState(798);
				match(NO);
				setState(799);
				match(ACTION);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnDefinitionContext extends ParserRuleContext {
		public IndexColumnDefinitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnDefinition; }
	 
		public IndexColumnDefinitionContext() { }
		public void copyFrom(IndexColumnDefinitionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecialIndexDeclarationContext extends IndexColumnDefinitionContext {
		public Token indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode FULLTEXT() { return getToken(MySqlParser.FULLTEXT, 0); }
		public TerminalNode SPATIAL() { return getToken(MySqlParser.SPATIAL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public SpecialIndexDeclarationContext(IndexColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpecialIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpecialIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSpecialIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleIndexDeclarationContext extends IndexColumnDefinitionContext {
		public Token indexFormat;
		public IndexColumnNamesContext indexColumnNames() {
			return getRuleContext(IndexColumnNamesContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public IndexTypeContext indexType() {
			return getRuleContext(IndexTypeContext.class,0);
		}
		public List<IndexOptionContext> indexOption() {
			return getRuleContexts(IndexOptionContext.class);
		}
		public IndexOptionContext indexOption(int i) {
			return getRuleContext(IndexOptionContext.class,i);
		}
		public SimpleIndexDeclarationContext(IndexColumnDefinitionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleIndexDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleIndexDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleIndexDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnDefinitionContext indexColumnDefinition() throws RecognitionException {
		IndexColumnDefinitionContext _localctx = new IndexColumnDefinitionContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_indexColumnDefinition);
		int _la;
		try {
			setState(830);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEX:
			case KEY:
				_localctx = new SimpleIndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(802);
				((SimpleIndexDeclarationContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEY) ) {
					((SimpleIndexDeclarationContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(804);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IF - 70)) | (1L << (IGNORED - 70)) | (1L << (INSERT - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)) | (1L << (PRIMARY - 70)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (REPLACE - 137)) | (1L << (RIGHT - 137)) | (1L << (SCHEMA - 137)) | (1L << (SKIP_ - 137)) | (1L << (STACKED - 137)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (CURRENT_DATE - 275)) | (1L << (CURRENT_TIME - 275)) | (1L << (CURRENT_TIMESTAMP - 275)) | (1L << (LOCALTIME - 275)) | (1L << (CURDATE - 275)) | (1L << (CURTIME - 275)) | (1L << (DATE_ADD - 275)) | (1L << (DATE_SUB - 275)) | (1L << (LOCALTIMESTAMP - 275)) | (1L << (NOW - 275)) | (1L << (POSITION - 275)) | (1L << (SUBSTR - 275)) | (1L << (SUBSTRING - 275)) | (1L << (SYSDATE - 275)) | (1L << (TRIM - 275)) | (1L << (UTC_DATE - 275)) | (1L << (UTC_TIME - 275)) | (1L << (UTC_TIMESTAMP - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VIRTUAL - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
					{
					setState(803);
					uid();
					}
				}

				setState(807);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(806);
					indexType();
					}
				}

				setState(809);
				indexColumnNames();
				setState(813);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(810);
					indexOption();
					}
					}
					setState(815);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case FULLTEXT:
			case SPATIAL:
				_localctx = new SpecialIndexDeclarationContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(816);
				_la = _input.LA(1);
				if ( !(_la==FULLTEXT || _la==SPATIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(818);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==KEY) {
					{
					setState(817);
					((SpecialIndexDeclarationContext)_localctx).indexFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==INDEX || _la==KEY) ) {
						((SpecialIndexDeclarationContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(821);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IF - 70)) | (1L << (IGNORED - 70)) | (1L << (INSERT - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)) | (1L << (PRIMARY - 70)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (REPLACE - 137)) | (1L << (RIGHT - 137)) | (1L << (SCHEMA - 137)) | (1L << (SKIP_ - 137)) | (1L << (STACKED - 137)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (CURRENT_DATE - 275)) | (1L << (CURRENT_TIME - 275)) | (1L << (CURRENT_TIMESTAMP - 275)) | (1L << (LOCALTIME - 275)) | (1L << (CURDATE - 275)) | (1L << (CURTIME - 275)) | (1L << (DATE_ADD - 275)) | (1L << (DATE_SUB - 275)) | (1L << (LOCALTIMESTAMP - 275)) | (1L << (NOW - 275)) | (1L << (POSITION - 275)) | (1L << (SUBSTR - 275)) | (1L << (SUBSTRING - 275)) | (1L << (SYSDATE - 275)) | (1L << (TRIM - 275)) | (1L << (UTC_DATE - 275)) | (1L << (UTC_TIME - 275)) | (1L << (UTC_TIMESTAMP - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VIRTUAL - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
					{
					setState(820);
					uid();
					}
				}

				setState(823);
				indexColumnNames();
				setState(827);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==IGNORED || _la==NOT || _la==USING || _la==WITH || _la==CLUSTERING || _la==COMMENT || _la==INVISIBLE || _la==KEY_BLOCK_SIZE || _la==VISIBLE || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE) {
					{
					{
					setState(824);
					indexOption();
					}
					}
					setState(829);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableTypeContext extends ParserRuleContext {
		public TerminalNode MYSQL() { return getToken(MySqlParser.MYSQL, 0); }
		public TerminalNode ODBC() { return getToken(MySqlParser.ODBC, 0); }
		public TableTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableTypeContext tableType() throws RecognitionException {
		TableTypeContext _localctx = new TableTypeContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_tableType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(832);
			_la = _input.LA(1);
			if ( !(_la==MYSQL || _la==ODBC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablespaceStorageContext extends ParserRuleContext {
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TablespaceStorageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tablespaceStorage; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTablespaceStorage(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTablespaceStorage(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTablespaceStorage(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablespaceStorageContext tablespaceStorage() throws RecognitionException {
		TablespaceStorageContext _localctx = new TablespaceStorageContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_tablespaceStorage);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(834);
			match(STORAGE);
			setState(835);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==DISK || _la==MEMORY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropDatabaseContext extends ParserRuleContext {
		public Token dbFormat;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropDatabase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropDatabase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropDatabase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropDatabase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropDatabaseContext dropDatabase() throws RecognitionException {
		DropDatabaseContext _localctx = new DropDatabaseContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_dropDatabase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(837);
			match(DROP);
			setState(838);
			((DropDatabaseContext)_localctx).dbFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || _la==SCHEMA) ) {
				((DropDatabaseContext)_localctx).dbFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(840);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				setState(839);
				ifExists();
				}
				break;
			}
			setState(842);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DropTableContext extends ParserRuleContext {
		public Token dropType;
		public TerminalNode DROP() { return getToken(MySqlParser.DROP, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TablesContext tables() {
			return getRuleContext(TablesContext.class,0);
		}
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public IfExistsContext ifExists() {
			return getRuleContext(IfExistsContext.class,0);
		}
		public WaitNowaitClauseContext waitNowaitClause() {
			return getRuleContext(WaitNowaitClauseContext.class,0);
		}
		public TerminalNode RESTRICT() { return getToken(MySqlParser.RESTRICT, 0); }
		public TerminalNode CASCADE() { return getToken(MySqlParser.CASCADE, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dropTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDropTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDropTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDropTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DropTableContext dropTable() throws RecognitionException {
		DropTableContext _localctx = new DropTableContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_dropTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(844);
			match(DROP);
			setState(846);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TEMPORARY) {
				{
				setState(845);
				match(TEMPORARY);
				}
			}

			setState(848);
			match(TABLE);
			setState(850);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,80,_ctx) ) {
			case 1:
				{
				setState(849);
				ifExists();
				}
				break;
			}
			setState(852);
			tables();
			setState(854);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(853);
				waitNowaitClause();
				}
			}

			setState(857);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CASCADE || _la==RESTRICT) {
				{
				setState(856);
				((DropTableContext)_localctx).dropType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CASCADE || _la==RESTRICT) ) {
					((DropTableContext)_localctx).dropType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableContext extends ParserRuleContext {
		public TerminalNode RENAME() { return getToken(MySqlParser.RENAME, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public List<RenameTableClauseContext> renameTableClause() {
			return getRuleContexts(RenameTableClauseContext.class);
		}
		public RenameTableClauseContext renameTableClause(int i) {
			return getRuleContext(RenameTableClauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public RenameTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRenameTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRenameTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRenameTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableContext renameTable() throws RecognitionException {
		RenameTableContext _localctx = new RenameTableContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_renameTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(859);
			match(RENAME);
			setState(860);
			match(TABLE);
			setState(861);
			renameTableClause();
			setState(866);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(862);
				match(COMMA);
				setState(863);
				renameTableClause();
				}
				}
				setState(868);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RenameTableClauseContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode TO() { return getToken(MySqlParser.TO, 0); }
		public WaitNowaitClauseContext waitNowaitClause() {
			return getRuleContext(WaitNowaitClauseContext.class,0);
		}
		public RenameTableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_renameTableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRenameTableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRenameTableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRenameTableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RenameTableClauseContext renameTableClause() throws RecognitionException {
		RenameTableClauseContext _localctx = new RenameTableClauseContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_renameTableClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(869);
			tableName();
			setState(871);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(870);
				waitNowaitClause();
				}
			}

			setState(873);
			match(TO);
			setState(874);
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TruncateTableContext extends ParserRuleContext {
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public WaitNowaitClauseContext waitNowaitClause() {
			return getRuleContext(WaitNowaitClauseContext.class,0);
		}
		public TruncateTableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_truncateTable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTruncateTable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTruncateTable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTruncateTable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TruncateTableContext truncateTable() throws RecognitionException {
		TruncateTableContext _localctx = new TruncateTableContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_truncateTable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(876);
			match(TRUNCATE);
			setState(878);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==TABLE) {
				{
				setState(877);
				match(TABLE);
				}
			}

			setState(880);
			tableName();
			setState(882);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(881);
				waitNowaitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CallStatementContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(MySqlParser.CALL, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ConstantsContext constants() {
			return getRuleContext(ConstantsContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_callStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCallStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCallStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCallStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CallStatementContext callStatement() throws RecognitionException {
		CallStatementContext _localctx = new CallStatementContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_callStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(884);
			match(CALL);
			setState(885);
			fullId();
			setState(892);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
			case 1:
				{
				setState(886);
				match(LR_BRACKET);
				setState(889);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,87,_ctx) ) {
				case 1:
					{
					setState(887);
					constants();
					}
					break;
				case 2:
					{
					setState(888);
					expressions();
					}
					break;
				}
				setState(891);
				match(RR_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DeleteStatementContext extends ParserRuleContext {
		public SingleDeleteStatementContext singleDeleteStatement() {
			return getRuleContext(SingleDeleteStatementContext.class,0);
		}
		public MultipleDeleteStatementContext multipleDeleteStatement() {
			return getRuleContext(MultipleDeleteStatementContext.class,0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_deleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DeleteStatementContext deleteStatement() throws RecognitionException {
		DeleteStatementContext _localctx = new DeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_deleteStatement);
		try {
			setState(896);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,89,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(894);
				singleDeleteStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(895);
				multipleDeleteStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DoStatementContext extends ParserRuleContext {
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_doStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDoStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDoStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDoStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DoStatementContext doStatement() throws RecognitionException {
		DoStatementContext _localctx = new DoStatementContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_doStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(898);
			match(DO);
			setState(899);
			expressions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerStatementContext extends ParserRuleContext {
		public HandlerOpenStatementContext handlerOpenStatement() {
			return getRuleContext(HandlerOpenStatementContext.class,0);
		}
		public HandlerReadIndexStatementContext handlerReadIndexStatement() {
			return getRuleContext(HandlerReadIndexStatementContext.class,0);
		}
		public HandlerReadStatementContext handlerReadStatement() {
			return getRuleContext(HandlerReadStatementContext.class,0);
		}
		public HandlerCloseStatementContext handlerCloseStatement() {
			return getRuleContext(HandlerCloseStatementContext.class,0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerStatementContext handlerStatement() throws RecognitionException {
		HandlerStatementContext _localctx = new HandlerStatementContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_handlerStatement);
		try {
			setState(905);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,90,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(901);
				handlerOpenStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(902);
				handlerReadIndexStatement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(903);
				handlerReadStatement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(904);
				handlerCloseStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public UpdatedElementContext duplicatedFirst;
		public List<UpdatedElementContext> duplicatedElements = new ArrayList<UpdatedElementContext>();
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode DUPLICATE() { return getToken(MySqlParser.DUPLICATE, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(MySqlParser.DELAYED, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(MySqlParser.HIGH_PRIORITY, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInsertStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInsertStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInsertStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementContext insertStatement() throws RecognitionException {
		InsertStatementContext _localctx = new InsertStatementContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_insertStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(907);
			match(INSERT);
			setState(909);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & ((1L << (DELAYED - 41)) | (1L << (HIGH_PRIORITY - 41)) | (1L << (LOW_PRIORITY - 41)))) != 0)) {
				{
				setState(908);
				((InsertStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 41)) & ~0x3f) == 0 && ((1L << (_la - 41)) & ((1L << (DELAYED - 41)) | (1L << (HIGH_PRIORITY - 41)) | (1L << (LOW_PRIORITY - 41)))) != 0)) ) {
					((InsertStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(912);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(911);
				match(IGNORE);
				}
			}

			setState(915);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(914);
				match(INTO);
				}
			}

			setState(917);
			tableName();
			setState(924);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(918);
				match(PARTITION);
				setState(919);
				match(LR_BRACKET);
				setState(921);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IF - 70)) | (1L << (IGNORED - 70)) | (1L << (INSERT - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)) | (1L << (PRIMARY - 70)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (REPLACE - 137)) | (1L << (RIGHT - 137)) | (1L << (SCHEMA - 137)) | (1L << (SKIP_ - 137)) | (1L << (STACKED - 137)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (CURRENT_DATE - 275)) | (1L << (CURRENT_TIME - 275)) | (1L << (CURRENT_TIMESTAMP - 275)) | (1L << (LOCALTIME - 275)) | (1L << (CURDATE - 275)) | (1L << (CURTIME - 275)) | (1L << (DATE_ADD - 275)) | (1L << (DATE_SUB - 275)) | (1L << (LOCALTIMESTAMP - 275)) | (1L << (NOW - 275)) | (1L << (POSITION - 275)) | (1L << (SUBSTR - 275)) | (1L << (SUBSTRING - 275)) | (1L << (SYSDATE - 275)) | (1L << (TRIM - 275)) | (1L << (UTC_DATE - 275)) | (1L << (UTC_TIME - 275)) | (1L << (UTC_TIMESTAMP - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VIRTUAL - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
					{
					setState(920);
					((InsertStatementContext)_localctx).partitions = uidList();
					}
				}

				setState(923);
				match(RR_BRACKET);
				}
			}

			setState(942);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(930);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,96,_ctx) ) {
				case 1:
					{
					setState(926);
					match(LR_BRACKET);
					setState(927);
					((InsertStatementContext)_localctx).columns = uidList();
					setState(928);
					match(RR_BRACKET);
					}
					break;
				}
				setState(932);
				insertStatementValue();
				}
				break;
			case SET:
				{
				setState(933);
				match(SET);
				setState(934);
				((InsertStatementContext)_localctx).setFirst = updatedElement();
				setState(939);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(935);
					match(COMMA);
					setState(936);
					((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).setElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(941);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(956);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ON) {
				{
				setState(944);
				match(ON);
				setState(945);
				match(DUPLICATE);
				setState(946);
				match(KEY);
				setState(947);
				match(UPDATE);
				setState(948);
				((InsertStatementContext)_localctx).duplicatedFirst = updatedElement();
				setState(953);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(949);
					match(COMMA);
					setState(950);
					((InsertStatementContext)_localctx).updatedElement = updatedElement();
					((InsertStatementContext)_localctx).duplicatedElements.add(((InsertStatementContext)_localctx).updatedElement);
					}
					}
					setState(955);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadDataStatementContext extends ParserRuleContext {
		public Token priority;
		public Token filename;
		public Token violation;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public Token linesFormat;
		public TerminalNode LOAD() { return getToken(MySqlParser.LOAD, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode INFILE() { return getToken(MySqlParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public List<TerminalNode> SET() { return getTokens(MySqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(MySqlParser.SET, i);
		}
		public List<TerminalNode> LINES() { return getTokens(MySqlParser.LINES); }
		public TerminalNode LINES(int i) {
			return getToken(MySqlParser.LINES, i);
		}
		public List<TerminalNode> IGNORE() { return getTokens(MySqlParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(MySqlParser.IGNORE, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode ROWS() { return getToken(MySqlParser.ROWS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LoadDataStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadDataStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoadDataStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoadDataStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLoadDataStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadDataStatementContext loadDataStatement() throws RecognitionException {
		LoadDataStatementContext _localctx = new LoadDataStatementContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_loadDataStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(958);
			match(LOAD);
			setState(959);
			match(DATA);
			setState(961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(960);
				((LoadDataStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					((LoadDataStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(964);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(963);
				match(LOCAL);
				}
			}

			setState(966);
			match(INFILE);
			setState(967);
			((LoadDataStatementContext)_localctx).filename = match(STRING_LITERAL);
			setState(969);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(968);
				((LoadDataStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadDataStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(971);
			match(INTO);
			setState(972);
			match(TABLE);
			setState(973);
			tableName();
			setState(979);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(974);
				match(PARTITION);
				setState(975);
				match(LR_BRACKET);
				setState(976);
				uidList();
				setState(977);
				match(RR_BRACKET);
				}
			}

			setState(984);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(981);
				match(CHARACTER);
				setState(982);
				match(SET);
				setState(983);
				((LoadDataStatementContext)_localctx).charset = charsetName();
				}
			}

			setState(992);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COLUMNS || _la==FIELDS) {
				{
				setState(986);
				((LoadDataStatementContext)_localctx).fieldsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((LoadDataStatementContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(988); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(987);
					selectFieldsInto();
					}
					}
					setState(990); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
				}
			}

			setState(1000);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LINES) {
				{
				setState(994);
				match(LINES);
				setState(996); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(995);
					selectLinesInto();
					}
					}
					setState(998); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==STARTING || _la==TERMINATED );
				}
			}

			setState(1006);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(1002);
				match(IGNORE);
				setState(1003);
				decimalLiteral();
				setState(1004);
				((LoadDataStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadDataStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1019);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,112,_ctx) ) {
			case 1:
				{
				setState(1008);
				match(LR_BRACKET);
				setState(1009);
				assignmentField();
				setState(1014);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1010);
					match(COMMA);
					setState(1011);
					assignmentField();
					}
					}
					setState(1016);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1017);
				match(RR_BRACKET);
				}
				break;
			}
			setState(1030);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(1021);
				match(SET);
				setState(1022);
				updatedElement();
				setState(1027);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1023);
					match(COMMA);
					setState(1024);
					updatedElement();
					}
					}
					setState(1029);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LoadXmlStatementContext extends ParserRuleContext {
		public Token priority;
		public Token filename;
		public Token violation;
		public CharsetNameContext charset;
		public Token tag;
		public Token linesFormat;
		public TerminalNode LOAD() { return getToken(MySqlParser.LOAD, 0); }
		public TerminalNode XML() { return getToken(MySqlParser.XML, 0); }
		public TerminalNode INFILE() { return getToken(MySqlParser.INFILE, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public List<TerminalNode> SET() { return getTokens(MySqlParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(MySqlParser.SET, i);
		}
		public List<TerminalNode> ROWS() { return getTokens(MySqlParser.ROWS); }
		public TerminalNode ROWS(int i) {
			return getToken(MySqlParser.ROWS, i);
		}
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MySqlParser.LESS_SYMBOL, 0); }
		public TerminalNode GREATER_SYMBOL() { return getToken(MySqlParser.GREATER_SYMBOL, 0); }
		public List<TerminalNode> IGNORE() { return getTokens(MySqlParser.IGNORE); }
		public TerminalNode IGNORE(int i) {
			return getToken(MySqlParser.IGNORE, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode LINES() { return getToken(MySqlParser.LINES, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LoadXmlStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loadXmlStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLoadXmlStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLoadXmlStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLoadXmlStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LoadXmlStatementContext loadXmlStatement() throws RecognitionException {
		LoadXmlStatementContext _localctx = new LoadXmlStatementContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_loadXmlStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1032);
			match(LOAD);
			setState(1033);
			match(XML);
			setState(1035);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY || _la==CONCURRENT) {
				{
				setState(1034);
				((LoadXmlStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LOW_PRIORITY || _la==CONCURRENT) ) {
					((LoadXmlStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1038);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOCAL) {
				{
				setState(1037);
				match(LOCAL);
				}
			}

			setState(1040);
			match(INFILE);
			setState(1041);
			((LoadXmlStatementContext)_localctx).filename = match(STRING_LITERAL);
			setState(1043);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE || _la==REPLACE) {
				{
				setState(1042);
				((LoadXmlStatementContext)_localctx).violation = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==REPLACE) ) {
					((LoadXmlStatementContext)_localctx).violation = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1045);
			match(INTO);
			setState(1046);
			match(TABLE);
			setState(1047);
			tableName();
			setState(1051);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CHARACTER) {
				{
				setState(1048);
				match(CHARACTER);
				setState(1049);
				match(SET);
				setState(1050);
				((LoadXmlStatementContext)_localctx).charset = charsetName();
				}
			}

			setState(1059);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ROWS) {
				{
				setState(1053);
				match(ROWS);
				setState(1054);
				match(IDENTIFIED);
				setState(1055);
				match(BY);
				setState(1056);
				match(LESS_SYMBOL);
				setState(1057);
				((LoadXmlStatementContext)_localctx).tag = match(STRING_LITERAL);
				setState(1058);
				match(GREATER_SYMBOL);
				}
			}

			setState(1065);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(1061);
				match(IGNORE);
				setState(1062);
				decimalLiteral();
				setState(1063);
				((LoadXmlStatementContext)_localctx).linesFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==LINES || _la==ROWS) ) {
					((LoadXmlStatementContext)_localctx).linesFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1078);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,122,_ctx) ) {
			case 1:
				{
				setState(1067);
				match(LR_BRACKET);
				setState(1068);
				assignmentField();
				setState(1073);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1069);
					match(COMMA);
					setState(1070);
					assignmentField();
					}
					}
					setState(1075);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1076);
				match(RR_BRACKET);
				}
				break;
			}
			setState(1089);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(1080);
				match(SET);
				setState(1081);
				updatedElement();
				setState(1086);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1082);
					match(COMMA);
					setState(1083);
					updatedElement();
					}
					}
					setState(1088);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ReplaceStatementContext extends ParserRuleContext {
		public Token priority;
		public UidListContext partitions;
		public UidListContext columns;
		public UpdatedElementContext setFirst;
		public UpdatedElementContext updatedElement;
		public List<UpdatedElementContext> setElements = new ArrayList<UpdatedElementContext>();
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public InsertStatementValueContext insertStatementValue() {
			return getRuleContext(InsertStatementValueContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public List<UidListContext> uidList() {
			return getRuleContexts(UidListContext.class);
		}
		public UidListContext uidList(int i) {
			return getRuleContext(UidListContext.class,i);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode DELAYED() { return getToken(MySqlParser.DELAYED, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_replaceStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterReplaceStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitReplaceStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitReplaceStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ReplaceStatementContext replaceStatement() throws RecognitionException {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_replaceStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1091);
			match(REPLACE);
			setState(1093);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DELAYED || _la==LOW_PRIORITY) {
				{
				setState(1092);
				((ReplaceStatementContext)_localctx).priority = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DELAYED || _la==LOW_PRIORITY) ) {
					((ReplaceStatementContext)_localctx).priority = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1096);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(1095);
				match(INTO);
				}
			}

			setState(1098);
			tableName();
			setState(1104);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(1099);
				match(PARTITION);
				setState(1100);
				match(LR_BRACKET);
				setState(1101);
				((ReplaceStatementContext)_localctx).partitions = uidList();
				setState(1102);
				match(RR_BRACKET);
				}
			}

			setState(1122);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case VALUES:
			case VALUE:
			case LR_BRACKET:
				{
				setState(1110);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,128,_ctx) ) {
				case 1:
					{
					setState(1106);
					match(LR_BRACKET);
					setState(1107);
					((ReplaceStatementContext)_localctx).columns = uidList();
					setState(1108);
					match(RR_BRACKET);
					}
					break;
				}
				setState(1112);
				insertStatementValue();
				}
				break;
			case SET:
				{
				setState(1113);
				match(SET);
				setState(1114);
				((ReplaceStatementContext)_localctx).setFirst = updatedElement();
				setState(1119);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1115);
					match(COMMA);
					setState(1116);
					((ReplaceStatementContext)_localctx).updatedElement = updatedElement();
					((ReplaceStatementContext)_localctx).setElements.add(((ReplaceStatementContext)_localctx).updatedElement);
					}
					}
					setState(1121);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectStatementContext extends ParserRuleContext {
		public SelectStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectStatement; }
	 
		public SelectStatementContext() { }
		public void copyFrom(SelectStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnionSelectContext extends SelectStatementContext {
		public Token unionType;
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public List<UnionStatementContext> unionStatement() {
			return getRuleContexts(UnionStatementContext.class);
		}
		public UnionStatementContext unionStatement(int i) {
			return getRuleContext(UnionStatementContext.class,i);
		}
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnionSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UnionParenthesisSelectContext extends SelectStatementContext {
		public Token unionType;
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public List<UnionParenthesisContext> unionParenthesis() {
			return getRuleContexts(UnionParenthesisContext.class);
		}
		public UnionParenthesisContext unionParenthesis(int i) {
			return getRuleContext(UnionParenthesisContext.class,i);
		}
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionParenthesisSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnionParenthesisSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleSelectContext extends SelectStatementContext {
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public SimpleSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleSelect(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ParenthesisSelectContext extends SelectStatementContext {
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public ParenthesisSelectContext(SelectStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterParenthesisSelect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitParenthesisSelect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitParenthesisSelect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectStatementContext selectStatement() throws RecognitionException {
		SelectStatementContext _localctx = new SelectStatementContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_selectStatement);
		int _la;
		try {
			int _alt;
			setState(1167);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,142,_ctx) ) {
			case 1:
				_localctx = new SimpleSelectContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1124);
				querySpecification();
				}
				break;
			case 2:
				_localctx = new ParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1125);
				queryExpression();
				}
				break;
			case 3:
				_localctx = new UnionSelectContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1126);
				querySpecificationNointo();
				setState(1128); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1127);
						unionStatement();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1130); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,131,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(1140);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(1132);
					match(UNION);
					setState(1134);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(1133);
						((UnionSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(1138);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case SELECT:
						{
						setState(1136);
						querySpecification();
						}
						break;
					case LR_BRACKET:
						{
						setState(1137);
						queryExpression();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				setState(1143);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,135,_ctx) ) {
				case 1:
					{
					setState(1142);
					orderByClause();
					}
					break;
				}
				setState(1146);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,136,_ctx) ) {
				case 1+1:
					{
					setState(1145);
					limitClause();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new UnionParenthesisSelectContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1148);
				queryExpressionNointo();
				setState(1150); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(1149);
						unionParenthesis();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(1152); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,137,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				setState(1159);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UNION) {
					{
					setState(1154);
					match(UNION);
					setState(1156);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==ALL || _la==DISTINCT) {
						{
						setState(1155);
						((UnionParenthesisSelectContext)_localctx).unionType = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT) ) {
							((UnionParenthesisSelectContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(1158);
					queryExpression();
					}
				}

				setState(1162);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,140,_ctx) ) {
				case 1:
					{
					setState(1161);
					orderByClause();
					}
					break;
				}
				setState(1165);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(1164);
					limitClause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdateStatementContext extends ParserRuleContext {
		public SingleUpdateStatementContext singleUpdateStatement() {
			return getRuleContext(SingleUpdateStatementContext.class,0);
		}
		public MultipleUpdateStatementContext multipleUpdateStatement() {
			return getRuleContext(MultipleUpdateStatementContext.class,0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdateStatementContext updateStatement() throws RecognitionException {
		UpdateStatementContext _localctx = new UpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_updateStatement);
		try {
			setState(1171);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,143,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1169);
				singleUpdateStatement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1170);
				multipleUpdateStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class InsertStatementValueContext extends ParserRuleContext {
		public Token insertFormat;
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public List<ExpressionsWithDefaultsContext> expressionsWithDefaults() {
			return getRuleContexts(ExpressionsWithDefaultsContext.class);
		}
		public ExpressionsWithDefaultsContext expressionsWithDefaults(int i) {
			return getRuleContext(ExpressionsWithDefaultsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public InsertStatementValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insertStatementValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInsertStatementValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInsertStatementValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInsertStatementValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final InsertStatementValueContext insertStatementValue() throws RecognitionException {
		InsertStatementValueContext _localctx = new InsertStatementValueContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_insertStatementValue);
		int _la;
		try {
			setState(1191);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case LR_BRACKET:
				enterOuterAlt(_localctx, 1);
				{
				setState(1173);
				selectStatement();
				}
				break;
			case VALUES:
			case VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1174);
				((InsertStatementValueContext)_localctx).insertFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==VALUES || _la==VALUE) ) {
					((InsertStatementValueContext)_localctx).insertFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1175);
				match(LR_BRACKET);
				setState(1177);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,144,_ctx) ) {
				case 1:
					{
					setState(1176);
					expressionsWithDefaults();
					}
					break;
				}
				setState(1179);
				match(RR_BRACKET);
				setState(1188);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1180);
					match(COMMA);
					setState(1181);
					match(LR_BRACKET);
					setState(1183);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,145,_ctx) ) {
					case 1:
						{
						setState(1182);
						expressionsWithDefaults();
						}
						break;
					}
					setState(1185);
					match(RR_BRACKET);
					}
					}
					setState(1190);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UpdatedElementContext extends ParserRuleContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public UpdatedElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_updatedElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUpdatedElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUpdatedElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUpdatedElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UpdatedElementContext updatedElement() throws RecognitionException {
		UpdatedElementContext _localctx = new UpdatedElementContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_updatedElement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1193);
			fullColumnName();
			setState(1194);
			match(EQUAL_SYMBOL);
			setState(1197);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,148,_ctx) ) {
			case 1:
				{
				setState(1195);
				expression(0);
				}
				break;
			case 2:
				{
				setState(1196);
				match(DEFAULT);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AssignmentFieldContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public AssignmentFieldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignmentField; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAssignmentField(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAssignmentField(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAssignmentField(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AssignmentFieldContext assignmentField() throws RecognitionException {
		AssignmentFieldContext _localctx = new AssignmentFieldContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_assignmentField);
		try {
			setState(1201);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BUCKETS:
			case CURRENT:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1199);
				uid();
				}
				break;
			case LOCAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(1200);
				match(LOCAL_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public SingleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleDeleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSingleDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSingleDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSingleDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleDeleteStatementContext singleDeleteStatement() throws RecognitionException {
		SingleDeleteStatementContext _localctx = new SingleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_singleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1203);
			match(DELETE);
			setState(1205);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(1204);
				((SingleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(1208);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==QUICK) {
				{
				setState(1207);
				match(QUICK);
				}
			}

			setState(1211);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(1210);
				match(IGNORE);
				}
			}

			setState(1213);
			match(FROM);
			setState(1214);
			tableName();
			setState(1220);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(1215);
				match(PARTITION);
				setState(1216);
				match(LR_BRACKET);
				setState(1217);
				uidList();
				setState(1218);
				match(RR_BRACKET);
				}
			}

			setState(1224);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1222);
				match(WHERE);
				setState(1223);
				expression(0);
				}
			}

			setState(1227);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(1226);
				orderByClause();
				}
			}

			setState(1231);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(1229);
				match(LIMIT);
				setState(1230);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleDeleteStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode DELETE() { return getToken(MySqlParser.DELETE, 0); }
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public List<TerminalNode> DOT() { return getTokens(MySqlParser.DOT); }
		public TerminalNode DOT(int i) {
			return getToken(MySqlParser.DOT, i);
		}
		public List<TerminalNode> STAR() { return getTokens(MySqlParser.STAR); }
		public TerminalNode STAR(int i) {
			return getToken(MySqlParser.STAR, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public MultipleDeleteStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleDeleteStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMultipleDeleteStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMultipleDeleteStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMultipleDeleteStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleDeleteStatementContext multipleDeleteStatement() throws RecognitionException {
		MultipleDeleteStatementContext _localctx = new MultipleDeleteStatementContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_multipleDeleteStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1233);
			match(DELETE);
			setState(1235);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(1234);
				((MultipleDeleteStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(1238);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,158,_ctx) ) {
			case 1:
				{
				setState(1237);
				match(QUICK);
				}
				break;
			}
			setState(1241);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(1240);
				match(IGNORE);
				}
			}

			setState(1282);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BUCKETS:
			case CURRENT:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				{
				setState(1243);
				tableName();
				setState(1246);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(1244);
					match(DOT);
					setState(1245);
					match(STAR);
					}
				}

				setState(1256);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1248);
					match(COMMA);
					setState(1249);
					tableName();
					setState(1252);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(1250);
						match(DOT);
						setState(1251);
						match(STAR);
						}
					}

					}
					}
					setState(1258);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1259);
				match(FROM);
				setState(1260);
				tableSources();
				}
				break;
			case FROM:
				{
				setState(1262);
				match(FROM);
				setState(1263);
				tableName();
				setState(1266);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DOT) {
					{
					setState(1264);
					match(DOT);
					setState(1265);
					match(STAR);
					}
				}

				setState(1276);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1268);
					match(COMMA);
					setState(1269);
					tableName();
					setState(1272);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==DOT) {
						{
						setState(1270);
						match(DOT);
						setState(1271);
						match(STAR);
						}
					}

					}
					}
					setState(1278);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1279);
				match(USING);
				setState(1280);
				tableSources();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1286);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1284);
				match(WHERE);
				setState(1285);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerOpenStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public HandlerOpenStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerOpenStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerOpenStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerOpenStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerOpenStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerOpenStatementContext handlerOpenStatement() throws RecognitionException {
		HandlerOpenStatementContext _localctx = new HandlerOpenStatementContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_handlerOpenStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1288);
			match(HANDLER);
			setState(1289);
			tableName();
			setState(1290);
			match(OPEN);
			setState(1295);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,169,_ctx) ) {
			case 1:
				{
				setState(1292);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1291);
					match(AS);
					}
				}

				setState(1294);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadIndexStatementContext extends ParserRuleContext {
		public UidContext index;
		public Token moveOrder;
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ConstantsContext constants() {
			return getRuleContext(ConstantsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public TerminalNode PREV() { return getToken(MySqlParser.PREV, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public HandlerReadIndexStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadIndexStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerReadIndexStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerReadIndexStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerReadIndexStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerReadIndexStatementContext handlerReadIndexStatement() throws RecognitionException {
		HandlerReadIndexStatementContext _localctx = new HandlerReadIndexStatementContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_handlerReadIndexStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1297);
			match(HANDLER);
			setState(1298);
			tableName();
			setState(1299);
			match(READ);
			setState(1300);
			((HandlerReadIndexStatementContext)_localctx).index = uid();
			setState(1307);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EQUAL_SYMBOL:
			case GREATER_SYMBOL:
			case LESS_SYMBOL:
			case EXCLAMATION_SYMBOL:
				{
				setState(1301);
				comparisonOperator();
				setState(1302);
				match(LR_BRACKET);
				setState(1303);
				constants();
				setState(1304);
				match(RR_BRACKET);
				}
				break;
			case FIRST:
			case LAST:
			case NEXT:
			case PREV:
				{
				setState(1306);
				((HandlerReadIndexStatementContext)_localctx).moveOrder = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST || _la==NEXT || _la==PREV) ) {
					((HandlerReadIndexStatementContext)_localctx).moveOrder = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1311);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1309);
				match(WHERE);
				setState(1310);
				expression(0);
				}
			}

			setState(1315);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(1313);
				match(LIMIT);
				setState(1314);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerReadStatementContext extends ParserRuleContext {
		public Token moveOrder;
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode READ() { return getToken(MySqlParser.READ, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public LimitClauseAtomContext limitClauseAtom() {
			return getRuleContext(LimitClauseAtomContext.class,0);
		}
		public HandlerReadStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerReadStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerReadStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerReadStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerReadStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerReadStatementContext handlerReadStatement() throws RecognitionException {
		HandlerReadStatementContext _localctx = new HandlerReadStatementContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_handlerReadStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1317);
			match(HANDLER);
			setState(1318);
			tableName();
			setState(1319);
			match(READ);
			setState(1320);
			((HandlerReadStatementContext)_localctx).moveOrder = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==NEXT) ) {
				((HandlerReadStatementContext)_localctx).moveOrder = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1323);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1321);
				match(WHERE);
				setState(1322);
				expression(0);
				}
			}

			setState(1327);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(1325);
				match(LIMIT);
				setState(1326);
				limitClauseAtom();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HandlerCloseStatementContext extends ParserRuleContext {
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode CLOSE() { return getToken(MySqlParser.CLOSE, 0); }
		public HandlerCloseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_handlerCloseStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHandlerCloseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHandlerCloseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHandlerCloseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HandlerCloseStatementContext handlerCloseStatement() throws RecognitionException {
		HandlerCloseStatementContext _localctx = new HandlerCloseStatementContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_handlerCloseStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1329);
			match(HANDLER);
			setState(1330);
			tableName();
			setState(1331);
			match(CLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SingleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SingleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_singleUpdateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSingleUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSingleUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSingleUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SingleUpdateStatementContext singleUpdateStatement() throws RecognitionException {
		SingleUpdateStatementContext _localctx = new SingleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_singleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1333);
			match(UPDATE);
			setState(1335);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(1334);
				((SingleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(1338);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(1337);
				match(IGNORE);
				}
			}

			setState(1340);
			tableName();
			setState(1345);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AS) | (1L << BUCKETS) | (1L << CURRENT) | (1L << DATABASE) | (1L << DEFAULT) | (1L << DIAGNOSTICS) | (1L << EXCEPT))) != 0) || ((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (GROUP - 70)) | (1L << (IF - 70)) | (1L << (IGNORED - 70)) | (1L << (INSERT - 70)) | (1L << (LEFT - 70)) | (1L << (LOCKED - 70)) | (1L << (MAXVALUE - 70)) | (1L << (MINVALUE - 70)) | (1L << (NUMBER - 70)) | (1L << (OPTIONAL - 70)) | (1L << (ORDER - 70)) | (1L << (PRIMARY - 70)))) != 0) || ((((_la - 137)) & ~0x3f) == 0 && ((1L << (_la - 137)) & ((1L << (REPLACE - 137)) | (1L << (RIGHT - 137)) | (1L << (SCHEMA - 137)) | (1L << (SKIP_ - 137)) | (1L << (STACKED - 137)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (BINARY - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)) | (1L << (SERIAL - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (AVG - 275)) | (1L << (BIT_AND - 275)) | (1L << (BIT_OR - 275)) | (1L << (BIT_XOR - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (GROUP_CONCAT - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (MAX - 275)) | (1L << (MIN - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (STD - 275)) | (1L << (STDDEV - 275)) | (1L << (STDDEV_POP - 275)) | (1L << (STDDEV_SAMP - 275)) | (1L << (SUM - 275)) | (1L << (VAR_POP - 275)) | (1L << (VAR_SAMP - 275)) | (1L << (VARIANCE - 275)) | (1L << (CURRENT_DATE - 275)) | (1L << (CURRENT_TIME - 275)) | (1L << (CURRENT_TIMESTAMP - 275)) | (1L << (LOCALTIME - 275)) | (1L << (CURDATE - 275)) | (1L << (CURTIME - 275)) | (1L << (DATE_ADD - 275)) | (1L << (DATE_SUB - 275)) | (1L << (LOCALTIMESTAMP - 275)) | (1L << (NOW - 275)) | (1L << (POSITION - 275)) | (1L << (SUBSTR - 275)) | (1L << (SUBSTRING - 275)) | (1L << (SYSDATE - 275)) | (1L << (TRIM - 275)) | (1L << (UTC_DATE - 275)) | (1L << (UTC_TIME - 275)) | (1L << (UTC_TIMESTAMP - 275)) | (1L << (ACCOUNT - 275)) | (1L << (ACTION - 275)) | (1L << (AFTER - 275)) | (1L << (AGGREGATE - 275)) | (1L << (ALGORITHM - 275)) | (1L << (ANY - 275)) | (1L << (AT - 275)) | (1L << (AUTHORS - 275)) | (1L << (AUTOCOMMIT - 275)) | (1L << (AUTOEXTEND_SIZE - 275)) | (1L << (AUTO_INCREMENT - 275)) | (1L << (AVG_ROW_LENGTH - 275)) | (1L << (BEGIN - 275)) | (1L << (BINLOG - 275)) | (1L << (BIT - 275)) | (1L << (BLOCK - 275)))) != 0) || ((((_la - 339)) & ~0x3f) == 0 && ((1L << (_la - 339)) & ((1L << (BOOL - 339)) | (1L << (BOOLEAN - 339)) | (1L << (BTREE - 339)) | (1L << (CACHE - 339)) | (1L << (CASCADED - 339)) | (1L << (CHAIN - 339)) | (1L << (CHANGED - 339)) | (1L << (CHANNEL - 339)) | (1L << (CHECKSUM - 339)) | (1L << (PAGE_CHECKSUM - 339)) | (1L << (CIPHER - 339)) | (1L << (CLASS_ORIGIN - 339)) | (1L << (CLIENT - 339)) | (1L << (CLOSE - 339)) | (1L << (CLUSTERING - 339)) | (1L << (COALESCE - 339)) | (1L << (CODE - 339)) | (1L << (COLUMNS - 339)) | (1L << (COLUMN_FORMAT - 339)) | (1L << (COLUMN_NAME - 339)) | (1L << (COMMENT - 339)) | (1L << (COMMIT - 339)) | (1L << (COMPACT - 339)) | (1L << (COMPLETION - 339)) | (1L << (COMPRESSED - 339)) | (1L << (COMPRESSION - 339)) | (1L << (CONCURRENT - 339)) | (1L << (CONNECT - 339)) | (1L << (CONNECTION - 339)) | (1L << (CONSISTENT - 339)) | (1L << (CONSTRAINT_CATALOG - 339)) | (1L << (CONSTRAINT_SCHEMA - 339)) | (1L << (CONSTRAINT_NAME - 339)) | (1L << (CONTAINS - 339)) | (1L << (CONTEXT - 339)) | (1L << (CONTRIBUTORS - 339)) | (1L << (COPY - 339)) | (1L << (CPU - 339)) | (1L << (CYCLE - 339)) | (1L << (CURSOR_NAME - 339)) | (1L << (DATA - 339)) | (1L << (DATAFILE - 339)) | (1L << (DEALLOCATE - 339)) | (1L << (DEFAULT_AUTH - 339)) | (1L << (DEFINER - 339)) | (1L << (DELAY_KEY_WRITE - 339)) | (1L << (DES_KEY_FILE - 339)) | (1L << (DIRECTORY - 339)) | (1L << (DISABLE - 339)) | (1L << (DISCARD - 339)) | (1L << (DISK - 339)) | (1L << (DO - 339)) | (1L << (DUMPFILE - 339)) | (1L << (DUPLICATE - 339)) | (1L << (DYNAMIC - 339)) | (1L << (ENABLE - 339)) | (1L << (ENCRYPTION - 339)) | (1L << (END - 339)) | (1L << (ENDS - 339)) | (1L << (ENGINE - 339)) | (1L << (ENGINES - 339)) | (1L << (ERROR - 339)) | (1L << (ERRORS - 339)) | (1L << (ESCAPE - 339)))) != 0) || ((((_la - 403)) & ~0x3f) == 0 && ((1L << (_la - 403)) & ((1L << (EVEN - 403)) | (1L << (EVENT - 403)) | (1L << (EVENTS - 403)) | (1L << (EVERY - 403)) | (1L << (EXCHANGE - 403)) | (1L << (EXCLUSIVE - 403)) | (1L << (EXPIRE - 403)) | (1L << (EXPORT - 403)) | (1L << (EXTENDED - 403)) | (1L << (EXTENT_SIZE - 403)) | (1L << (FAST - 403)) | (1L << (FAULTS - 403)) | (1L << (FIELDS - 403)) | (1L << (FILE_BLOCK_SIZE - 403)) | (1L << (FILTER - 403)) | (1L << (FIRST - 403)) | (1L << (FIXED - 403)) | (1L << (FLUSH - 403)) | (1L << (FOLLOWS - 403)) | (1L << (FOUND - 403)) | (1L << (FULL - 403)) | (1L << (FUNCTION - 403)) | (1L << (GENERAL - 403)) | (1L << (GLOBAL - 403)) | (1L << (GRANTS - 403)) | (1L << (GROUP_REPLICATION - 403)) | (1L << (HANDLER - 403)) | (1L << (HASH - 403)) | (1L << (HELP - 403)) | (1L << (HOST - 403)) | (1L << (HOSTS - 403)) | (1L << (IDENTIFIED - 403)) | (1L << (IGNORE_SERVER_IDS - 403)) | (1L << (IMPORT - 403)) | (1L << (INCREMENT - 403)) | (1L << (INDEXES - 403)) | (1L << (INITIAL_SIZE - 403)) | (1L << (INPLACE - 403)) | (1L << (INSERT_METHOD - 403)) | (1L << (INSTALL - 403)) | (1L << (INSTANCE - 403)) | (1L << (INSTANT - 403)) | (1L << (INVISIBLE - 403)) | (1L << (INVOKER - 403)) | (1L << (IO - 403)) | (1L << (IO_THREAD - 403)) | (1L << (IPC - 403)) | (1L << (ISOLATION - 403)) | (1L << (ISSUER - 403)) | (1L << (JSON - 403)) | (1L << (KEY_BLOCK_SIZE - 403)) | (1L << (LANGUAGE - 403)) | (1L << (LAST - 403)) | (1L << (LEAVES - 403)) | (1L << (LESS - 403)) | (1L << (LEVEL - 403)) | (1L << (LIST - 403)) | (1L << (LOCAL - 403)) | (1L << (LOGFILE - 403)) | (1L << (LOGS - 403)) | (1L << (MASTER - 403)) | (1L << (MASTER_AUTO_POSITION - 403)) | (1L << (MASTER_CONNECT_RETRY - 403)))) != 0) || ((((_la - 467)) & ~0x3f) == 0 && ((1L << (_la - 467)) & ((1L << (MASTER_DELAY - 467)) | (1L << (MASTER_HEARTBEAT_PERIOD - 467)) | (1L << (MASTER_HOST - 467)) | (1L << (MASTER_LOG_FILE - 467)) | (1L << (MASTER_LOG_POS - 467)) | (1L << (MASTER_PASSWORD - 467)) | (1L << (MASTER_PORT - 467)) | (1L << (MASTER_RETRY_COUNT - 467)) | (1L << (MASTER_SSL - 467)) | (1L << (MASTER_SSL_CA - 467)) | (1L << (MASTER_SSL_CAPATH - 467)) | (1L << (MASTER_SSL_CERT - 467)) | (1L << (MASTER_SSL_CIPHER - 467)) | (1L << (MASTER_SSL_CRL - 467)) | (1L << (MASTER_SSL_CRLPATH - 467)) | (1L << (MASTER_SSL_KEY - 467)) | (1L << (MASTER_TLS_VERSION - 467)) | (1L << (MASTER_USER - 467)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 467)) | (1L << (MAX_QUERIES_PER_HOUR - 467)) | (1L << (MAX_ROWS - 467)) | (1L << (MAX_SIZE - 467)) | (1L << (MAX_UPDATES_PER_HOUR - 467)) | (1L << (MAX_USER_CONNECTIONS - 467)) | (1L << (MEDIUM - 467)) | (1L << (MEMBER - 467)) | (1L << (MERGE - 467)) | (1L << (MESSAGE_TEXT - 467)) | (1L << (MID - 467)) | (1L << (MIGRATE - 467)) | (1L << (MIN_ROWS - 467)) | (1L << (MODE - 467)) | (1L << (MODIFY - 467)) | (1L << (MUTEX - 467)) | (1L << (MYSQL - 467)) | (1L << (MYSQL_ERRNO - 467)) | (1L << (NAME - 467)) | (1L << (NAMES - 467)) | (1L << (NCHAR - 467)) | (1L << (NEVER - 467)) | (1L << (NEXT - 467)) | (1L << (NO - 467)) | (1L << (NOCACHE - 467)) | (1L << (NOCOPY - 467)) | (1L << (NOCYCLE - 467)) | (1L << (NOMAXVALUE - 467)) | (1L << (NOMINVALUE - 467)) | (1L << (NOWAIT - 467)) | (1L << (NODEGROUP - 467)) | (1L << (NONE - 467)) | (1L << (ODBC - 467)) | (1L << (OFFLINE - 467)) | (1L << (OFFSET - 467)) | (1L << (OF - 467)) | (1L << (OJ - 467)) | (1L << (OLD_PASSWORD - 467)) | (1L << (ONE - 467)) | (1L << (ONLINE - 467)) | (1L << (ONLY - 467)) | (1L << (OPEN - 467)) | (1L << (OPTIMIZER_COSTS - 467)) | (1L << (OPTIONS - 467)) | (1L << (OWNER - 467)) | (1L << (PACK_KEYS - 467)))) != 0) || ((((_la - 531)) & ~0x3f) == 0 && ((1L << (_la - 531)) & ((1L << (PAGE - 531)) | (1L << (PARSER - 531)) | (1L << (PARTIAL - 531)) | (1L << (PARTITIONING - 531)) | (1L << (PARTITIONS - 531)) | (1L << (PASSWORD - 531)) | (1L << (PHASE - 531)) | (1L << (PLUGIN - 531)) | (1L << (PLUGIN_DIR - 531)) | (1L << (PLUGINS - 531)) | (1L << (PORT - 531)) | (1L << (PRECEDES - 531)) | (1L << (PREPARE - 531)) | (1L << (PRESERVE - 531)) | (1L << (PREV - 531)) | (1L << (PROCESSLIST - 531)) | (1L << (PROFILE - 531)) | (1L << (PROFILES - 531)) | (1L << (PROXY - 531)) | (1L << (QUERY - 531)) | (1L << (QUICK - 531)) | (1L << (REBUILD - 531)) | (1L << (RECOVER - 531)) | (1L << (RECURSIVE - 531)) | (1L << (REDO_BUFFER_SIZE - 531)) | (1L << (REDUNDANT - 531)) | (1L << (RELAY - 531)) | (1L << (RELAY_LOG_FILE - 531)) | (1L << (RELAY_LOG_POS - 531)) | (1L << (RELAYLOG - 531)) | (1L << (REMOVE - 531)) | (1L << (REORGANIZE - 531)) | (1L << (REPAIR - 531)) | (1L << (REPLICATE_DO_DB - 531)) | (1L << (REPLICATE_DO_TABLE - 531)) | (1L << (REPLICATE_IGNORE_DB - 531)) | (1L << (REPLICATE_IGNORE_TABLE - 531)) | (1L << (REPLICATE_REWRITE_DB - 531)) | (1L << (REPLICATE_WILD_DO_TABLE - 531)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 531)) | (1L << (REPLICATION - 531)) | (1L << (RESET - 531)) | (1L << (RESTART - 531)) | (1L << (RESUME - 531)) | (1L << (RETURNED_SQLSTATE - 531)) | (1L << (RETURNS - 531)) | (1L << (ROLE - 531)) | (1L << (ROLLBACK - 531)) | (1L << (ROLLUP - 531)) | (1L << (ROTATE - 531)) | (1L << (ROW - 531)) | (1L << (ROWS - 531)) | (1L << (ROW_FORMAT - 531)) | (1L << (RTREE - 531)) | (1L << (SAVEPOINT - 531)) | (1L << (SCHEDULE - 531)) | (1L << (SECURITY - 531)) | (1L << (SEQUENCE - 531)) | (1L << (SERVER - 531)) | (1L << (SESSION - 531)) | (1L << (SHARE - 531)) | (1L << (SHARED - 531)))) != 0) || ((((_la - 595)) & ~0x3f) == 0 && ((1L << (_la - 595)) & ((1L << (SIGNED - 595)) | (1L << (SIMPLE - 595)) | (1L << (SLAVE - 595)) | (1L << (SLOW - 595)) | (1L << (SNAPSHOT - 595)) | (1L << (SOCKET - 595)) | (1L << (SOME - 595)) | (1L << (SONAME - 595)) | (1L << (SOUNDS - 595)) | (1L << (SOURCE - 595)) | (1L << (SQL_AFTER_GTIDS - 595)) | (1L << (SQL_AFTER_MTS_GAPS - 595)) | (1L << (SQL_BEFORE_GTIDS - 595)) | (1L << (SQL_BUFFER_RESULT - 595)) | (1L << (SQL_CACHE - 595)) | (1L << (SQL_NO_CACHE - 595)) | (1L << (SQL_THREAD - 595)) | (1L << (START - 595)) | (1L << (STARTS - 595)) | (1L << (STATS_AUTO_RECALC - 595)) | (1L << (STATS_PERSISTENT - 595)) | (1L << (STATS_SAMPLE_PAGES - 595)) | (1L << (STATUS - 595)) | (1L << (STOP - 595)) | (1L << (STORAGE - 595)) | (1L << (STRING - 595)) | (1L << (SUBCLASS_ORIGIN - 595)) | (1L << (SUBJECT - 595)) | (1L << (SUBPARTITION - 595)) | (1L << (SUBPARTITIONS - 595)) | (1L << (SUSPEND - 595)) | (1L << (SWAPS - 595)) | (1L << (SWITCHES - 595)) | (1L << (TABLE_NAME - 595)) | (1L << (TABLESPACE - 595)) | (1L << (TABLE_TYPE - 595)) | (1L << (TEMPORARY - 595)) | (1L << (TEMPTABLE - 595)) | (1L << (THAN - 595)) | (1L << (TRADITIONAL - 595)) | (1L << (TRANSACTION - 595)) | (1L << (TRANSACTIONAL - 595)) | (1L << (TRIGGERS - 595)) | (1L << (TRUNCATE - 595)) | (1L << (UNDEFINED - 595)) | (1L << (UNDOFILE - 595)) | (1L << (UNDO_BUFFER_SIZE - 595)) | (1L << (UNINSTALL - 595)) | (1L << (UNKNOWN - 595)) | (1L << (UNTIL - 595)) | (1L << (UPGRADE - 595)) | (1L << (USER - 595)) | (1L << (USE_FRM - 595)) | (1L << (USER_RESOURCES - 595)) | (1L << (VALIDATION - 595)) | (1L << (VALUE - 595)) | (1L << (VARIABLES - 595)) | (1L << (VIEW - 595)) | (1L << (VIRTUAL - 595)) | (1L << (VISIBLE - 595)) | (1L << (WAIT - 595)) | (1L << (WARNINGS - 595)))) != 0) || ((((_la - 660)) & ~0x3f) == 0 && ((1L << (_la - 660)) & ((1L << (WITHOUT - 660)) | (1L << (WORK - 660)) | (1L << (WRAPPER - 660)) | (1L << (X509 - 660)) | (1L << (XA - 660)) | (1L << (XML - 660)) | (1L << (EUR - 660)) | (1L << (USA - 660)) | (1L << (JIS - 660)) | (1L << (ISO - 660)) | (1L << (INTERNAL - 660)) | (1L << (QUARTER - 660)) | (1L << (MONTH - 660)) | (1L << (DAY - 660)) | (1L << (HOUR - 660)) | (1L << (MINUTE - 660)) | (1L << (WEEK - 660)) | (1L << (SECOND - 660)) | (1L << (MICROSECOND - 660)) | (1L << (TABLES - 660)) | (1L << (ROUTINE - 660)) | (1L << (EXECUTE - 660)) | (1L << (FILE - 660)) | (1L << (PROCESS - 660)) | (1L << (RELOAD - 660)) | (1L << (SHUTDOWN - 660)) | (1L << (SUPER - 660)) | (1L << (PRIVILEGES - 660)) | (1L << (AUDIT_ADMIN - 660)) | (1L << (BACKUP_ADMIN - 660)) | (1L << (BINLOG_ADMIN - 660)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 660)) | (1L << (CLONE_ADMIN - 660)) | (1L << (CONNECTION_ADMIN - 660)) | (1L << (ENCRYPTION_KEY_ADMIN - 660)) | (1L << (FIREWALL_ADMIN - 660)) | (1L << (FIREWALL_USER - 660)) | (1L << (ADMIN - 660)) | (1L << (GROUP_REPLICATION_ADMIN - 660)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 660)) | (1L << (INVOKE - 660)) | (1L << (LAMBDA - 660)) | (1L << (NDB_STORED_USER - 660)) | (1L << (PASSWORDLESS_USER_ADMIN - 660)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 660)) | (1L << (REPLICATION_APPLIER - 660)) | (1L << (REPLICATION_SLAVE_ADMIN - 660)) | (1L << (RESOURCE_GROUP_ADMIN - 660)) | (1L << (RESOURCE_GROUP_USER - 660)) | (1L << (ROLE_ADMIN - 660)) | (1L << (S3 - 660)) | (1L << (SESSION_VARIABLES_ADMIN - 660)) | (1L << (SET_USER_ID - 660)) | (1L << (SHOW_ROUTINE - 660)) | (1L << (SYSTEM_VARIABLES_ADMIN - 660)) | (1L << (TABLE_ENCRYPTION_ADMIN - 660)))) != 0) || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & ((1L << (VERSION_TOKEN_ADMIN - 724)) | (1L << (XA_RECOVER_ADMIN - 724)) | (1L << (ARMSCII8 - 724)) | (1L << (ASCII - 724)) | (1L << (BIG5 - 724)) | (1L << (CP1250 - 724)) | (1L << (CP1251 - 724)) | (1L << (CP1256 - 724)) | (1L << (CP1257 - 724)) | (1L << (CP850 - 724)) | (1L << (CP852 - 724)) | (1L << (CP866 - 724)) | (1L << (CP932 - 724)) | (1L << (DEC8 - 724)) | (1L << (EUCJPMS - 724)) | (1L << (EUCKR - 724)) | (1L << (GB18030 - 724)) | (1L << (GB2312 - 724)) | (1L << (GBK - 724)) | (1L << (GEOSTD8 - 724)) | (1L << (GREEK - 724)) | (1L << (HEBREW - 724)) | (1L << (HP8 - 724)) | (1L << (KEYBCS2 - 724)) | (1L << (KOI8R - 724)) | (1L << (KOI8U - 724)) | (1L << (LATIN1 - 724)) | (1L << (LATIN2 - 724)) | (1L << (LATIN5 - 724)) | (1L << (LATIN7 - 724)) | (1L << (MACCE - 724)) | (1L << (MACROMAN - 724)) | (1L << (SJIS - 724)) | (1L << (SWE7 - 724)) | (1L << (TIS620 - 724)) | (1L << (UCS2 - 724)) | (1L << (UJIS - 724)) | (1L << (UTF16 - 724)) | (1L << (UTF16LE - 724)) | (1L << (UTF32 - 724)) | (1L << (UTF8 - 724)) | (1L << (UTF8MB3 - 724)) | (1L << (UTF8MB4 - 724)) | (1L << (ARCHIVE - 724)) | (1L << (BLACKHOLE - 724)) | (1L << (CSV - 724)) | (1L << (FEDERATED - 724)) | (1L << (INNODB - 724)) | (1L << (MEMORY - 724)) | (1L << (MRG_MYISAM - 724)) | (1L << (MYISAM - 724)) | (1L << (NDB - 724)) | (1L << (NDBCLUSTER - 724)) | (1L << (PERFORMANCE_SCHEMA - 724)) | (1L << (TOKUDB - 724)) | (1L << (REPEATABLE - 724)) | (1L << (COMMITTED - 724)) | (1L << (UNCOMMITTED - 724)) | (1L << (SERIALIZABLE - 724)) | (1L << (GEOMETRYCOLLECTION - 724)) | (1L << (LINESTRING - 724)) | (1L << (MULTILINESTRING - 724)))) != 0) || ((((_la - 788)) & ~0x3f) == 0 && ((1L << (_la - 788)) & ((1L << (MULTIPOINT - 788)) | (1L << (MULTIPOLYGON - 788)) | (1L << (POINT - 788)) | (1L << (POLYGON - 788)) | (1L << (ABS - 788)) | (1L << (ACOS - 788)) | (1L << (ADDDATE - 788)) | (1L << (ADDTIME - 788)) | (1L << (AES_DECRYPT - 788)) | (1L << (AES_ENCRYPT - 788)) | (1L << (AREA - 788)) | (1L << (ASBINARY - 788)) | (1L << (ASIN - 788)) | (1L << (ASTEXT - 788)) | (1L << (ASWKB - 788)) | (1L << (ASWKT - 788)) | (1L << (ASYMMETRIC_DECRYPT - 788)) | (1L << (ASYMMETRIC_DERIVE - 788)) | (1L << (ASYMMETRIC_ENCRYPT - 788)) | (1L << (ASYMMETRIC_SIGN - 788)) | (1L << (ASYMMETRIC_VERIFY - 788)) | (1L << (ATAN - 788)) | (1L << (ATAN2 - 788)) | (1L << (BENCHMARK - 788)) | (1L << (BIN - 788)) | (1L << (BIT_COUNT - 788)) | (1L << (BIT_LENGTH - 788)) | (1L << (BUFFER - 788)) | (1L << (CATALOG_NAME - 788)) | (1L << (CEIL - 788)) | (1L << (CEILING - 788)) | (1L << (CENTROID - 788)) | (1L << (CHARACTER_LENGTH - 788)) | (1L << (CHARSET - 788)) | (1L << (CHAR_LENGTH - 788)) | (1L << (COERCIBILITY - 788)) | (1L << (COLLATION - 788)) | (1L << (COMPRESS - 788)) | (1L << (CONCAT - 788)) | (1L << (CONCAT_WS - 788)) | (1L << (CONNECTION_ID - 788)) | (1L << (CONV - 788)) | (1L << (CONVERT_TZ - 788)) | (1L << (COS - 788)) | (1L << (COT - 788)) | (1L << (CRC32 - 788)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 788)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 788)) | (1L << (CREATE_DH_PARAMETERS - 788)) | (1L << (CREATE_DIGEST - 788)) | (1L << (CROSSES - 788)) | (1L << (DATEDIFF - 788)) | (1L << (DATE_FORMAT - 788)) | (1L << (DAYNAME - 788)) | (1L << (DAYOFMONTH - 788)) | (1L << (DAYOFWEEK - 788)) | (1L << (DAYOFYEAR - 788)) | (1L << (DECODE - 788)) | (1L << (DEGREES - 788)) | (1L << (DES_DECRYPT - 788)) | (1L << (DES_ENCRYPT - 788)) | (1L << (DIMENSION - 788)) | (1L << (DISJOINT - 788)) | (1L << (ELT - 788)))) != 0) || ((((_la - 852)) & ~0x3f) == 0 && ((1L << (_la - 852)) & ((1L << (ENCODE - 852)) | (1L << (ENCRYPT - 852)) | (1L << (ENDPOINT - 852)) | (1L << (ENGINE_ATTRIBUTE - 852)) | (1L << (ENVELOPE - 852)) | (1L << (EQUALS - 852)) | (1L << (EXP - 852)) | (1L << (EXPORT_SET - 852)) | (1L << (EXTERIORRING - 852)) | (1L << (EXTRACTVALUE - 852)) | (1L << (FIELD - 852)) | (1L << (FIND_IN_SET - 852)) | (1L << (FLOOR - 852)) | (1L << (FORMAT - 852)) | (1L << (FOUND_ROWS - 852)) | (1L << (FROM_BASE64 - 852)) | (1L << (FROM_DAYS - 852)) | (1L << (FROM_UNIXTIME - 852)) | (1L << (GEOMCOLLFROMTEXT - 852)) | (1L << (GEOMCOLLFROMWKB - 852)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 852)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 852)) | (1L << (GEOMETRYFROMTEXT - 852)) | (1L << (GEOMETRYFROMWKB - 852)) | (1L << (GEOMETRYN - 852)) | (1L << (GEOMETRYTYPE - 852)) | (1L << (GEOMFROMTEXT - 852)) | (1L << (GEOMFROMWKB - 852)) | (1L << (GET_FORMAT - 852)) | (1L << (GET_LOCK - 852)) | (1L << (GLENGTH - 852)) | (1L << (GREATEST - 852)) | (1L << (GTID_SUBSET - 852)) | (1L << (GTID_SUBTRACT - 852)) | (1L << (HEX - 852)) | (1L << (IFNULL - 852)) | (1L << (INET6_ATON - 852)) | (1L << (INET6_NTOA - 852)) | (1L << (INET_ATON - 852)) | (1L << (INET_NTOA - 852)) | (1L << (INSTR - 852)) | (1L << (INTERIORRINGN - 852)) | (1L << (INTERSECTS - 852)) | (1L << (ISCLOSED - 852)) | (1L << (ISEMPTY - 852)) | (1L << (ISNULL - 852)) | (1L << (ISSIMPLE - 852)) | (1L << (IS_FREE_LOCK - 852)) | (1L << (IS_IPV4 - 852)) | (1L << (IS_IPV4_COMPAT - 852)) | (1L << (IS_IPV4_MAPPED - 852)) | (1L << (IS_IPV6 - 852)) | (1L << (IS_USED_LOCK - 852)) | (1L << (LAST_INSERT_ID - 852)) | (1L << (LCASE - 852)) | (1L << (LEAST - 852)) | (1L << (LENGTH - 852)) | (1L << (LINEFROMTEXT - 852)) | (1L << (LINEFROMWKB - 852)) | (1L << (LINESTRINGFROMTEXT - 852)) | (1L << (LINESTRINGFROMWKB - 852)) | (1L << (LN - 852)) | (1L << (LOAD_FILE - 852)) | (1L << (LOCATE - 852)))) != 0) || ((((_la - 916)) & ~0x3f) == 0 && ((1L << (_la - 916)) & ((1L << (LOG - 916)) | (1L << (LOG10 - 916)) | (1L << (LOG2 - 916)) | (1L << (LOWER - 916)) | (1L << (LPAD - 916)) | (1L << (LTRIM - 916)) | (1L << (MAKEDATE - 916)) | (1L << (MAKETIME - 916)) | (1L << (MAKE_SET - 916)) | (1L << (MASTER_POS_WAIT - 916)) | (1L << (MBRCONTAINS - 916)) | (1L << (MBRDISJOINT - 916)) | (1L << (MBREQUAL - 916)) | (1L << (MBRINTERSECTS - 916)) | (1L << (MBROVERLAPS - 916)) | (1L << (MBRTOUCHES - 916)) | (1L << (MBRWITHIN - 916)) | (1L << (MD5 - 916)) | (1L << (MLINEFROMTEXT - 916)) | (1L << (MLINEFROMWKB - 916)) | (1L << (MONTHNAME - 916)) | (1L << (MPOINTFROMTEXT - 916)) | (1L << (MPOINTFROMWKB - 916)) | (1L << (MPOLYFROMTEXT - 916)) | (1L << (MPOLYFROMWKB - 916)) | (1L << (MULTILINESTRINGFROMTEXT - 916)) | (1L << (MULTILINESTRINGFROMWKB - 916)) | (1L << (MULTIPOINTFROMTEXT - 916)) | (1L << (MULTIPOINTFROMWKB - 916)) | (1L << (MULTIPOLYGONFROMTEXT - 916)) | (1L << (MULTIPOLYGONFROMWKB - 916)) | (1L << (NAME_CONST - 916)) | (1L << (NULLIF - 916)) | (1L << (NUMGEOMETRIES - 916)) | (1L << (NUMINTERIORRINGS - 916)) | (1L << (NUMPOINTS - 916)) | (1L << (OCT - 916)) | (1L << (OCTET_LENGTH - 916)) | (1L << (ORD - 916)) | (1L << (OVERLAPS - 916)) | (1L << (PERIOD_ADD - 916)) | (1L << (PERIOD_DIFF - 916)) | (1L << (PI - 916)) | (1L << (POINTFROMTEXT - 916)) | (1L << (POINTFROMWKB - 916)) | (1L << (POINTN - 916)) | (1L << (POLYFROMTEXT - 916)) | (1L << (POLYFROMWKB - 916)) | (1L << (POLYGONFROMTEXT - 916)) | (1L << (POLYGONFROMWKB - 916)) | (1L << (POW - 916)) | (1L << (POWER - 916)) | (1L << (QUOTE - 916)) | (1L << (RADIANS - 916)) | (1L << (RAND - 916)) | (1L << (RANDOM_BYTES - 916)) | (1L << (RELEASE_LOCK - 916)) | (1L << (REVERSE - 916)) | (1L << (ROUND - 916)) | (1L << (ROW_COUNT - 916)) | (1L << (RPAD - 916)) | (1L << (RTRIM - 916)) | (1L << (SEC_TO_TIME - 916)) | (1L << (SECONDARY_ENGINE_ATTRIBUTE - 916)))) != 0) || ((((_la - 980)) & ~0x3f) == 0 && ((1L << (_la - 980)) & ((1L << (SESSION_USER - 980)) | (1L << (SHA - 980)) | (1L << (SHA1 - 980)) | (1L << (SHA2 - 980)) | (1L << (SCHEMA_NAME - 980)) | (1L << (SIGN - 980)) | (1L << (SIN - 980)) | (1L << (SLEEP - 980)) | (1L << (SOUNDEX - 980)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 980)) | (1L << (SQRT - 980)) | (1L << (SRID - 980)) | (1L << (STARTPOINT - 980)) | (1L << (STRCMP - 980)) | (1L << (STR_TO_DATE - 980)) | (1L << (ST_AREA - 980)) | (1L << (ST_ASBINARY - 980)) | (1L << (ST_ASTEXT - 980)) | (1L << (ST_ASWKB - 980)) | (1L << (ST_ASWKT - 980)) | (1L << (ST_BUFFER - 980)) | (1L << (ST_CENTROID - 980)) | (1L << (ST_CONTAINS - 980)) | (1L << (ST_CROSSES - 980)) | (1L << (ST_DIFFERENCE - 980)) | (1L << (ST_DIMENSION - 980)) | (1L << (ST_DISJOINT - 980)) | (1L << (ST_DISTANCE - 980)) | (1L << (ST_ENDPOINT - 980)) | (1L << (ST_ENVELOPE - 980)) | (1L << (ST_EQUALS - 980)) | (1L << (ST_EXTERIORRING - 980)) | (1L << (ST_GEOMCOLLFROMTEXT - 980)) | (1L << (ST_GEOMCOLLFROMTXT - 980)) | (1L << (ST_GEOMCOLLFROMWKB - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 980)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 980)) | (1L << (ST_GEOMETRYFROMTEXT - 980)) | (1L << (ST_GEOMETRYFROMWKB - 980)) | (1L << (ST_GEOMETRYN - 980)) | (1L << (ST_GEOMETRYTYPE - 980)) | (1L << (ST_GEOMFROMTEXT - 980)) | (1L << (ST_GEOMFROMWKB - 980)) | (1L << (ST_INTERIORRINGN - 980)) | (1L << (ST_INTERSECTION - 980)) | (1L << (ST_INTERSECTS - 980)) | (1L << (ST_ISCLOSED - 980)) | (1L << (ST_ISEMPTY - 980)) | (1L << (ST_ISSIMPLE - 980)) | (1L << (ST_LINEFROMTEXT - 980)) | (1L << (ST_LINEFROMWKB - 980)) | (1L << (ST_LINESTRINGFROMTEXT - 980)) | (1L << (ST_LINESTRINGFROMWKB - 980)) | (1L << (ST_NUMGEOMETRIES - 980)) | (1L << (ST_NUMINTERIORRING - 980)) | (1L << (ST_NUMINTERIORRINGS - 980)) | (1L << (ST_NUMPOINTS - 980)) | (1L << (ST_OVERLAPS - 980)) | (1L << (ST_POINTFROMTEXT - 980)) | (1L << (ST_POINTFROMWKB - 980)) | (1L << (ST_POINTN - 980)) | (1L << (ST_POLYFROMTEXT - 980)) | (1L << (ST_POLYFROMWKB - 980)) | (1L << (ST_POLYGONFROMTEXT - 980)))) != 0) || ((((_la - 1044)) & ~0x3f) == 0 && ((1L << (_la - 1044)) & ((1L << (ST_POLYGONFROMWKB - 1044)) | (1L << (ST_SRID - 1044)) | (1L << (ST_STARTPOINT - 1044)) | (1L << (ST_SYMDIFFERENCE - 1044)) | (1L << (ST_TOUCHES - 1044)) | (1L << (ST_UNION - 1044)) | (1L << (ST_WITHIN - 1044)) | (1L << (ST_X - 1044)) | (1L << (ST_Y - 1044)) | (1L << (SUBDATE - 1044)) | (1L << (SUBSTRING_INDEX - 1044)) | (1L << (SUBTIME - 1044)) | (1L << (SYSTEM_USER - 1044)) | (1L << (TAN - 1044)) | (1L << (TIMEDIFF - 1044)) | (1L << (TIMESTAMPADD - 1044)) | (1L << (TIMESTAMPDIFF - 1044)) | (1L << (TIME_FORMAT - 1044)) | (1L << (TIME_TO_SEC - 1044)) | (1L << (TOUCHES - 1044)) | (1L << (TO_BASE64 - 1044)) | (1L << (TO_DAYS - 1044)) | (1L << (TO_SECONDS - 1044)) | (1L << (UCASE - 1044)) | (1L << (UNCOMPRESS - 1044)) | (1L << (UNCOMPRESSED_LENGTH - 1044)) | (1L << (UNHEX - 1044)) | (1L << (UNIX_TIMESTAMP - 1044)) | (1L << (UPDATEXML - 1044)) | (1L << (UPPER - 1044)) | (1L << (UUID - 1044)) | (1L << (UUID_SHORT - 1044)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1044)) | (1L << (VERSION - 1044)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1044)) | (1L << (WEEKDAY - 1044)) | (1L << (WEEKOFYEAR - 1044)) | (1L << (WEIGHT_STRING - 1044)) | (1L << (WITHIN - 1044)) | (1L << (YEARWEEK - 1044)) | (1L << (Y_FUNCTION - 1044)) | (1L << (X_FUNCTION - 1044)) | (1L << (VIA - 1044)) | (1L << (LASTVAL - 1044)) | (1L << (NEXTVAL - 1044)) | (1L << (SETVAL - 1044)) | (1L << (PREVIOUS - 1044)) | (1L << (PERSISTENT - 1044)) | (1L << (BINLOG_MONITOR - 1044)) | (1L << (BINLOG_REPLAY - 1044)) | (1L << (FEDERATED_ADMIN - 1044)) | (1L << (READ_ONLY_ADMIN - 1044)) | (1L << (REPLICA - 1044)) | (1L << (REPLICATION_MASTER_ADMIN - 1044)))) != 0) || ((((_la - 1113)) & ~0x3f) == 0 && ((1L << (_la - 1113)) & ((1L << (MOD - 1113)) | (1L << (CHARSET_REVERSE_QOUTE_STRING - 1113)) | (1L << (STRING_LITERAL - 1113)) | (1L << (ID - 1113)) | (1L << (REVERSE_QUOTE_ID - 1113)) | (1L << (ENCRYPTED - 1113)) | (1L << (ENCRYPTION_KEY_ID - 1113)))) != 0)) {
				{
				setState(1342);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1341);
					match(AS);
					}
				}

				setState(1344);
				uid();
				}
			}

			setState(1347);
			match(SET);
			setState(1348);
			updatedElement();
			setState(1353);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1349);
				match(COMMA);
				setState(1350);
				updatedElement();
				}
				}
				setState(1355);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1358);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1356);
				match(WHERE);
				setState(1357);
				expression(0);
				}
			}

			setState(1361);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(1360);
				orderByClause();
				}
			}

			setState(1364);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LIMIT) {
				{
				setState(1363);
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MultipleUpdateStatementContext extends ParserRuleContext {
		public Token priority;
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<UpdatedElementContext> updatedElement() {
			return getRuleContexts(UpdatedElementContext.class);
		}
		public UpdatedElementContext updatedElement(int i) {
			return getRuleContext(UpdatedElementContext.class,i);
		}
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOW_PRIORITY() { return getToken(MySqlParser.LOW_PRIORITY, 0); }
		public MultipleUpdateStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multipleUpdateStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMultipleUpdateStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMultipleUpdateStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMultipleUpdateStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MultipleUpdateStatementContext multipleUpdateStatement() throws RecognitionException {
		MultipleUpdateStatementContext _localctx = new MultipleUpdateStatementContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_multipleUpdateStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1366);
			match(UPDATE);
			setState(1368);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOW_PRIORITY) {
				{
				setState(1367);
				((MultipleUpdateStatementContext)_localctx).priority = match(LOW_PRIORITY);
				}
			}

			setState(1371);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IGNORE) {
				{
				setState(1370);
				match(IGNORE);
				}
			}

			setState(1373);
			tableSources();
			setState(1374);
			match(SET);
			setState(1375);
			updatedElement();
			setState(1380);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1376);
				match(COMMA);
				setState(1377);
				updatedElement();
				}
				}
				setState(1382);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1385);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1383);
				match(WHERE);
				setState(1384);
				expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByClauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public OrderByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOrderByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOrderByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOrderByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByClauseContext orderByClause() throws RecognitionException {
		OrderByClauseContext _localctx = new OrderByClauseContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_orderByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1387);
			match(ORDER);
			setState(1388);
			match(BY);
			setState(1389);
			orderByExpression();
			setState(1394);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1390);
				match(COMMA);
				setState(1391);
				orderByExpression();
				}
				}
				setState(1396);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OrderByExpressionContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public OrderByExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_orderByExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOrderByExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOrderByExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOrderByExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OrderByExpressionContext orderByExpression() throws RecognitionException {
		OrderByExpressionContext _localctx = new OrderByExpressionContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_orderByExpression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1397);
			expression(0);
			setState(1399);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(1398);
				((OrderByExpressionContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((OrderByExpressionContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourcesContext extends ParserRuleContext {
		public List<TableSourceContext> tableSource() {
			return getRuleContexts(TableSourceContext.class);
		}
		public TableSourceContext tableSource(int i) {
			return getRuleContext(TableSourceContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TableSourcesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSources; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSources(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSources(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableSources(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourcesContext tableSources() throws RecognitionException {
		TableSourcesContext _localctx = new TableSourcesContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_tableSources);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1401);
			tableSource();
			setState(1406);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1402);
				match(COMMA);
				setState(1403);
				tableSource();
				}
				}
				setState(1408);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceContext extends ParserRuleContext {
		public TableSourceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSource; }
	 
		public TableSourceContext() { }
		public void copyFrom(TableSourceContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class TableSourceNestedContext extends TableSourceContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceNestedContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSourceNested(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSourceNested(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableSourceNested(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourceBaseContext extends TableSourceContext {
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public List<JoinPartContext> joinPart() {
			return getRuleContexts(JoinPartContext.class);
		}
		public JoinPartContext joinPart(int i) {
			return getRuleContext(JoinPartContext.class,i);
		}
		public TableSourceBaseContext(TableSourceContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSourceBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSourceBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableSourceBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceContext tableSource() throws RecognitionException {
		TableSourceContext _localctx = new TableSourceContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_tableSource);
		int _la;
		try {
			int _alt;
			setState(1426);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,192,_ctx) ) {
			case 1:
				_localctx = new TableSourceBaseContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1409);
				tableSourceItem();
				setState(1413);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,190,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1410);
						joinPart();
						}
						} 
					}
					setState(1415);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,190,_ctx);
				}
				}
				break;
			case 2:
				_localctx = new TableSourceNestedContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1416);
				match(LR_BRACKET);
				setState(1417);
				tableSourceItem();
				setState(1421);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (CROSS - 33)) | (1L << (INNER - 33)) | (1L << (JOIN - 33)) | (1L << (LEFT - 33)))) != 0) || ((((_la - 109)) & ~0x3f) == 0 && ((1L << (_la - 109)) & ((1L << (NATURAL - 109)) | (1L << (RIGHT - 109)) | (1L << (STRAIGHT_JOIN - 109)))) != 0)) {
					{
					{
					setState(1418);
					joinPart();
					}
					}
					setState(1423);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1424);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableSourceItemContext extends ParserRuleContext {
		public TableSourceItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableSourceItem; }
	 
		public TableSourceItemContext() { }
		public void copyFrom(TableSourceItemContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SubqueryTableItemContext extends TableSourceItemContext {
		public SelectStatementContext parenthesisSubquery;
		public UidContext alias;
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SubqueryTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubqueryTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubqueryTableItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubqueryTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AtomTableItemContext extends TableSourceItemContext {
		public UidContext alias;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<IndexHintContext> indexHint() {
			return getRuleContexts(IndexHintContext.class);
		}
		public IndexHintContext indexHint(int i) {
			return getRuleContext(IndexHintContext.class,i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AtomTableItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAtomTableItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAtomTableItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAtomTableItem(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TableSourcesItemContext extends TableSourceItemContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TableSourcesItemContext(TableSourceItemContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableSourcesItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableSourcesItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableSourcesItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableSourceItemContext tableSourceItem() throws RecognitionException {
		TableSourceItemContext _localctx = new TableSourceItemContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_tableSourceItem);
		int _la;
		try {
			int _alt;
			setState(1468);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,200,_ctx) ) {
			case 1:
				_localctx = new AtomTableItemContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1428);
				tableName();
				setState(1434);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PARTITION) {
					{
					setState(1429);
					match(PARTITION);
					setState(1430);
					match(LR_BRACKET);
					setState(1431);
					uidList();
					setState(1432);
					match(RR_BRACKET);
					}
				}

				setState(1440);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,195,_ctx) ) {
				case 1:
					{
					setState(1437);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(1436);
						match(AS);
						}
					}

					setState(1439);
					((AtomTableItemContext)_localctx).alias = uid();
					}
					break;
				}
				setState(1450);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FORCE || _la==IGNORE || _la==USE) {
					{
					setState(1442);
					indexHint();
					setState(1447);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,196,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(1443);
							match(COMMA);
							setState(1444);
							indexHint();
							}
							} 
						}
						setState(1449);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,196,_ctx);
					}
					}
				}

				}
				break;
			case 2:
				_localctx = new SubqueryTableItemContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1457);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,198,_ctx) ) {
				case 1:
					{
					setState(1452);
					selectStatement();
					}
					break;
				case 2:
					{
					setState(1453);
					match(LR_BRACKET);
					setState(1454);
					((SubqueryTableItemContext)_localctx).parenthesisSubquery = selectStatement();
					setState(1455);
					match(RR_BRACKET);
					}
					break;
				}
				setState(1460);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(1459);
					match(AS);
					}
				}

				setState(1462);
				((SubqueryTableItemContext)_localctx).alias = uid();
				}
				break;
			case 3:
				_localctx = new TableSourcesItemContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1464);
				match(LR_BRACKET);
				setState(1465);
				tableSources();
				setState(1466);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintContext extends ParserRuleContext {
		public Token indexHintAction;
		public Token keyFormat;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode USE() { return getToken(MySqlParser.USE, 0); }
		public TerminalNode IGNORE() { return getToken(MySqlParser.IGNORE, 0); }
		public TerminalNode FORCE() { return getToken(MySqlParser.FORCE, 0); }
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode KEY() { return getToken(MySqlParser.KEY, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public IndexHintTypeContext indexHintType() {
			return getRuleContext(IndexHintTypeContext.class,0);
		}
		public IndexHintContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHint; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexHint(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexHint(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexHint(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintContext indexHint() throws RecognitionException {
		IndexHintContext _localctx = new IndexHintContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_indexHint);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1470);
			((IndexHintContext)_localctx).indexHintAction = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==FORCE || _la==IGNORE || _la==USE) ) {
				((IndexHintContext)_localctx).indexHintAction = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1471);
			((IndexHintContext)_localctx).keyFormat = _input.LT(1);
			_la = _input.LA(1);
			if ( !(_la==INDEX || _la==KEY) ) {
				((IndexHintContext)_localctx).keyFormat = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1474);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(1472);
				match(FOR);
				setState(1473);
				indexHintType();
				}
			}

			setState(1476);
			match(LR_BRACKET);
			setState(1477);
			uidList();
			setState(1478);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexHintTypeContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexHintType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexHintType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexHintType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexHintType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexHintTypeContext indexHintType() throws RecognitionException {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_indexHintType);
		try {
			setState(1485);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JOIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(1480);
				match(JOIN);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 2);
				{
				setState(1481);
				match(ORDER);
				setState(1482);
				match(BY);
				}
				break;
			case GROUP:
				enterOuterAlt(_localctx, 3);
				{
				setState(1483);
				match(GROUP);
				setState(1484);
				match(BY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JoinPartContext extends ParserRuleContext {
		public JoinPartContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_joinPart; }
	 
		public JoinPartContext() { }
		public void copyFrom(JoinPartContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class InnerJoinContext extends JoinPartContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode INNER() { return getToken(MySqlParser.INNER, 0); }
		public TerminalNode CROSS() { return getToken(MySqlParser.CROSS, 0); }
		public InnerJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInnerJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInnerJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInnerJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NaturalJoinContext extends JoinPartContext {
		public TerminalNode NATURAL() { return getToken(MySqlParser.NATURAL, 0); }
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(MySqlParser.OUTER, 0); }
		public NaturalJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNaturalJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNaturalJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNaturalJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class OuterJoinContext extends JoinPartContext {
		public TerminalNode JOIN() { return getToken(MySqlParser.JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public UidListContext uidList() {
			return getRuleContext(UidListContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode OUTER() { return getToken(MySqlParser.OUTER, 0); }
		public OuterJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOuterJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOuterJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOuterJoin(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StraightJoinContext extends JoinPartContext {
		public TerminalNode STRAIGHT_JOIN() { return getToken(MySqlParser.STRAIGHT_JOIN, 0); }
		public TableSourceItemContext tableSourceItem() {
			return getRuleContext(TableSourceItemContext.class,0);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public StraightJoinContext(JoinPartContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStraightJoin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStraightJoin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStraightJoin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JoinPartContext joinPart() throws RecognitionException {
		JoinPartContext _localctx = new JoinPartContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_joinPart);
		int _la;
		try {
			setState(1531);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CROSS:
			case INNER:
			case JOIN:
				_localctx = new InnerJoinContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1488);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CROSS || _la==INNER) {
					{
					setState(1487);
					_la = _input.LA(1);
					if ( !(_la==CROSS || _la==INNER) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(1490);
				match(JOIN);
				setState(1491);
				tableSourceItem();
				setState(1499);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,204,_ctx) ) {
				case 1:
					{
					setState(1492);
					match(ON);
					setState(1493);
					expression(0);
					}
					break;
				case 2:
					{
					setState(1494);
					match(USING);
					setState(1495);
					match(LR_BRACKET);
					setState(1496);
					uidList();
					setState(1497);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case STRAIGHT_JOIN:
				_localctx = new StraightJoinContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1501);
				match(STRAIGHT_JOIN);
				setState(1502);
				tableSourceItem();
				setState(1505);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,205,_ctx) ) {
				case 1:
					{
					setState(1503);
					match(ON);
					setState(1504);
					expression(0);
					}
					break;
				}
				}
				break;
			case LEFT:
			case RIGHT:
				_localctx = new OuterJoinContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1507);
				_la = _input.LA(1);
				if ( !(_la==LEFT || _la==RIGHT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1509);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OUTER) {
					{
					setState(1508);
					match(OUTER);
					}
				}

				setState(1511);
				match(JOIN);
				setState(1512);
				tableSourceItem();
				setState(1520);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ON:
					{
					setState(1513);
					match(ON);
					setState(1514);
					expression(0);
					}
					break;
				case USING:
					{
					setState(1515);
					match(USING);
					setState(1516);
					match(LR_BRACKET);
					setState(1517);
					uidList();
					setState(1518);
					match(RR_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL:
				_localctx = new NaturalJoinContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1522);
				match(NATURAL);
				setState(1527);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT || _la==RIGHT) {
					{
					setState(1523);
					_la = _input.LA(1);
					if ( !(_la==LEFT || _la==RIGHT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1525);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==OUTER) {
						{
						setState(1524);
						match(OUTER);
						}
					}

					}
				}

				setState(1529);
				match(JOIN);
				setState(1530);
				tableSourceItem();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public QuerySpecificationContext querySpecification() {
			return getRuleContext(QuerySpecificationContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public QueryExpressionContext queryExpression() {
			return getRuleContext(QueryExpressionContext.class,0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQueryExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQueryExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQueryExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionContext queryExpression() throws RecognitionException {
		QueryExpressionContext _localctx = new QueryExpressionContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_queryExpression);
		try {
			setState(1541);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,211,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1533);
				match(LR_BRACKET);
				setState(1534);
				querySpecification();
				setState(1535);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1537);
				match(LR_BRACKET);
				setState(1538);
				queryExpression();
				setState(1539);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QueryExpressionNointoContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public QueryExpressionNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_queryExpressionNointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQueryExpressionNointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQueryExpressionNointo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQueryExpressionNointo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QueryExpressionNointoContext queryExpressionNointo() throws RecognitionException {
		QueryExpressionNointoContext _localctx = new QueryExpressionNointoContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_queryExpressionNointo);
		try {
			setState(1551);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,212,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1543);
				match(LR_BRACKET);
				setState(1544);
				querySpecificationNointo();
				setState(1545);
				match(RR_BRACKET);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1547);
				match(LR_BRACKET);
				setState(1548);
				queryExpressionNointo();
				setState(1549);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public SelectIntoExpressionContext selectIntoExpression() {
			return getRuleContext(SelectIntoExpressionContext.class,0);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecification; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQuerySpecification(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQuerySpecification(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQuerySpecification(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationContext querySpecification() throws RecognitionException {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_querySpecification);
		int _la;
		try {
			int _alt;
			setState(1611);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,229,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1553);
				match(SELECT);
				setState(1557);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,213,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1554);
						selectSpec();
						}
						} 
					}
					setState(1559);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,213,_ctx);
				}
				setState(1560);
				selectElements();
				setState(1562);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(1561);
					selectIntoExpression();
					}
				}

				setState(1565);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,215,_ctx) ) {
				case 1:
					{
					setState(1564);
					fromClause();
					}
					break;
				}
				setState(1568);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
				case 1:
					{
					setState(1567);
					groupByClause();
					}
					break;
				}
				setState(1571);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HAVING) {
					{
					setState(1570);
					havingClause();
					}
				}

				setState(1574);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WINDOW) {
					{
					setState(1573);
					windowClause();
					}
				}

				setState(1577);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
				case 1:
					{
					setState(1576);
					orderByClause();
					}
					break;
				}
				setState(1580);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
				case 1:
					{
					setState(1579);
					limitClause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1582);
				match(SELECT);
				setState(1586);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,221,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(1583);
						selectSpec();
						}
						} 
					}
					setState(1588);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,221,_ctx);
				}
				setState(1589);
				selectElements();
				setState(1591);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,222,_ctx) ) {
				case 1:
					{
					setState(1590);
					fromClause();
					}
					break;
				}
				setState(1594);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,223,_ctx) ) {
				case 1:
					{
					setState(1593);
					groupByClause();
					}
					break;
				}
				setState(1597);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HAVING) {
					{
					setState(1596);
					havingClause();
					}
				}

				setState(1600);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WINDOW) {
					{
					setState(1599);
					windowClause();
					}
				}

				setState(1603);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,226,_ctx) ) {
				case 1:
					{
					setState(1602);
					orderByClause();
					}
					break;
				}
				setState(1606);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,227,_ctx) ) {
				case 1:
					{
					setState(1605);
					limitClause();
					}
					break;
				}
				setState(1609);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTO) {
					{
					setState(1608);
					selectIntoExpression();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class QuerySpecificationNointoContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(MySqlParser.SELECT, 0); }
		public SelectElementsContext selectElements() {
			return getRuleContext(SelectElementsContext.class,0);
		}
		public List<SelectSpecContext> selectSpec() {
			return getRuleContexts(SelectSpecContext.class);
		}
		public SelectSpecContext selectSpec(int i) {
			return getRuleContext(SelectSpecContext.class,i);
		}
		public FromClauseContext fromClause() {
			return getRuleContext(FromClauseContext.class,0);
		}
		public GroupByClauseContext groupByClause() {
			return getRuleContext(GroupByClauseContext.class,0);
		}
		public HavingClauseContext havingClause() {
			return getRuleContext(HavingClauseContext.class,0);
		}
		public WindowClauseContext windowClause() {
			return getRuleContext(WindowClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public LimitClauseContext limitClause() {
			return getRuleContext(LimitClauseContext.class,0);
		}
		public QuerySpecificationNointoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_querySpecificationNointo; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterQuerySpecificationNointo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitQuerySpecificationNointo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitQuerySpecificationNointo(this);
			else return visitor.visitChildren(this);
		}
	}

	public final QuerySpecificationNointoContext querySpecificationNointo() throws RecognitionException {
		QuerySpecificationNointoContext _localctx = new QuerySpecificationNointoContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_querySpecificationNointo);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1613);
			match(SELECT);
			setState(1617);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,230,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1614);
					selectSpec();
					}
					} 
				}
				setState(1619);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,230,_ctx);
			}
			setState(1620);
			selectElements();
			setState(1622);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,231,_ctx) ) {
			case 1:
				{
				setState(1621);
				fromClause();
				}
				break;
			}
			setState(1625);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,232,_ctx) ) {
			case 1:
				{
				setState(1624);
				groupByClause();
				}
				break;
			}
			setState(1628);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==HAVING) {
				{
				setState(1627);
				havingClause();
				}
			}

			setState(1631);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WINDOW) {
				{
				setState(1630);
				windowClause();
				}
			}

			setState(1634);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
			case 1:
				{
				setState(1633);
				orderByClause();
				}
				break;
			}
			setState(1637);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
			case 1:
				{
				setState(1636);
				limitClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionParenthesisContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionParenthesisContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionParenthesis; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionParenthesis(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionParenthesis(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnionParenthesis(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionParenthesisContext unionParenthesis() throws RecognitionException {
		UnionParenthesisContext _localctx = new UnionParenthesisContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_unionParenthesis);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1639);
			match(UNION);
			setState(1641);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(1640);
				((UnionParenthesisContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionParenthesisContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1643);
			queryExpressionNointo();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UnionStatementContext extends ParserRuleContext {
		public Token unionType;
		public TerminalNode UNION() { return getToken(MySqlParser.UNION, 0); }
		public QuerySpecificationNointoContext querySpecificationNointo() {
			return getRuleContext(QuerySpecificationNointoContext.class,0);
		}
		public QueryExpressionNointoContext queryExpressionNointo() {
			return getRuleContext(QueryExpressionNointoContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public UnionStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unionStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnionStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnionStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnionStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnionStatementContext unionStatement() throws RecognitionException {
		UnionStatementContext _localctx = new UnionStatementContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_unionStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1645);
			match(UNION);
			setState(1647);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==DISTINCT) {
				{
				setState(1646);
				((UnionStatementContext)_localctx).unionType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT) ) {
					((UnionStatementContext)_localctx).unionType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(1651);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				{
				setState(1649);
				querySpecificationNointo();
				}
				break;
			case LR_BRACKET:
				{
				setState(1650);
				queryExpressionNointo();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectSpecContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public TerminalNode DISTINCTROW() { return getToken(MySqlParser.DISTINCTROW, 0); }
		public TerminalNode HIGH_PRIORITY() { return getToken(MySqlParser.HIGH_PRIORITY, 0); }
		public TerminalNode STRAIGHT_JOIN() { return getToken(MySqlParser.STRAIGHT_JOIN, 0); }
		public TerminalNode SQL_SMALL_RESULT() { return getToken(MySqlParser.SQL_SMALL_RESULT, 0); }
		public TerminalNode SQL_BIG_RESULT() { return getToken(MySqlParser.SQL_BIG_RESULT, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(MySqlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(MySqlParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_CALC_FOUND_ROWS() { return getToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0); }
		public SelectSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectSpecContext selectSpec() throws RecognitionException {
		SelectSpecContext _localctx = new SelectSpecContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_selectSpec);
		int _la;
		try {
			setState(1661);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
			case DISTINCT:
			case DISTINCTROW:
				enterOuterAlt(_localctx, 1);
				{
				setState(1653);
				_la = _input.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ALL) | (1L << DISTINCT) | (1L << DISTINCTROW))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case HIGH_PRIORITY:
				enterOuterAlt(_localctx, 2);
				{
				setState(1654);
				match(HIGH_PRIORITY);
				}
				break;
			case STRAIGHT_JOIN:
				enterOuterAlt(_localctx, 3);
				{
				setState(1655);
				match(STRAIGHT_JOIN);
				}
				break;
			case SQL_SMALL_RESULT:
				enterOuterAlt(_localctx, 4);
				{
				setState(1656);
				match(SQL_SMALL_RESULT);
				}
				break;
			case SQL_BIG_RESULT:
				enterOuterAlt(_localctx, 5);
				{
				setState(1657);
				match(SQL_BIG_RESULT);
				}
				break;
			case SQL_BUFFER_RESULT:
				enterOuterAlt(_localctx, 6);
				{
				setState(1658);
				match(SQL_BUFFER_RESULT);
				}
				break;
			case SQL_CACHE:
			case SQL_NO_CACHE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1659);
				_la = _input.LA(1);
				if ( !(_la==SQL_CACHE || _la==SQL_NO_CACHE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case SQL_CALC_FOUND_ROWS:
				enterOuterAlt(_localctx, 8);
				{
				setState(1660);
				match(SQL_CALC_FOUND_ROWS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementsContext extends ParserRuleContext {
		public Token star;
		public List<SelectElementContext> selectElement() {
			return getRuleContexts(SelectElementContext.class);
		}
		public SelectElementContext selectElement(int i) {
			return getRuleContext(SelectElementContext.class,i);
		}
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SelectElementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectElements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectElements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectElements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementsContext selectElements() throws RecognitionException {
		SelectElementsContext _localctx = new SelectElementsContext(_ctx, getState());
		enterRule(_localctx, 146, RULE_selectElements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1665);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
			case 1:
				{
				setState(1663);
				((SelectElementsContext)_localctx).star = match(STAR);
				}
				break;
			case 2:
				{
				setState(1664);
				selectElement();
				}
				break;
			}
			setState(1671);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1667);
				match(COMMA);
				setState(1668);
				selectElement();
				}
				}
				setState(1673);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectElementContext extends ParserRuleContext {
		public SelectElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectElement; }
	 
		public SelectElementContext() { }
		public void copyFrom(SelectElementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectExpressionElementContext extends SelectElementContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(MySqlParser.VAR_ASSIGN, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectExpressionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectExpressionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectExpressionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectExpressionElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectFunctionElementContext extends SelectElementContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectFunctionElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectFunctionElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectFunctionElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectFunctionElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectStarElementContext extends SelectElementContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public SelectStarElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectStarElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectStarElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectStarElement(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectColumnElementContext extends SelectElementContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public SelectColumnElementContext(SelectElementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectColumnElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectColumnElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectColumnElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectElementContext selectElement() throws RecognitionException {
		SelectElementContext _localctx = new SelectElementContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_selectElement);
		int _la;
		try {
			setState(1703);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,250,_ctx) ) {
			case 1:
				_localctx = new SelectStarElementContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1674);
				fullId();
				setState(1675);
				match(DOT);
				setState(1676);
				match(STAR);
				}
				break;
			case 2:
				_localctx = new SelectColumnElementContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1678);
				fullColumnName();
				setState(1683);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,244,_ctx) ) {
				case 1:
					{
					setState(1680);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(1679);
						match(AS);
						}
					}

					setState(1682);
					uid();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new SelectFunctionElementContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1685);
				functionCall();
				setState(1690);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,246,_ctx) ) {
				case 1:
					{
					setState(1687);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(1686);
						match(AS);
						}
					}

					setState(1689);
					uid();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SelectExpressionElementContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1694);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,247,_ctx) ) {
				case 1:
					{
					setState(1692);
					match(LOCAL_ID);
					setState(1693);
					match(VAR_ASSIGN);
					}
					break;
				}
				setState(1696);
				expression(0);
				setState(1701);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,249,_ctx) ) {
				case 1:
					{
					setState(1698);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(1697);
						match(AS);
						}
					}

					setState(1700);
					uid();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectIntoExpressionContext extends ParserRuleContext {
		public SelectIntoExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectIntoExpression; }
	 
		public SelectIntoExpressionContext() { }
		public void copyFrom(SelectIntoExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SelectIntoVariablesContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public List<AssignmentFieldContext> assignmentField() {
			return getRuleContexts(AssignmentFieldContext.class);
		}
		public AssignmentFieldContext assignmentField(int i) {
			return getRuleContext(AssignmentFieldContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SelectIntoVariablesContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoVariables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoVariables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectIntoVariables(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectIntoTextFileContext extends SelectIntoExpressionContext {
		public Token filename;
		public CharsetNameContext charset;
		public Token fieldsFormat;
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode OUTFILE() { return getToken(MySqlParser.OUTFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode LINES() { return getToken(MySqlParser.LINES, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public List<SelectFieldsIntoContext> selectFieldsInto() {
			return getRuleContexts(SelectFieldsIntoContext.class);
		}
		public SelectFieldsIntoContext selectFieldsInto(int i) {
			return getRuleContext(SelectFieldsIntoContext.class,i);
		}
		public List<SelectLinesIntoContext> selectLinesInto() {
			return getRuleContexts(SelectLinesIntoContext.class);
		}
		public SelectLinesIntoContext selectLinesInto(int i) {
			return getRuleContext(SelectLinesIntoContext.class,i);
		}
		public SelectIntoTextFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoTextFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoTextFile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectIntoTextFile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SelectIntoDumpFileContext extends SelectIntoExpressionContext {
		public TerminalNode INTO() { return getToken(MySqlParser.INTO, 0); }
		public TerminalNode DUMPFILE() { return getToken(MySqlParser.DUMPFILE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public SelectIntoDumpFileContext(SelectIntoExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectIntoDumpFile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectIntoDumpFile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectIntoDumpFile(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectIntoExpressionContext selectIntoExpression() throws RecognitionException {
		SelectIntoExpressionContext _localctx = new SelectIntoExpressionContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_selectIntoExpression);
		int _la;
		try {
			setState(1741);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
			case 1:
				_localctx = new SelectIntoVariablesContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1705);
				match(INTO);
				setState(1706);
				assignmentField();
				setState(1711);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1707);
					match(COMMA);
					setState(1708);
					assignmentField();
					}
					}
					setState(1713);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new SelectIntoDumpFileContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1714);
				match(INTO);
				setState(1715);
				match(DUMPFILE);
				setState(1716);
				match(STRING_LITERAL);
				}
				break;
			case 3:
				_localctx = new SelectIntoTextFileContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(1717);
				match(INTO);
				setState(1718);
				match(OUTFILE);
				setState(1719);
				((SelectIntoTextFileContext)_localctx).filename = match(STRING_LITERAL);
				setState(1723);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CHARACTER) {
					{
					setState(1720);
					match(CHARACTER);
					setState(1721);
					match(SET);
					setState(1722);
					((SelectIntoTextFileContext)_localctx).charset = charsetName();
					}
				}

				setState(1731);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,254,_ctx) ) {
				case 1:
					{
					setState(1725);
					((SelectIntoTextFileContext)_localctx).fieldsFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==COLUMNS || _la==FIELDS) ) {
						((SelectIntoTextFileContext)_localctx).fieldsFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1727); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1726);
						selectFieldsInto();
						}
						}
						setState(1729); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==ENCLOSED || _la==ESCAPED || _la==OPTIONALLY || _la==TERMINATED );
					}
					break;
				}
				setState(1739);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LINES) {
					{
					setState(1733);
					match(LINES);
					setState(1735); 
					_errHandler.sync(this);
					_la = _input.LA(1);
					do {
						{
						{
						setState(1734);
						selectLinesInto();
						}
						}
						setState(1737); 
						_errHandler.sync(this);
						_la = _input.LA(1);
					} while ( _la==STARTING || _la==TERMINATED );
					}
				}

				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectFieldsIntoContext extends ParserRuleContext {
		public Token terminationField;
		public Token enclosion;
		public Token escaping;
		public TerminalNode TERMINATED() { return getToken(MySqlParser.TERMINATED, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ENCLOSED() { return getToken(MySqlParser.ENCLOSED, 0); }
		public TerminalNode OPTIONALLY() { return getToken(MySqlParser.OPTIONALLY, 0); }
		public TerminalNode ESCAPED() { return getToken(MySqlParser.ESCAPED, 0); }
		public SelectFieldsIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectFieldsInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectFieldsInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectFieldsInto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectFieldsInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectFieldsIntoContext selectFieldsInto() throws RecognitionException {
		SelectFieldsIntoContext _localctx = new SelectFieldsIntoContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_selectFieldsInto);
		int _la;
		try {
			setState(1755);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TERMINATED:
				enterOuterAlt(_localctx, 1);
				{
				setState(1743);
				match(TERMINATED);
				setState(1744);
				match(BY);
				setState(1745);
				((SelectFieldsIntoContext)_localctx).terminationField = match(STRING_LITERAL);
				}
				break;
			case ENCLOSED:
			case OPTIONALLY:
				enterOuterAlt(_localctx, 2);
				{
				setState(1747);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OPTIONALLY) {
					{
					setState(1746);
					match(OPTIONALLY);
					}
				}

				setState(1749);
				match(ENCLOSED);
				setState(1750);
				match(BY);
				setState(1751);
				((SelectFieldsIntoContext)_localctx).enclosion = match(STRING_LITERAL);
				}
				break;
			case ESCAPED:
				enterOuterAlt(_localctx, 3);
				{
				setState(1752);
				match(ESCAPED);
				setState(1753);
				match(BY);
				setState(1754);
				((SelectFieldsIntoContext)_localctx).escaping = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SelectLinesIntoContext extends ParserRuleContext {
		public Token starting;
		public Token terminationLine;
		public TerminalNode STARTING() { return getToken(MySqlParser.STARTING, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode TERMINATED() { return getToken(MySqlParser.TERMINATED, 0); }
		public SelectLinesIntoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selectLinesInto; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSelectLinesInto(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSelectLinesInto(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSelectLinesInto(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SelectLinesIntoContext selectLinesInto() throws RecognitionException {
		SelectLinesIntoContext _localctx = new SelectLinesIntoContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_selectLinesInto);
		try {
			setState(1763);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STARTING:
				enterOuterAlt(_localctx, 1);
				{
				setState(1757);
				match(STARTING);
				setState(1758);
				match(BY);
				setState(1759);
				((SelectLinesIntoContext)_localctx).starting = match(STRING_LITERAL);
				}
				break;
			case TERMINATED:
				enterOuterAlt(_localctx, 2);
				{
				setState(1760);
				match(TERMINATED);
				setState(1761);
				match(BY);
				setState(1762);
				((SelectLinesIntoContext)_localctx).terminationLine = match(STRING_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FromClauseContext extends ParserRuleContext {
		public ExpressionContext whereExpr;
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TableSourcesContext tableSources() {
			return getRuleContext(TableSourcesContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fromClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFromClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFromClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFromClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FromClauseContext fromClause() throws RecognitionException {
		FromClauseContext _localctx = new FromClauseContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_fromClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1767);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1765);
				match(FROM);
				setState(1766);
				tableSources();
				}
			}

			setState(1771);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1769);
				match(WHERE);
				setState(1770);
				((FromClauseContext)_localctx).whereExpr = expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByClauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<GroupByItemContext> groupByItem() {
			return getRuleContexts(GroupByItemContext.class);
		}
		public GroupByItemContext groupByItem(int i) {
			return getRuleContext(GroupByItemContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode WITH() { return getToken(MySqlParser.WITH, 0); }
		public TerminalNode ROLLUP() { return getToken(MySqlParser.ROLLUP, 0); }
		public GroupByClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGroupByClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGroupByClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGroupByClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByClauseContext groupByClause() throws RecognitionException {
		GroupByClauseContext _localctx = new GroupByClauseContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_groupByClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1773);
			match(GROUP);
			setState(1774);
			match(BY);
			setState(1775);
			groupByItem();
			setState(1780);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1776);
				match(COMMA);
				setState(1777);
				groupByItem();
				}
				}
				setState(1782);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1785);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1783);
				match(WITH);
				setState(1784);
				match(ROLLUP);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HavingClauseContext extends ParserRuleContext {
		public ExpressionContext havingExpr;
		public TerminalNode HAVING() { return getToken(MySqlParser.HAVING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_havingClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHavingClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHavingClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHavingClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HavingClauseContext havingClause() throws RecognitionException {
		HavingClauseContext _localctx = new HavingClauseContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_havingClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1787);
			match(HAVING);
			setState(1788);
			((HavingClauseContext)_localctx).havingExpr = expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowClauseContext extends ParserRuleContext {
		public TerminalNode WINDOW() { return getToken(MySqlParser.WINDOW, 0); }
		public List<WindowNameContext> windowName() {
			return getRuleContexts(WindowNameContext.class);
		}
		public WindowNameContext windowName(int i) {
			return getRuleContext(WindowNameContext.class,i);
		}
		public List<TerminalNode> AS() { return getTokens(MySqlParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(MySqlParser.AS, i);
		}
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<WindowSpecContext> windowSpec() {
			return getRuleContexts(WindowSpecContext.class);
		}
		public WindowSpecContext windowSpec(int i) {
			return getRuleContext(WindowSpecContext.class,i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWindowClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWindowClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWindowClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowClauseContext windowClause() throws RecognitionException {
		WindowClauseContext _localctx = new WindowClauseContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_windowClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1790);
			match(WINDOW);
			setState(1791);
			windowName();
			setState(1792);
			match(AS);
			setState(1793);
			match(LR_BRACKET);
			setState(1794);
			windowSpec();
			setState(1795);
			match(RR_BRACKET);
			setState(1805);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1796);
				match(COMMA);
				setState(1797);
				windowName();
				setState(1798);
				match(AS);
				setState(1799);
				match(LR_BRACKET);
				setState(1800);
				windowSpec();
				setState(1801);
				match(RR_BRACKET);
				}
				}
				setState(1807);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class GroupByItemContext extends ParserRuleContext {
		public Token order;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public GroupByItemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_groupByItem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGroupByItem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGroupByItem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGroupByItem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final GroupByItemContext groupByItem() throws RecognitionException {
		GroupByItemContext _localctx = new GroupByItemContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_groupByItem);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1808);
			expression(0);
			setState(1810);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(1809);
				((GroupByItemContext)_localctx).order = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((GroupByItemContext)_localctx).order = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseContext extends ParserRuleContext {
		public LimitClauseAtomContext offset;
		public LimitClauseAtomContext limit;
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public TerminalNode OFFSET() { return getToken(MySqlParser.OFFSET, 0); }
		public List<LimitClauseAtomContext> limitClauseAtom() {
			return getRuleContexts(LimitClauseAtomContext.class);
		}
		public LimitClauseAtomContext limitClauseAtom(int i) {
			return getRuleContext(LimitClauseAtomContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public LimitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLimitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLimitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLimitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseContext limitClause() throws RecognitionException {
		LimitClauseContext _localctx = new LimitClauseContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_limitClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1812);
			match(LIMIT);
			setState(1823);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,268,_ctx) ) {
			case 1:
				{
				setState(1816);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,267,_ctx) ) {
				case 1:
					{
					setState(1813);
					((LimitClauseContext)_localctx).offset = limitClauseAtom();
					setState(1814);
					match(COMMA);
					}
					break;
				}
				setState(1818);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				}
				break;
			case 2:
				{
				setState(1819);
				((LimitClauseContext)_localctx).limit = limitClauseAtom();
				setState(1820);
				match(OFFSET);
				setState(1821);
				((LimitClauseContext)_localctx).offset = limitClauseAtom();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LimitClauseAtomContext extends ParserRuleContext {
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public LimitClauseAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_limitClauseAtom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLimitClauseAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLimitClauseAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLimitClauseAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LimitClauseAtomContext limitClauseAtom() throws RecognitionException {
		LimitClauseAtomContext _localctx = new LimitClauseAtomContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_limitClauseAtom);
		try {
			setState(1828);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(1825);
				decimalLiteral();
				}
				break;
			case LOCAL_ID:
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(1826);
				mysqlVariable();
				}
				break;
			case BUCKETS:
			case CURRENT:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(1827);
				simpleId();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowStatementContext extends ParserRuleContext {
		public ShowStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showStatement; }
	 
		public ShowStatementContext() { }
		public void copyFrom(ShowStatementContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class ShowOpenTablesContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public ShowOpenTablesContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowOpenTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowOpenTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowOpenTables(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowGlobalInfoContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public ShowGlobalInfoClauseContext showGlobalInfoClause() {
			return getRuleContext(ShowGlobalInfoClauseContext.class,0);
		}
		public ShowGlobalInfoContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowGlobalInfo(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowGlobalInfo(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowGlobalInfo(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateFullIdObjectContext extends ShowStatementContext {
		public Token namedEntity;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode TRIGGER() { return getToken(MySqlParser.TRIGGER, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public ShowCreateFullIdObjectContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCreateFullIdObject(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCreateFullIdObject(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowCreateFullIdObject(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateUserContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public ShowCreateUserContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCreateUser(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCreateUser(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowCreateUser(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public ShowErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowErrors(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowErrors(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowErrors(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCountErrorsContext extends ShowStatementContext {
		public Token errorFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public ShowCountErrorsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCountErrors(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCountErrors(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowCountErrors(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowObjectFilterContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public ShowCommonEntityContext showCommonEntity() {
			return getRuleContext(ShowCommonEntityContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowObjectFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowObjectFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowObjectFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowObjectFilter(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowCreateDbContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CREATE() { return getToken(MySqlParser.CREATE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public IfNotExistsContext ifNotExists() {
			return getRuleContext(IfNotExistsContext.class,0);
		}
		public ShowCreateDbContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCreateDb(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCreateDb(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowCreateDb(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowEngineContext extends ShowStatementContext {
		public Token engineOption;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode MUTEX() { return getToken(MySqlParser.MUTEX, 0); }
		public ShowEngineContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowEngine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowEngine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowEngine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowSchemaFilterContext extends ShowStatementContext {
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public ShowSchemaEntityContext showSchemaEntity() {
			return getRuleContext(ShowSchemaEntityContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public ShowSchemaFilterContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowSchemaFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowSchemaFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowSchemaFilter(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowIndexesContext extends ShowStatementContext {
		public Token indexFormat;
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode INDEX() { return getToken(MySqlParser.INDEX, 0); }
		public TerminalNode INDEXES() { return getToken(MySqlParser.INDEXES, 0); }
		public TerminalNode KEYS() { return getToken(MySqlParser.KEYS, 0); }
		public List<TerminalNode> FROM() { return getTokens(MySqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(MySqlParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(MySqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(MySqlParser.IN, i);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ShowIndexesContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowIndexes(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowIndexes(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowIndexes(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowLogEventsContext extends ShowStatementContext {
		public Token logFormat;
		public Token filename;
		public DecimalLiteralContext fromPosition;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode BINLOG() { return getToken(MySqlParser.BINLOG, 0); }
		public TerminalNode RELAYLOG() { return getToken(MySqlParser.RELAYLOG, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public ShowLogEventsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowLogEvents(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowLogEvents(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowLogEvents(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowMasterLogsContext extends ShowStatementContext {
		public Token logFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public ShowMasterLogsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowMasterLogs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowMasterLogs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowMasterLogs(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowGrantsContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode GRANTS() { return getToken(MySqlParser.GRANTS, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public ShowGrantsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowGrants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowGrants(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowGrants(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowSlaveStatusContext extends ShowStatementContext {
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode CHANNEL() { return getToken(MySqlParser.CHANNEL, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public ShowSlaveStatusContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowSlaveStatus(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowSlaveStatus(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowSlaveStatus(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowRoutineContext extends ShowStatementContext {
		public Token routine;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode CODE() { return getToken(MySqlParser.CODE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public ShowRoutineContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowRoutine(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowRoutine(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowRoutine(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowProfileContext extends ShowStatementContext {
		public DecimalLiteralContext queryCount;
		public DecimalLiteralContext offset;
		public DecimalLiteralContext rowCount;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TerminalNode PROFILE() { return getToken(MySqlParser.PROFILE, 0); }
		public List<ShowProfileTypeContext> showProfileType() {
			return getRuleContexts(ShowProfileTypeContext.class);
		}
		public ShowProfileTypeContext showProfileType(int i) {
			return getRuleContext(ShowProfileTypeContext.class,i);
		}
		public TerminalNode LIMIT() { return getToken(MySqlParser.LIMIT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public ShowProfileContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowProfile(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowProfile(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowProfile(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ShowColumnsContext extends ShowStatementContext {
		public Token columnsFormat;
		public Token tableFormat;
		public Token schemaFormat;
		public TerminalNode SHOW() { return getToken(MySqlParser.SHOW, 0); }
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public List<TerminalNode> FROM() { return getTokens(MySqlParser.FROM); }
		public TerminalNode FROM(int i) {
			return getToken(MySqlParser.FROM, i);
		}
		public List<TerminalNode> IN() { return getTokens(MySqlParser.IN); }
		public TerminalNode IN(int i) {
			return getToken(MySqlParser.IN, i);
		}
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public ShowFilterContext showFilter() {
			return getRuleContext(ShowFilterContext.class,0);
		}
		public ShowColumnsContext(ShowStatementContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowColumns(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowColumns(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowColumns(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowStatementContext showStatement() throws RecognitionException {
		ShowStatementContext _localctx = new ShowStatementContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_showStatement);
		int _la;
		try {
			setState(1983);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
			case 1:
				_localctx = new ShowMasterLogsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(1830);
				match(SHOW);
				setState(1831);
				((ShowMasterLogsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==MASTER) ) {
					((ShowMasterLogsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1832);
				match(LOGS);
				}
				break;
			case 2:
				_localctx = new ShowLogEventsContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(1833);
				match(SHOW);
				setState(1834);
				((ShowLogEventsContext)_localctx).logFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINLOG || _la==RELAYLOG) ) {
					((ShowLogEventsContext)_localctx).logFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1835);
				match(EVENTS);
				setState(1838);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(1836);
					match(IN);
					setState(1837);
					((ShowLogEventsContext)_localctx).filename = match(STRING_LITERAL);
					}
				}

				setState(1842);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM) {
					{
					setState(1840);
					match(FROM);
					setState(1841);
					((ShowLogEventsContext)_localctx).fromPosition = decimalLiteral();
					}
				}

				setState(1851);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(1844);
					match(LIMIT);
					setState(1848);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,272,_ctx) ) {
					case 1:
						{
						setState(1845);
						((ShowLogEventsContext)_localctx).offset = decimalLiteral();
						setState(1846);
						match(COMMA);
						}
						break;
					}
					setState(1850);
					((ShowLogEventsContext)_localctx).rowCount = decimalLiteral();
					}
				}

				}
				break;
			case 3:
				_localctx = new ShowObjectFilterContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(1853);
				match(SHOW);
				setState(1854);
				showCommonEntity();
				setState(1856);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(1855);
					showFilter();
					}
				}

				}
				break;
			case 4:
				_localctx = new ShowColumnsContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(1858);
				match(SHOW);
				setState(1860);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(1859);
					match(FULL);
					}
				}

				setState(1862);
				((ShowColumnsContext)_localctx).columnsFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==COLUMNS || _la==FIELDS) ) {
					((ShowColumnsContext)_localctx).columnsFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1863);
				((ShowColumnsContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowColumnsContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1864);
				tableName();
				setState(1867);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(1865);
					((ShowColumnsContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowColumnsContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1866);
					uid();
					}
				}

				setState(1870);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(1869);
					showFilter();
					}
				}

				}
				break;
			case 5:
				_localctx = new ShowCreateDbContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(1872);
				match(SHOW);
				setState(1873);
				match(CREATE);
				setState(1874);
				((ShowCreateDbContext)_localctx).schemaFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==DATABASE || _la==SCHEMA) ) {
					((ShowCreateDbContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1876);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,278,_ctx) ) {
				case 1:
					{
					setState(1875);
					ifNotExists();
					}
					break;
				}
				setState(1878);
				uid();
				}
				break;
			case 6:
				_localctx = new ShowCreateFullIdObjectContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(1879);
				match(SHOW);
				setState(1880);
				match(CREATE);
				setState(1881);
				((ShowCreateFullIdObjectContext)_localctx).namedEntity = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 127)) & ~0x3f) == 0 && ((1L << (_la - 127)) & ((1L << (PROCEDURE - 127)) | (1L << (TABLE - 127)) | (1L << (TRIGGER - 127)))) != 0) || _la==EVENT || _la==FUNCTION || _la==VIEW) ) {
					((ShowCreateFullIdObjectContext)_localctx).namedEntity = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1882);
				fullId();
				}
				break;
			case 7:
				_localctx = new ShowCreateUserContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(1883);
				match(SHOW);
				setState(1884);
				match(CREATE);
				setState(1885);
				match(USER);
				setState(1886);
				userName();
				}
				break;
			case 8:
				_localctx = new ShowEngineContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(1887);
				match(SHOW);
				setState(1888);
				match(ENGINE);
				setState(1889);
				engineName();
				setState(1890);
				((ShowEngineContext)_localctx).engineOption = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==MUTEX || _la==STATUS) ) {
					((ShowEngineContext)_localctx).engineOption = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 9:
				_localctx = new ShowGlobalInfoContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(1892);
				match(SHOW);
				setState(1893);
				showGlobalInfoClause();
				}
				break;
			case 10:
				_localctx = new ShowErrorsContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(1894);
				match(SHOW);
				setState(1895);
				((ShowErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1903);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIMIT) {
					{
					setState(1896);
					match(LIMIT);
					setState(1900);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,279,_ctx) ) {
					case 1:
						{
						setState(1897);
						((ShowErrorsContext)_localctx).offset = decimalLiteral();
						setState(1898);
						match(COMMA);
						}
						break;
					}
					setState(1902);
					((ShowErrorsContext)_localctx).rowCount = decimalLiteral();
					}
				}

				}
				break;
			case 11:
				_localctx = new ShowCountErrorsContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(1905);
				match(SHOW);
				setState(1906);
				match(COUNT);
				setState(1907);
				match(LR_BRACKET);
				setState(1908);
				match(STAR);
				setState(1909);
				match(RR_BRACKET);
				setState(1910);
				((ShowCountErrorsContext)_localctx).errorFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ERRORS || _la==WARNINGS) ) {
					((ShowCountErrorsContext)_localctx).errorFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 12:
				_localctx = new ShowSchemaFilterContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(1911);
				match(SHOW);
				setState(1912);
				showSchemaEntity();
				setState(1915);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(1913);
					((ShowSchemaFilterContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowSchemaFilterContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1914);
					uid();
					}
				}

				setState(1918);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(1917);
					showFilter();
					}
				}

				}
				break;
			case 13:
				_localctx = new ShowRoutineContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(1920);
				match(SHOW);
				setState(1921);
				((ShowRoutineContext)_localctx).routine = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==PROCEDURE || _la==FUNCTION) ) {
					((ShowRoutineContext)_localctx).routine = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1922);
				match(CODE);
				setState(1923);
				fullId();
				}
				break;
			case 14:
				_localctx = new ShowGrantsContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(1924);
				match(SHOW);
				setState(1925);
				match(GRANTS);
				setState(1928);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(1926);
					match(FOR);
					setState(1927);
					userName();
					}
				}

				}
				break;
			case 15:
				_localctx = new ShowIndexesContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(1930);
				match(SHOW);
				setState(1931);
				((ShowIndexesContext)_localctx).indexFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==INDEX || _la==KEYS || _la==INDEXES) ) {
					((ShowIndexesContext)_localctx).indexFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1932);
				((ShowIndexesContext)_localctx).tableFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FROM || _la==IN) ) {
					((ShowIndexesContext)_localctx).tableFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1933);
				tableName();
				setState(1936);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(1934);
					((ShowIndexesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowIndexesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1935);
					uid();
					}
				}

				setState(1940);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHERE) {
					{
					setState(1938);
					match(WHERE);
					setState(1939);
					expression(0);
					}
				}

				}
				break;
			case 16:
				_localctx = new ShowOpenTablesContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(1942);
				match(SHOW);
				setState(1943);
				match(OPEN);
				setState(1944);
				match(TABLES);
				setState(1947);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FROM || _la==IN) {
					{
					setState(1945);
					((ShowOpenTablesContext)_localctx).schemaFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==FROM || _la==IN) ) {
						((ShowOpenTablesContext)_localctx).schemaFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(1946);
					uid();
					}
				}

				setState(1950);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE || _la==WHERE) {
					{
					setState(1949);
					showFilter();
					}
				}

				}
				break;
			case 17:
				_localctx = new ShowProfileContext(_localctx);
				enterOuterAlt(_localctx, 17);
				{
				setState(1952);
				match(SHOW);
				setState(1953);
				match(PROFILE);
				setState(1954);
				showProfileType();
				setState(1959);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1955);
					match(COMMA);
					setState(1956);
					showProfileType();
					}
					}
					setState(1961);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1965);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(1962);
					match(FOR);
					setState(1963);
					match(QUERY);
					setState(1964);
					((ShowProfileContext)_localctx).queryCount = decimalLiteral();
					}
				}

				{
				setState(1967);
				match(LIMIT);
				setState(1971);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
				case 1:
					{
					setState(1968);
					((ShowProfileContext)_localctx).offset = decimalLiteral();
					setState(1969);
					match(COMMA);
					}
					break;
				}
				setState(1973);
				((ShowProfileContext)_localctx).rowCount = decimalLiteral();
				}
				}
				break;
			case 18:
				_localctx = new ShowSlaveStatusContext(_localctx);
				enterOuterAlt(_localctx, 18);
				{
				setState(1975);
				match(SHOW);
				setState(1976);
				match(SLAVE);
				setState(1977);
				match(STATUS);
				setState(1981);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(1978);
					match(FOR);
					setState(1979);
					match(CHANNEL);
					setState(1980);
					match(STRING_LITERAL);
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableClauseContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(MySqlParser.GLOBAL_ID, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public List<TerminalNode> AT_SIGN() { return getTokens(MySqlParser.AT_SIGN); }
		public TerminalNode AT_SIGN(int i) {
			return getToken(MySqlParser.AT_SIGN, i);
		}
		public VariableClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variableClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterVariableClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitVariableClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitVariableClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableClauseContext variableClause() throws RecognitionException {
		VariableClauseContext _localctx = new VariableClauseContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_variableClause);
		int _la;
		try {
			setState(1995);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LOCAL_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1985);
				match(LOCAL_ID);
				}
				break;
			case GLOBAL_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(1986);
				match(GLOBAL_ID);
				}
				break;
			case BUCKETS:
			case CURRENT:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(1992);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
				case 1:
					{
					setState(1989);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AT_SIGN) {
						{
						setState(1987);
						match(AT_SIGN);
						setState(1988);
						match(AT_SIGN);
						}
					}

					setState(1991);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==LOCAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(1994);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowCommonEntityContext extends ParserRuleContext {
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode COLLATION() { return getToken(MySqlParser.COLLATION, 0); }
		public TerminalNode DATABASES() { return getToken(MySqlParser.DATABASES, 0); }
		public TerminalNode SCHEMAS() { return getToken(MySqlParser.SCHEMAS, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode PROCEDURE() { return getToken(MySqlParser.PROCEDURE, 0); }
		public TerminalNode VARIABLES() { return getToken(MySqlParser.VARIABLES, 0); }
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public ShowCommonEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showCommonEntity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowCommonEntity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowCommonEntity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowCommonEntity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowCommonEntityContext showCommonEntity() throws RecognitionException {
		ShowCommonEntityContext _localctx = new ShowCommonEntityContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_showCommonEntity);
		int _la;
		try {
			setState(2010);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CHARACTER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1997);
				match(CHARACTER);
				setState(1998);
				match(SET);
				}
				break;
			case COLLATION:
				enterOuterAlt(_localctx, 2);
				{
				setState(1999);
				match(COLLATION);
				}
				break;
			case DATABASES:
				enterOuterAlt(_localctx, 3);
				{
				setState(2000);
				match(DATABASES);
				}
				break;
			case SCHEMAS:
				enterOuterAlt(_localctx, 4);
				{
				setState(2001);
				match(SCHEMAS);
				}
				break;
			case FUNCTION:
				enterOuterAlt(_localctx, 5);
				{
				setState(2002);
				match(FUNCTION);
				setState(2003);
				match(STATUS);
				}
				break;
			case PROCEDURE:
				enterOuterAlt(_localctx, 6);
				{
				setState(2004);
				match(PROCEDURE);
				setState(2005);
				match(STATUS);
				}
				break;
			case GLOBAL:
			case SESSION:
			case STATUS:
			case VARIABLES:
				enterOuterAlt(_localctx, 7);
				{
				setState(2007);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==GLOBAL || _la==SESSION) {
					{
					setState(2006);
					_la = _input.LA(1);
					if ( !(_la==GLOBAL || _la==SESSION) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(2009);
				_la = _input.LA(1);
				if ( !(_la==STATUS || _la==VARIABLES) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowFilterContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode WHERE() { return getToken(MySqlParser.WHERE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ShowFilterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showFilter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowFilter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowFilter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowFilter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowFilterContext showFilter() throws RecognitionException {
		ShowFilterContext _localctx = new ShowFilterContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_showFilter);
		try {
			setState(2016);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIKE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2012);
				match(LIKE);
				setState(2013);
				match(STRING_LITERAL);
				}
				break;
			case WHERE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2014);
				match(WHERE);
				setState(2015);
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowGlobalInfoClauseContext extends ParserRuleContext {
		public TerminalNode ENGINES() { return getToken(MySqlParser.ENGINES, 0); }
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode PLUGINS() { return getToken(MySqlParser.PLUGINS, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public TerminalNode PROCESSLIST() { return getToken(MySqlParser.PROCESSLIST, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode PROFILES() { return getToken(MySqlParser.PROFILES, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode HOSTS() { return getToken(MySqlParser.HOSTS, 0); }
		public TerminalNode AUTHORS() { return getToken(MySqlParser.AUTHORS, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(MySqlParser.CONTRIBUTORS, 0); }
		public ShowGlobalInfoClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showGlobalInfoClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowGlobalInfoClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowGlobalInfoClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowGlobalInfoClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowGlobalInfoClauseContext showGlobalInfoClause() throws RecognitionException {
		ShowGlobalInfoClauseContext _localctx = new ShowGlobalInfoClauseContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_showGlobalInfoClause);
		int _la;
		try {
			setState(2035);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ENGINES:
			case STORAGE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2019);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==STORAGE) {
					{
					setState(2018);
					match(STORAGE);
					}
				}

				setState(2021);
				match(ENGINES);
				}
				break;
			case MASTER:
				enterOuterAlt(_localctx, 2);
				{
				setState(2022);
				match(MASTER);
				setState(2023);
				match(STATUS);
				}
				break;
			case PLUGINS:
				enterOuterAlt(_localctx, 3);
				{
				setState(2024);
				match(PLUGINS);
				}
				break;
			case PRIVILEGES:
				enterOuterAlt(_localctx, 4);
				{
				setState(2025);
				match(PRIVILEGES);
				}
				break;
			case FULL:
			case PROCESSLIST:
				enterOuterAlt(_localctx, 5);
				{
				setState(2027);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(2026);
					match(FULL);
					}
				}

				setState(2029);
				match(PROCESSLIST);
				}
				break;
			case PROFILES:
				enterOuterAlt(_localctx, 6);
				{
				setState(2030);
				match(PROFILES);
				}
				break;
			case SLAVE:
				enterOuterAlt(_localctx, 7);
				{
				setState(2031);
				match(SLAVE);
				setState(2032);
				match(HOSTS);
				}
				break;
			case AUTHORS:
				enterOuterAlt(_localctx, 8);
				{
				setState(2033);
				match(AUTHORS);
				}
				break;
			case CONTRIBUTORS:
				enterOuterAlt(_localctx, 9);
				{
				setState(2034);
				match(CONTRIBUTORS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowSchemaEntityContext extends ParserRuleContext {
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode TABLE() { return getToken(MySqlParser.TABLE, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode TRIGGERS() { return getToken(MySqlParser.TRIGGERS, 0); }
		public ShowSchemaEntityContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showSchemaEntity; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowSchemaEntity(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowSchemaEntity(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowSchemaEntity(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowSchemaEntityContext showSchemaEntity() throws RecognitionException {
		ShowSchemaEntityContext _localctx = new ShowSchemaEntityContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_showSchemaEntity);
		int _la;
		try {
			setState(2045);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EVENTS:
				enterOuterAlt(_localctx, 1);
				{
				setState(2037);
				match(EVENTS);
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2038);
				match(TABLE);
				setState(2039);
				match(STATUS);
				}
				break;
			case FULL:
			case TABLES:
				enterOuterAlt(_localctx, 3);
				{
				setState(2041);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FULL) {
					{
					setState(2040);
					match(FULL);
					}
				}

				setState(2043);
				match(TABLES);
				}
				break;
			case TRIGGERS:
				enterOuterAlt(_localctx, 4);
				{
				setState(2044);
				match(TRIGGERS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ShowProfileTypeContext extends ParserRuleContext {
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode BLOCK() { return getToken(MySqlParser.BLOCK, 0); }
		public TerminalNode IO() { return getToken(MySqlParser.IO, 0); }
		public TerminalNode CONTEXT() { return getToken(MySqlParser.CONTEXT, 0); }
		public TerminalNode SWITCHES() { return getToken(MySqlParser.SWITCHES, 0); }
		public TerminalNode CPU() { return getToken(MySqlParser.CPU, 0); }
		public TerminalNode IPC() { return getToken(MySqlParser.IPC, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode PAGE() { return getToken(MySqlParser.PAGE, 0); }
		public TerminalNode FAULTS() { return getToken(MySqlParser.FAULTS, 0); }
		public TerminalNode SOURCE() { return getToken(MySqlParser.SOURCE, 0); }
		public TerminalNode SWAPS() { return getToken(MySqlParser.SWAPS, 0); }
		public ShowProfileTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_showProfileType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterShowProfileType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitShowProfileType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitShowProfileType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ShowProfileTypeContext showProfileType() throws RecognitionException {
		ShowProfileTypeContext _localctx = new ShowProfileTypeContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_showProfileType);
		try {
			setState(2059);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2047);
				match(ALL);
				}
				break;
			case BLOCK:
				enterOuterAlt(_localctx, 2);
				{
				setState(2048);
				match(BLOCK);
				setState(2049);
				match(IO);
				}
				break;
			case CONTEXT:
				enterOuterAlt(_localctx, 3);
				{
				setState(2050);
				match(CONTEXT);
				setState(2051);
				match(SWITCHES);
				}
				break;
			case CPU:
				enterOuterAlt(_localctx, 4);
				{
				setState(2052);
				match(CPU);
				}
				break;
			case IPC:
				enterOuterAlt(_localctx, 5);
				{
				setState(2053);
				match(IPC);
				}
				break;
			case MEMORY:
				enterOuterAlt(_localctx, 6);
				{
				setState(2054);
				match(MEMORY);
				}
				break;
			case PAGE:
				enterOuterAlt(_localctx, 7);
				{
				setState(2055);
				match(PAGE);
				setState(2056);
				match(FAULTS);
				}
				break;
			case SOURCE:
				enterOuterAlt(_localctx, 8);
				{
				setState(2057);
				match(SOURCE);
				}
				break;
			case SWAPS:
				enterOuterAlt(_localctx, 9);
				{
				setState(2058);
				match(SWAPS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public UidContext column;
		public Token pattern;
		public TableNameContext tableName() {
			return getRuleContext(TableNameContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(MySqlParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(MySqlParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public SimpleDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleDescribeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleDescribeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleDescribeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleDescribeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleDescribeStatementContext simpleDescribeStatement() throws RecognitionException {
		SimpleDescribeStatementContext _localctx = new SimpleDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_simpleDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2061);
			((SimpleDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				((SimpleDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2062);
			tableName();
			setState(2065);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
			case 1:
				{
				setState(2063);
				((SimpleDescribeStatementContext)_localctx).column = uid();
				}
				break;
			case 2:
				{
				setState(2064);
				((SimpleDescribeStatementContext)_localctx).pattern = match(STRING_LITERAL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullDescribeStatementContext extends ParserRuleContext {
		public Token command;
		public Token formatType;
		public Token formatValue;
		public DescribeObjectClauseContext describeObjectClause() {
			return getRuleContext(DescribeObjectClauseContext.class,0);
		}
		public TerminalNode EXPLAIN() { return getToken(MySqlParser.EXPLAIN, 0); }
		public TerminalNode DESCRIBE() { return getToken(MySqlParser.DESCRIBE, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode FORMAT() { return getToken(MySqlParser.FORMAT, 0); }
		public TerminalNode TRADITIONAL() { return getToken(MySqlParser.TRADITIONAL, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public FullDescribeStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullDescribeStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullDescribeStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullDescribeStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFullDescribeStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullDescribeStatementContext fullDescribeStatement() throws RecognitionException {
		FullDescribeStatementContext _localctx = new FullDescribeStatementContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_fullDescribeStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2067);
			((FullDescribeStatementContext)_localctx).command = _input.LT(1);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DESC) | (1L << DESCRIBE) | (1L << EXPLAIN))) != 0)) ) {
				((FullDescribeStatementContext)_localctx).command = (Token)_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2071);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) {
				{
				setState(2068);
				((FullDescribeStatementContext)_localctx).formatType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==EXTENDED || _la==PARTITIONS || _la==FORMAT) ) {
					((FullDescribeStatementContext)_localctx).formatType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2069);
				match(EQUAL_SYMBOL);
				setState(2070);
				((FullDescribeStatementContext)_localctx).formatValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || _la==TRADITIONAL) ) {
					((FullDescribeStatementContext)_localctx).formatValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2073);
			describeObjectClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HelpStatementContext extends ParserRuleContext {
		public TerminalNode HELP() { return getToken(MySqlParser.HELP, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public HelpStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_helpStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHelpStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHelpStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHelpStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HelpStatementContext helpStatement() throws RecognitionException {
		HelpStatementContext _localctx = new HelpStatementContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_helpStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2075);
			match(HELP);
			setState(2076);
			match(STRING_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UseStatementContext extends ParserRuleContext {
		public TerminalNode USE() { return getToken(MySqlParser.USE, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public UseStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_useStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUseStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUseStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUseStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UseStatementContext useStatement() throws RecognitionException {
		UseStatementContext _localctx = new UseStatementContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_useStatement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2078);
			match(USE);
			setState(2079);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalStatementContext extends ParserRuleContext {
		public TerminalNode SIGNAL() { return getToken(MySqlParser.SIGNAL, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<SignalConditionInformationContext> signalConditionInformation() {
			return getRuleContexts(SignalConditionInformationContext.class);
		}
		public SignalConditionInformationContext signalConditionInformation(int i) {
			return getRuleContext(SignalConditionInformationContext.class,i);
		}
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public SignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSignalStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSignalStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSignalStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalStatementContext signalStatement() throws RecognitionException {
		SignalStatementContext _localctx = new SignalStatementContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_signalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2081);
			match(SIGNAL);
			setState(2089);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQLSTATE:
				{
				{
				setState(2082);
				match(SQLSTATE);
				setState(2084);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(2083);
					match(VALUE);
					}
				}

				setState(2086);
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				setState(2087);
				match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				setState(2088);
				match(REVERSE_QUOTE_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2100);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(2091);
				match(SET);
				setState(2092);
				signalConditionInformation();
				setState(2097);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2093);
					match(COMMA);
					setState(2094);
					signalConditionInformation();
					}
					}
					setState(2099);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ResignalStatementContext extends ParserRuleContext {
		public TerminalNode RESIGNAL() { return getToken(MySqlParser.RESIGNAL, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public List<SignalConditionInformationContext> signalConditionInformation() {
			return getRuleContexts(SignalConditionInformationContext.class);
		}
		public SignalConditionInformationContext signalConditionInformation(int i) {
			return getRuleContext(SignalConditionInformationContext.class,i);
		}
		public TerminalNode SQLSTATE() { return getToken(MySqlParser.SQLSTATE, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public ResignalStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_resignalStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterResignalStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitResignalStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitResignalStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ResignalStatementContext resignalStatement() throws RecognitionException {
		ResignalStatementContext _localctx = new ResignalStatementContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_resignalStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2102);
			match(RESIGNAL);
			setState(2110);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQLSTATE:
				{
				{
				setState(2103);
				match(SQLSTATE);
				setState(2105);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(2104);
					match(VALUE);
					}
				}

				setState(2107);
				stringLiteral();
				}
				}
				break;
			case ID:
				{
				setState(2108);
				match(ID);
				}
				break;
			case REVERSE_QUOTE_ID:
				{
				setState(2109);
				match(REVERSE_QUOTE_ID);
				}
				break;
			case EOF:
			case SET:
				break;
			default:
				break;
			}
			setState(2121);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(2112);
				match(SET);
				setState(2113);
				signalConditionInformation();
				setState(2118);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2114);
					match(COMMA);
					setState(2115);
					signalConditionInformation();
					}
					}
					setState(2120);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SignalConditionInformationContext extends ParserRuleContext {
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(MySqlParser.CLASS_ORIGIN, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(MySqlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(MySqlParser.MYSQL_ERRNO, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(MySqlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(MySqlParser.CATALOG_NAME, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(MySqlParser.SCHEMA_NAME, 0); }
		public TerminalNode TABLE_NAME() { return getToken(MySqlParser.TABLE_NAME, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(MySqlParser.COLUMN_NAME, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(MySqlParser.CURSOR_NAME, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode DECIMAL_LITERAL() { return getToken(MySqlParser.DECIMAL_LITERAL, 0); }
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public SignalConditionInformationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signalConditionInformation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSignalConditionInformation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSignalConditionInformation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSignalConditionInformation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SignalConditionInformationContext signalConditionInformation() throws RecognitionException {
		SignalConditionInformationContext _localctx = new SignalConditionInformationContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_signalConditionInformation);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2123);
			_la = _input.LA(1);
			if ( !(((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (CLASS_ORIGIN - 350)) | (1L << (COLUMN_NAME - 350)) | (1L << (CONSTRAINT_CATALOG - 350)) | (1L << (CONSTRAINT_SCHEMA - 350)) | (1L << (CONSTRAINT_NAME - 350)) | (1L << (CURSOR_NAME - 350)))) != 0) || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || _la==SUBCLASS_ORIGIN || _la==TABLE_NAME || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2124);
			match(EQUAL_SYMBOL);
			setState(2129);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,315,_ctx) ) {
			case 1:
				{
				setState(2125);
				stringLiteral();
				}
				break;
			case 2:
				{
				setState(2126);
				match(DECIMAL_LITERAL);
				}
				break;
			case 3:
				{
				setState(2127);
				mysqlVariable();
				}
				break;
			case 4:
				{
				setState(2128);
				simpleId();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiagnosticsStatementContext extends ParserRuleContext {
		public TerminalNode GET() { return getToken(MySqlParser.GET, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(MySqlParser.DIAGNOSTICS, 0); }
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode STACKED() { return getToken(MySqlParser.STACKED, 0); }
		public List<VariableClauseContext> variableClause() {
			return getRuleContexts(VariableClauseContext.class);
		}
		public VariableClauseContext variableClause(int i) {
			return getRuleContext(VariableClauseContext.class,i);
		}
		public List<TerminalNode> EQUAL_SYMBOL() { return getTokens(MySqlParser.EQUAL_SYMBOL); }
		public TerminalNode EQUAL_SYMBOL(int i) {
			return getToken(MySqlParser.EQUAL_SYMBOL, i);
		}
		public TerminalNode CONDITION() { return getToken(MySqlParser.CONDITION, 0); }
		public List<DiagnosticsConditionInformationNameContext> diagnosticsConditionInformationName() {
			return getRuleContexts(DiagnosticsConditionInformationNameContext.class);
		}
		public DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName(int i) {
			return getRuleContext(DiagnosticsConditionInformationNameContext.class,i);
		}
		public List<TerminalNode> NUMBER() { return getTokens(MySqlParser.NUMBER); }
		public TerminalNode NUMBER(int i) {
			return getToken(MySqlParser.NUMBER, i);
		}
		public List<TerminalNode> ROW_COUNT() { return getTokens(MySqlParser.ROW_COUNT); }
		public TerminalNode ROW_COUNT(int i) {
			return getToken(MySqlParser.ROW_COUNT, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DiagnosticsStatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diagnosticsStatement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDiagnosticsStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDiagnosticsStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDiagnosticsStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiagnosticsStatementContext diagnosticsStatement() throws RecognitionException {
		DiagnosticsStatementContext _localctx = new DiagnosticsStatementContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_diagnosticsStatement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2131);
			match(GET);
			setState(2133);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CURRENT || _la==STACKED) {
				{
				setState(2132);
				_la = _input.LA(1);
				if ( !(_la==CURRENT || _la==STACKED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2135);
			match(DIAGNOSTICS);
			setState(2167);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BUCKETS:
			case CURRENT:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case AT_SIGN:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case LOCAL_ID:
			case GLOBAL_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				{
				{
				setState(2136);
				variableClause();
				setState(2137);
				match(EQUAL_SYMBOL);
				setState(2138);
				_la = _input.LA(1);
				if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2146);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2139);
					match(COMMA);
					setState(2140);
					variableClause();
					setState(2141);
					match(EQUAL_SYMBOL);
					setState(2142);
					_la = _input.LA(1);
					if ( !(_la==NUMBER || _la==ROW_COUNT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(2148);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			case CONDITION:
				{
				{
				setState(2149);
				match(CONDITION);
				setState(2152);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ZERO_DECIMAL:
				case ONE_DECIMAL:
				case TWO_DECIMAL:
				case DECIMAL_LITERAL:
				case REAL_LITERAL:
					{
					setState(2150);
					decimalLiteral();
					}
					break;
				case BUCKETS:
				case CURRENT:
				case DATABASE:
				case DEFAULT:
				case DIAGNOSTICS:
				case EXCEPT:
				case GROUP:
				case IF:
				case IGNORED:
				case INSERT:
				case LEFT:
				case LOCKED:
				case MAXVALUE:
				case MINVALUE:
				case NUMBER:
				case OPTIONAL:
				case ORDER:
				case PRIMARY:
				case REPLACE:
				case RIGHT:
				case SCHEMA:
				case SKIP_:
				case STACKED:
				case DATE:
				case TIME:
				case TIMESTAMP:
				case DATETIME:
				case YEAR:
				case BINARY:
				case TEXT:
				case ENUM:
				case SERIAL:
				case JSON_ARRAY:
				case JSON_OBJECT:
				case JSON_QUOTE:
				case JSON_CONTAINS:
				case JSON_CONTAINS_PATH:
				case JSON_EXTRACT:
				case JSON_KEYS:
				case JSON_OVERLAPS:
				case JSON_SEARCH:
				case JSON_VALUE:
				case JSON_ARRAY_APPEND:
				case JSON_ARRAY_INSERT:
				case JSON_INSERT:
				case JSON_MERGE:
				case JSON_MERGE_PATCH:
				case JSON_MERGE_PRESERVE:
				case JSON_REMOVE:
				case JSON_REPLACE:
				case JSON_SET:
				case JSON_UNQUOTE:
				case JSON_DEPTH:
				case JSON_LENGTH:
				case JSON_TYPE:
				case JSON_VALID:
				case JSON_TABLE:
				case JSON_SCHEMA_VALID:
				case JSON_SCHEMA_VALIDATION_REPORT:
				case JSON_PRETTY:
				case JSON_STORAGE_FREE:
				case JSON_STORAGE_SIZE:
				case JSON_ARRAYAGG:
				case JSON_OBJECTAGG:
				case AVG:
				case BIT_AND:
				case BIT_OR:
				case BIT_XOR:
				case COUNT:
				case CUME_DIST:
				case DENSE_RANK:
				case FIRST_VALUE:
				case GROUP_CONCAT:
				case LAG:
				case LAST_VALUE:
				case LEAD:
				case MAX:
				case MIN:
				case NTILE:
				case NTH_VALUE:
				case PERCENT_RANK:
				case RANK:
				case ROW_NUMBER:
				case STD:
				case STDDEV:
				case STDDEV_POP:
				case STDDEV_SAMP:
				case SUM:
				case VAR_POP:
				case VAR_SAMP:
				case VARIANCE:
				case CURRENT_DATE:
				case CURRENT_TIME:
				case CURRENT_TIMESTAMP:
				case LOCALTIME:
				case CURDATE:
				case CURTIME:
				case DATE_ADD:
				case DATE_SUB:
				case LOCALTIMESTAMP:
				case NOW:
				case POSITION:
				case SUBSTR:
				case SUBSTRING:
				case SYSDATE:
				case TRIM:
				case UTC_DATE:
				case UTC_TIME:
				case UTC_TIMESTAMP:
				case ACCOUNT:
				case ACTION:
				case AFTER:
				case AGGREGATE:
				case ALGORITHM:
				case ANY:
				case AT:
				case AUTHORS:
				case AUTOCOMMIT:
				case AUTOEXTEND_SIZE:
				case AUTO_INCREMENT:
				case AVG_ROW_LENGTH:
				case BEGIN:
				case BINLOG:
				case BIT:
				case BLOCK:
				case BOOL:
				case BOOLEAN:
				case BTREE:
				case CACHE:
				case CASCADED:
				case CHAIN:
				case CHANGED:
				case CHANNEL:
				case CHECKSUM:
				case PAGE_CHECKSUM:
				case CIPHER:
				case CLASS_ORIGIN:
				case CLIENT:
				case CLOSE:
				case CLUSTERING:
				case COALESCE:
				case CODE:
				case COLUMNS:
				case COLUMN_FORMAT:
				case COLUMN_NAME:
				case COMMENT:
				case COMMIT:
				case COMPACT:
				case COMPLETION:
				case COMPRESSED:
				case COMPRESSION:
				case CONCURRENT:
				case CONNECT:
				case CONNECTION:
				case CONSISTENT:
				case CONSTRAINT_CATALOG:
				case CONSTRAINT_SCHEMA:
				case CONSTRAINT_NAME:
				case CONTAINS:
				case CONTEXT:
				case CONTRIBUTORS:
				case COPY:
				case CPU:
				case CYCLE:
				case CURSOR_NAME:
				case DATA:
				case DATAFILE:
				case DEALLOCATE:
				case DEFAULT_AUTH:
				case DEFINER:
				case DELAY_KEY_WRITE:
				case DES_KEY_FILE:
				case DIRECTORY:
				case DISABLE:
				case DISCARD:
				case DISK:
				case DO:
				case DUMPFILE:
				case DUPLICATE:
				case DYNAMIC:
				case ENABLE:
				case ENCRYPTION:
				case END:
				case ENDS:
				case ENGINE:
				case ENGINES:
				case ERROR:
				case ERRORS:
				case ESCAPE:
				case EVEN:
				case EVENT:
				case EVENTS:
				case EVERY:
				case EXCHANGE:
				case EXCLUSIVE:
				case EXPIRE:
				case EXPORT:
				case EXTENDED:
				case EXTENT_SIZE:
				case FAST:
				case FAULTS:
				case FIELDS:
				case FILE_BLOCK_SIZE:
				case FILTER:
				case FIRST:
				case FIXED:
				case FLUSH:
				case FOLLOWS:
				case FOUND:
				case FULL:
				case FUNCTION:
				case GENERAL:
				case GLOBAL:
				case GRANTS:
				case GROUP_REPLICATION:
				case HANDLER:
				case HASH:
				case HELP:
				case HOST:
				case HOSTS:
				case IDENTIFIED:
				case IGNORE_SERVER_IDS:
				case IMPORT:
				case INCREMENT:
				case INDEXES:
				case INITIAL_SIZE:
				case INPLACE:
				case INSERT_METHOD:
				case INSTALL:
				case INSTANCE:
				case INSTANT:
				case INVISIBLE:
				case INVOKER:
				case IO:
				case IO_THREAD:
				case IPC:
				case ISOLATION:
				case ISSUER:
				case JSON:
				case KEY_BLOCK_SIZE:
				case LANGUAGE:
				case LAST:
				case LEAVES:
				case LESS:
				case LEVEL:
				case LIST:
				case LOCAL:
				case LOGFILE:
				case LOGS:
				case MASTER:
				case MASTER_AUTO_POSITION:
				case MASTER_CONNECT_RETRY:
				case MASTER_DELAY:
				case MASTER_HEARTBEAT_PERIOD:
				case MASTER_HOST:
				case MASTER_LOG_FILE:
				case MASTER_LOG_POS:
				case MASTER_PASSWORD:
				case MASTER_PORT:
				case MASTER_RETRY_COUNT:
				case MASTER_SSL:
				case MASTER_SSL_CA:
				case MASTER_SSL_CAPATH:
				case MASTER_SSL_CERT:
				case MASTER_SSL_CIPHER:
				case MASTER_SSL_CRL:
				case MASTER_SSL_CRLPATH:
				case MASTER_SSL_KEY:
				case MASTER_TLS_VERSION:
				case MASTER_USER:
				case MAX_CONNECTIONS_PER_HOUR:
				case MAX_QUERIES_PER_HOUR:
				case MAX_ROWS:
				case MAX_SIZE:
				case MAX_UPDATES_PER_HOUR:
				case MAX_USER_CONNECTIONS:
				case MEDIUM:
				case MEMBER:
				case MERGE:
				case MESSAGE_TEXT:
				case MID:
				case MIGRATE:
				case MIN_ROWS:
				case MODE:
				case MODIFY:
				case MUTEX:
				case MYSQL:
				case MYSQL_ERRNO:
				case NAME:
				case NAMES:
				case NCHAR:
				case NEVER:
				case NEXT:
				case NO:
				case NOCACHE:
				case NOCOPY:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOWAIT:
				case NODEGROUP:
				case NONE:
				case ODBC:
				case OFFLINE:
				case OFFSET:
				case OF:
				case OJ:
				case OLD_PASSWORD:
				case ONE:
				case ONLINE:
				case ONLY:
				case OPEN:
				case OPTIMIZER_COSTS:
				case OPTIONS:
				case OWNER:
				case PACK_KEYS:
				case PAGE:
				case PARSER:
				case PARTIAL:
				case PARTITIONING:
				case PARTITIONS:
				case PASSWORD:
				case PHASE:
				case PLUGIN:
				case PLUGIN_DIR:
				case PLUGINS:
				case PORT:
				case PRECEDES:
				case PREPARE:
				case PRESERVE:
				case PREV:
				case PROCESSLIST:
				case PROFILE:
				case PROFILES:
				case PROXY:
				case QUERY:
				case QUICK:
				case REBUILD:
				case RECOVER:
				case RECURSIVE:
				case REDO_BUFFER_SIZE:
				case REDUNDANT:
				case RELAY:
				case RELAY_LOG_FILE:
				case RELAY_LOG_POS:
				case RELAYLOG:
				case REMOVE:
				case REORGANIZE:
				case REPAIR:
				case REPLICATE_DO_DB:
				case REPLICATE_DO_TABLE:
				case REPLICATE_IGNORE_DB:
				case REPLICATE_IGNORE_TABLE:
				case REPLICATE_REWRITE_DB:
				case REPLICATE_WILD_DO_TABLE:
				case REPLICATE_WILD_IGNORE_TABLE:
				case REPLICATION:
				case RESET:
				case RESTART:
				case RESUME:
				case RETURNED_SQLSTATE:
				case RETURNS:
				case ROLE:
				case ROLLBACK:
				case ROLLUP:
				case ROTATE:
				case ROW:
				case ROWS:
				case ROW_FORMAT:
				case RTREE:
				case SAVEPOINT:
				case SCHEDULE:
				case SECURITY:
				case SEQUENCE:
				case SERVER:
				case SESSION:
				case SHARE:
				case SHARED:
				case SIGNED:
				case SIMPLE:
				case SLAVE:
				case SLOW:
				case SNAPSHOT:
				case SOCKET:
				case SOME:
				case SONAME:
				case SOUNDS:
				case SOURCE:
				case SQL_AFTER_GTIDS:
				case SQL_AFTER_MTS_GAPS:
				case SQL_BEFORE_GTIDS:
				case SQL_BUFFER_RESULT:
				case SQL_CACHE:
				case SQL_NO_CACHE:
				case SQL_THREAD:
				case START:
				case STARTS:
				case STATS_AUTO_RECALC:
				case STATS_PERSISTENT:
				case STATS_SAMPLE_PAGES:
				case STATUS:
				case STOP:
				case STORAGE:
				case STRING:
				case SUBCLASS_ORIGIN:
				case SUBJECT:
				case SUBPARTITION:
				case SUBPARTITIONS:
				case SUSPEND:
				case SWAPS:
				case SWITCHES:
				case TABLE_NAME:
				case TABLESPACE:
				case TABLE_TYPE:
				case TEMPORARY:
				case TEMPTABLE:
				case THAN:
				case TRADITIONAL:
				case TRANSACTION:
				case TRANSACTIONAL:
				case TRIGGERS:
				case TRUNCATE:
				case UNDEFINED:
				case UNDOFILE:
				case UNDO_BUFFER_SIZE:
				case UNINSTALL:
				case UNKNOWN:
				case UNTIL:
				case UPGRADE:
				case USER:
				case USE_FRM:
				case USER_RESOURCES:
				case VALIDATION:
				case VALUE:
				case VARIABLES:
				case VIEW:
				case VIRTUAL:
				case VISIBLE:
				case WAIT:
				case WARNINGS:
				case WITHOUT:
				case WORK:
				case WRAPPER:
				case X509:
				case XA:
				case XML:
				case EUR:
				case USA:
				case JIS:
				case ISO:
				case INTERNAL:
				case QUARTER:
				case MONTH:
				case DAY:
				case HOUR:
				case MINUTE:
				case WEEK:
				case SECOND:
				case MICROSECOND:
				case TABLES:
				case ROUTINE:
				case EXECUTE:
				case FILE:
				case PROCESS:
				case RELOAD:
				case SHUTDOWN:
				case SUPER:
				case PRIVILEGES:
				case AUDIT_ADMIN:
				case BACKUP_ADMIN:
				case BINLOG_ADMIN:
				case BINLOG_ENCRYPTION_ADMIN:
				case CLONE_ADMIN:
				case CONNECTION_ADMIN:
				case ENCRYPTION_KEY_ADMIN:
				case FIREWALL_ADMIN:
				case FIREWALL_USER:
				case ADMIN:
				case GROUP_REPLICATION_ADMIN:
				case INNODB_REDO_LOG_ARCHIVE:
				case INVOKE:
				case LAMBDA:
				case NDB_STORED_USER:
				case PASSWORDLESS_USER_ADMIN:
				case PERSIST_RO_VARIABLES_ADMIN:
				case REPLICATION_APPLIER:
				case REPLICATION_SLAVE_ADMIN:
				case RESOURCE_GROUP_ADMIN:
				case RESOURCE_GROUP_USER:
				case ROLE_ADMIN:
				case S3:
				case SESSION_VARIABLES_ADMIN:
				case SET_USER_ID:
				case SHOW_ROUTINE:
				case SYSTEM_VARIABLES_ADMIN:
				case TABLE_ENCRYPTION_ADMIN:
				case VERSION_TOKEN_ADMIN:
				case XA_RECOVER_ADMIN:
				case ARMSCII8:
				case ASCII:
				case BIG5:
				case CP1250:
				case CP1251:
				case CP1256:
				case CP1257:
				case CP850:
				case CP852:
				case CP866:
				case CP932:
				case DEC8:
				case EUCJPMS:
				case EUCKR:
				case GB18030:
				case GB2312:
				case GBK:
				case GEOSTD8:
				case GREEK:
				case HEBREW:
				case HP8:
				case KEYBCS2:
				case KOI8R:
				case KOI8U:
				case LATIN1:
				case LATIN2:
				case LATIN5:
				case LATIN7:
				case MACCE:
				case MACROMAN:
				case SJIS:
				case SWE7:
				case TIS620:
				case UCS2:
				case UJIS:
				case UTF16:
				case UTF16LE:
				case UTF32:
				case UTF8:
				case UTF8MB3:
				case UTF8MB4:
				case ARCHIVE:
				case BLACKHOLE:
				case CSV:
				case FEDERATED:
				case INNODB:
				case MEMORY:
				case MRG_MYISAM:
				case MYISAM:
				case NDB:
				case NDBCLUSTER:
				case PERFORMANCE_SCHEMA:
				case TOKUDB:
				case REPEATABLE:
				case COMMITTED:
				case UNCOMMITTED:
				case SERIALIZABLE:
				case GEOMETRYCOLLECTION:
				case LINESTRING:
				case MULTILINESTRING:
				case MULTIPOINT:
				case MULTIPOLYGON:
				case POINT:
				case POLYGON:
				case ABS:
				case ACOS:
				case ADDDATE:
				case ADDTIME:
				case AES_DECRYPT:
				case AES_ENCRYPT:
				case AREA:
				case ASBINARY:
				case ASIN:
				case ASTEXT:
				case ASWKB:
				case ASWKT:
				case ASYMMETRIC_DECRYPT:
				case ASYMMETRIC_DERIVE:
				case ASYMMETRIC_ENCRYPT:
				case ASYMMETRIC_SIGN:
				case ASYMMETRIC_VERIFY:
				case ATAN:
				case ATAN2:
				case BENCHMARK:
				case BIN:
				case BIT_COUNT:
				case BIT_LENGTH:
				case BUFFER:
				case CATALOG_NAME:
				case CEIL:
				case CEILING:
				case CENTROID:
				case CHARACTER_LENGTH:
				case CHARSET:
				case CHAR_LENGTH:
				case COERCIBILITY:
				case COLLATION:
				case COMPRESS:
				case CONCAT:
				case CONCAT_WS:
				case CONNECTION_ID:
				case CONV:
				case CONVERT_TZ:
				case COS:
				case COT:
				case CRC32:
				case CREATE_ASYMMETRIC_PRIV_KEY:
				case CREATE_ASYMMETRIC_PUB_KEY:
				case CREATE_DH_PARAMETERS:
				case CREATE_DIGEST:
				case CROSSES:
				case DATEDIFF:
				case DATE_FORMAT:
				case DAYNAME:
				case DAYOFMONTH:
				case DAYOFWEEK:
				case DAYOFYEAR:
				case DECODE:
				case DEGREES:
				case DES_DECRYPT:
				case DES_ENCRYPT:
				case DIMENSION:
				case DISJOINT:
				case ELT:
				case ENCODE:
				case ENCRYPT:
				case ENDPOINT:
				case ENGINE_ATTRIBUTE:
				case ENVELOPE:
				case EQUALS:
				case EXP:
				case EXPORT_SET:
				case EXTERIORRING:
				case EXTRACTVALUE:
				case FIELD:
				case FIND_IN_SET:
				case FLOOR:
				case FORMAT:
				case FOUND_ROWS:
				case FROM_BASE64:
				case FROM_DAYS:
				case FROM_UNIXTIME:
				case GEOMCOLLFROMTEXT:
				case GEOMCOLLFROMWKB:
				case GEOMETRYCOLLECTIONFROMTEXT:
				case GEOMETRYCOLLECTIONFROMWKB:
				case GEOMETRYFROMTEXT:
				case GEOMETRYFROMWKB:
				case GEOMETRYN:
				case GEOMETRYTYPE:
				case GEOMFROMTEXT:
				case GEOMFROMWKB:
				case GET_FORMAT:
				case GET_LOCK:
				case GLENGTH:
				case GREATEST:
				case GTID_SUBSET:
				case GTID_SUBTRACT:
				case HEX:
				case IFNULL:
				case INET6_ATON:
				case INET6_NTOA:
				case INET_ATON:
				case INET_NTOA:
				case INSTR:
				case INTERIORRINGN:
				case INTERSECTS:
				case ISCLOSED:
				case ISEMPTY:
				case ISNULL:
				case ISSIMPLE:
				case IS_FREE_LOCK:
				case IS_IPV4:
				case IS_IPV4_COMPAT:
				case IS_IPV4_MAPPED:
				case IS_IPV6:
				case IS_USED_LOCK:
				case LAST_INSERT_ID:
				case LCASE:
				case LEAST:
				case LENGTH:
				case LINEFROMTEXT:
				case LINEFROMWKB:
				case LINESTRINGFROMTEXT:
				case LINESTRINGFROMWKB:
				case LN:
				case LOAD_FILE:
				case LOCATE:
				case LOG:
				case LOG10:
				case LOG2:
				case LOWER:
				case LPAD:
				case LTRIM:
				case MAKEDATE:
				case MAKETIME:
				case MAKE_SET:
				case MASTER_POS_WAIT:
				case MBRCONTAINS:
				case MBRDISJOINT:
				case MBREQUAL:
				case MBRINTERSECTS:
				case MBROVERLAPS:
				case MBRTOUCHES:
				case MBRWITHIN:
				case MD5:
				case MLINEFROMTEXT:
				case MLINEFROMWKB:
				case MONTHNAME:
				case MPOINTFROMTEXT:
				case MPOINTFROMWKB:
				case MPOLYFROMTEXT:
				case MPOLYFROMWKB:
				case MULTILINESTRINGFROMTEXT:
				case MULTILINESTRINGFROMWKB:
				case MULTIPOINTFROMTEXT:
				case MULTIPOINTFROMWKB:
				case MULTIPOLYGONFROMTEXT:
				case MULTIPOLYGONFROMWKB:
				case NAME_CONST:
				case NULLIF:
				case NUMGEOMETRIES:
				case NUMINTERIORRINGS:
				case NUMPOINTS:
				case OCT:
				case OCTET_LENGTH:
				case ORD:
				case OVERLAPS:
				case PERIOD_ADD:
				case PERIOD_DIFF:
				case PI:
				case POINTFROMTEXT:
				case POINTFROMWKB:
				case POINTN:
				case POLYFROMTEXT:
				case POLYFROMWKB:
				case POLYGONFROMTEXT:
				case POLYGONFROMWKB:
				case POW:
				case POWER:
				case QUOTE:
				case RADIANS:
				case RAND:
				case RANDOM_BYTES:
				case RELEASE_LOCK:
				case REVERSE:
				case ROUND:
				case ROW_COUNT:
				case RPAD:
				case RTRIM:
				case SEC_TO_TIME:
				case SECONDARY_ENGINE_ATTRIBUTE:
				case SESSION_USER:
				case SHA:
				case SHA1:
				case SHA2:
				case SCHEMA_NAME:
				case SIGN:
				case SIN:
				case SLEEP:
				case SOUNDEX:
				case SQL_THREAD_WAIT_AFTER_GTIDS:
				case SQRT:
				case SRID:
				case STARTPOINT:
				case STRCMP:
				case STR_TO_DATE:
				case ST_AREA:
				case ST_ASBINARY:
				case ST_ASTEXT:
				case ST_ASWKB:
				case ST_ASWKT:
				case ST_BUFFER:
				case ST_CENTROID:
				case ST_CONTAINS:
				case ST_CROSSES:
				case ST_DIFFERENCE:
				case ST_DIMENSION:
				case ST_DISJOINT:
				case ST_DISTANCE:
				case ST_ENDPOINT:
				case ST_ENVELOPE:
				case ST_EQUALS:
				case ST_EXTERIORRING:
				case ST_GEOMCOLLFROMTEXT:
				case ST_GEOMCOLLFROMTXT:
				case ST_GEOMCOLLFROMWKB:
				case ST_GEOMETRYCOLLECTIONFROMTEXT:
				case ST_GEOMETRYCOLLECTIONFROMWKB:
				case ST_GEOMETRYFROMTEXT:
				case ST_GEOMETRYFROMWKB:
				case ST_GEOMETRYN:
				case ST_GEOMETRYTYPE:
				case ST_GEOMFROMTEXT:
				case ST_GEOMFROMWKB:
				case ST_INTERIORRINGN:
				case ST_INTERSECTION:
				case ST_INTERSECTS:
				case ST_ISCLOSED:
				case ST_ISEMPTY:
				case ST_ISSIMPLE:
				case ST_LINEFROMTEXT:
				case ST_LINEFROMWKB:
				case ST_LINESTRINGFROMTEXT:
				case ST_LINESTRINGFROMWKB:
				case ST_NUMGEOMETRIES:
				case ST_NUMINTERIORRING:
				case ST_NUMINTERIORRINGS:
				case ST_NUMPOINTS:
				case ST_OVERLAPS:
				case ST_POINTFROMTEXT:
				case ST_POINTFROMWKB:
				case ST_POINTN:
				case ST_POLYFROMTEXT:
				case ST_POLYFROMWKB:
				case ST_POLYGONFROMTEXT:
				case ST_POLYGONFROMWKB:
				case ST_SRID:
				case ST_STARTPOINT:
				case ST_SYMDIFFERENCE:
				case ST_TOUCHES:
				case ST_UNION:
				case ST_WITHIN:
				case ST_X:
				case ST_Y:
				case SUBDATE:
				case SUBSTRING_INDEX:
				case SUBTIME:
				case SYSTEM_USER:
				case TAN:
				case TIMEDIFF:
				case TIMESTAMPADD:
				case TIMESTAMPDIFF:
				case TIME_FORMAT:
				case TIME_TO_SEC:
				case TOUCHES:
				case TO_BASE64:
				case TO_DAYS:
				case TO_SECONDS:
				case UCASE:
				case UNCOMPRESS:
				case UNCOMPRESSED_LENGTH:
				case UNHEX:
				case UNIX_TIMESTAMP:
				case UPDATEXML:
				case UPPER:
				case UUID:
				case UUID_SHORT:
				case VALIDATE_PASSWORD_STRENGTH:
				case VERSION:
				case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
				case WEEKDAY:
				case WEEKOFYEAR:
				case WEIGHT_STRING:
				case WITHIN:
				case YEARWEEK:
				case Y_FUNCTION:
				case X_FUNCTION:
				case VIA:
				case LASTVAL:
				case NEXTVAL:
				case SETVAL:
				case PREVIOUS:
				case PERSISTENT:
				case BINLOG_MONITOR:
				case BINLOG_REPLAY:
				case FEDERATED_ADMIN:
				case READ_ONLY_ADMIN:
				case REPLICA:
				case REPLICATION_MASTER_ADMIN:
				case MOD:
				case AT_SIGN:
				case CHARSET_REVERSE_QOUTE_STRING:
				case STRING_LITERAL:
				case ID:
				case REVERSE_QUOTE_ID:
				case LOCAL_ID:
				case GLOBAL_ID:
				case ENCRYPTED:
				case ENCRYPTION_KEY_ID:
					{
					setState(2151);
					variableClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2154);
				variableClause();
				setState(2155);
				match(EQUAL_SYMBOL);
				setState(2156);
				diagnosticsConditionInformationName();
				setState(2164);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2157);
					match(COMMA);
					setState(2158);
					variableClause();
					setState(2159);
					match(EQUAL_SYMBOL);
					setState(2160);
					diagnosticsConditionInformationName();
					}
					}
					setState(2166);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DiagnosticsConditionInformationNameContext extends ParserRuleContext {
		public TerminalNode CLASS_ORIGIN() { return getToken(MySqlParser.CLASS_ORIGIN, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(MySqlParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(MySqlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(MySqlParser.MYSQL_ERRNO, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(MySqlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(MySqlParser.CATALOG_NAME, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(MySqlParser.SCHEMA_NAME, 0); }
		public TerminalNode TABLE_NAME() { return getToken(MySqlParser.TABLE_NAME, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(MySqlParser.COLUMN_NAME, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(MySqlParser.CURSOR_NAME, 0); }
		public DiagnosticsConditionInformationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_diagnosticsConditionInformationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDiagnosticsConditionInformationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDiagnosticsConditionInformationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDiagnosticsConditionInformationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DiagnosticsConditionInformationNameContext diagnosticsConditionInformationName() throws RecognitionException {
		DiagnosticsConditionInformationNameContext _localctx = new DiagnosticsConditionInformationNameContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_diagnosticsConditionInformationName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2169);
			_la = _input.LA(1);
			if ( !(((((_la - 350)) & ~0x3f) == 0 && ((1L << (_la - 350)) & ((1L << (CLASS_ORIGIN - 350)) | (1L << (COLUMN_NAME - 350)) | (1L << (CONSTRAINT_CATALOG - 350)) | (1L << (CONSTRAINT_SCHEMA - 350)) | (1L << (CONSTRAINT_NAME - 350)) | (1L << (CURSOR_NAME - 350)))) != 0) || _la==MESSAGE_TEXT || _la==MYSQL_ERRNO || ((((_la - 576)) & ~0x3f) == 0 && ((1L << (_la - 576)) & ((1L << (RETURNED_SQLSTATE - 576)) | (1L << (SUBCLASS_ORIGIN - 576)) | (1L << (TABLE_NAME - 576)))) != 0) || _la==CATALOG_NAME || _la==SCHEMA_NAME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DescribeObjectClauseContext extends ParserRuleContext {
		public DescribeObjectClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_describeObjectClause; }
	 
		public DescribeObjectClauseContext() { }
		public void copyFrom(DescribeObjectClauseContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class DescribeStatementsContext extends DescribeObjectClauseContext {
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public DeleteStatementContext deleteStatement() {
			return getRuleContext(DeleteStatementContext.class,0);
		}
		public InsertStatementContext insertStatement() {
			return getRuleContext(InsertStatementContext.class,0);
		}
		public ReplaceStatementContext replaceStatement() {
			return getRuleContext(ReplaceStatementContext.class,0);
		}
		public UpdateStatementContext updateStatement() {
			return getRuleContext(UpdateStatementContext.class,0);
		}
		public DescribeStatementsContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDescribeStatements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDescribeStatements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDescribeStatements(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DescribeConnectionContext extends DescribeObjectClauseContext {
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DescribeConnectionContext(DescribeObjectClauseContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDescribeConnection(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDescribeConnection(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDescribeConnection(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DescribeObjectClauseContext describeObjectClause() throws RecognitionException {
		DescribeObjectClauseContext _localctx = new DescribeObjectClauseContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_describeObjectClause);
		try {
			setState(2181);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DELETE:
			case INSERT:
			case REPLACE:
			case SELECT:
			case UPDATE:
			case LR_BRACKET:
				_localctx = new DescribeStatementsContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2176);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SELECT:
				case LR_BRACKET:
					{
					setState(2171);
					selectStatement();
					}
					break;
				case DELETE:
					{
					setState(2172);
					deleteStatement();
					}
					break;
				case INSERT:
					{
					setState(2173);
					insertStatement();
					}
					break;
				case REPLACE:
					{
					setState(2174);
					replaceStatement();
					}
					break;
				case UPDATE:
					{
					setState(2175);
					updateStatement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case FOR:
				_localctx = new DescribeConnectionContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2178);
				match(FOR);
				setState(2179);
				match(CONNECTION);
				setState(2180);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullIdContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public TerminalNode DOT_ID() { return getToken(MySqlParser.DOT_ID, 0); }
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public FullIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFullId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullIdContext fullId() throws RecognitionException {
		FullIdContext _localctx = new FullIdContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_fullId);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2183);
			uid();
			setState(2187);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,323,_ctx) ) {
			case 1:
				{
				setState(2184);
				match(DOT_ID);
				}
				break;
			case 2:
				{
				setState(2185);
				match(DOT);
				setState(2186);
				uid();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TableNameContext extends ParserRuleContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTableName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTableName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTableName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TableNameContext tableName() throws RecognitionException {
		TableNameContext _localctx = new TableNameContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_tableName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2189);
			fullId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RoleNameContext extends ParserRuleContext {
		public UserNameContext userName() {
			return getRuleContext(UserNameContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public RoleNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_roleName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRoleName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRoleName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRoleName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RoleNameContext roleName() throws RecognitionException {
		RoleNameContext _localctx = new RoleNameContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_roleName);
		try {
			setState(2193);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2191);
				userName();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2192);
				uid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FullColumnNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public List<DottedIdContext> dottedId() {
			return getRuleContexts(DottedIdContext.class);
		}
		public DottedIdContext dottedId(int i) {
			return getRuleContext(DottedIdContext.class,i);
		}
		public FullColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fullColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFullColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FullColumnNameContext fullColumnName() throws RecognitionException {
		FullColumnNameContext _localctx = new FullColumnNameContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_fullColumnName);
		try {
			setState(2207);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,328,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2195);
				uid();
				setState(2200);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,326,_ctx) ) {
				case 1:
					{
					setState(2196);
					dottedId();
					setState(2198);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,325,_ctx) ) {
					case 1:
						{
						setState(2197);
						dottedId();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2202);
				matchWildcard();
				setState(2203);
				dottedId();
				setState(2205);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
				case 1:
					{
					setState(2204);
					dottedId();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNameContext extends ParserRuleContext {
		public Token sortType;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public IndexColumnNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexColumnName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexColumnName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexColumnName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnNameContext indexColumnName() throws RecognitionException {
		IndexColumnNameContext _localctx = new IndexColumnNameContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_indexColumnName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2220);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,331,_ctx) ) {
			case 1:
				{
				setState(2211);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
				case 1:
					{
					setState(2209);
					uid();
					}
					break;
				case 2:
					{
					setState(2210);
					match(STRING_LITERAL);
					}
					break;
				}
				setState(2217);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2213);
					match(LR_BRACKET);
					setState(2214);
					decimalLiteral();
					setState(2215);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case 2:
				{
				setState(2219);
				expression(0);
				}
				break;
			}
			setState(2223);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(2222);
				((IndexColumnNameContext)_localctx).sortType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
					((IndexColumnNameContext)_localctx).sortType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserNameContext extends ParserRuleContext {
		public TerminalNode STRING_USER_NAME() { return getToken(MySqlParser.STRING_USER_NAME, 0); }
		public TerminalNode STRING_USER_NAME_MARIADB() { return getToken(MySqlParser.STRING_USER_NAME_MARIADB, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode ADMIN() { return getToken(MySqlParser.ADMIN, 0); }
		public KeywordsCanBeIdContext keywordsCanBeId() {
			return getRuleContext(KeywordsCanBeIdContext.class,0);
		}
		public UserNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUserName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserNameContext userName() throws RecognitionException {
		UserNameContext _localctx = new UserNameContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_userName);
		try {
			setState(2231);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,333,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2225);
				match(STRING_USER_NAME);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2226);
				match(STRING_USER_NAME_MARIADB);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2227);
				match(ID);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2228);
				match(STRING_LITERAL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2229);
				match(ADMIN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2230);
				keywordsCanBeId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MysqlVariableContext extends ParserRuleContext {
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode GLOBAL_ID() { return getToken(MySqlParser.GLOBAL_ID, 0); }
		public MysqlVariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mysqlVariable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMysqlVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMysqlVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMysqlVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MysqlVariableContext mysqlVariable() throws RecognitionException {
		MysqlVariableContext _localctx = new MysqlVariableContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_mysqlVariable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2233);
			_la = _input.LA(1);
			if ( !(_la==LOCAL_ID || _la==GLOBAL_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameContext extends ParserRuleContext {
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharsetName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharsetName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharsetName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameContext charsetName() throws RecognitionException {
		CharsetNameContext _localctx = new CharsetNameContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_charsetName);
		try {
			setState(2239);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,334,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2235);
				match(BINARY);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2236);
				charsetNameBase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2237);
				match(STRING_LITERAL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2238);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollationNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collationName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollationName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollationName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollationName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollationNameContext collationName() throws RecognitionException {
		CollationNameContext _localctx = new CollationNameContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_collationName);
		try {
			setState(2243);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2241);
				uid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2242);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class EngineNameContext extends ParserRuleContext {
		public TerminalNode ARCHIVE() { return getToken(MySqlParser.ARCHIVE, 0); }
		public TerminalNode BLACKHOLE() { return getToken(MySqlParser.BLACKHOLE, 0); }
		public TerminalNode CSV() { return getToken(MySqlParser.CSV, 0); }
		public TerminalNode FEDERATED() { return getToken(MySqlParser.FEDERATED, 0); }
		public TerminalNode INNODB() { return getToken(MySqlParser.INNODB, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode MRG_MYISAM() { return getToken(MySqlParser.MRG_MYISAM, 0); }
		public TerminalNode MYISAM() { return getToken(MySqlParser.MYISAM, 0); }
		public TerminalNode NDB() { return getToken(MySqlParser.NDB, 0); }
		public TerminalNode NDBCLUSTER() { return getToken(MySqlParser.NDBCLUSTER, 0); }
		public TerminalNode PERFORMANCE_SCHEMA() { return getToken(MySqlParser.PERFORMANCE_SCHEMA, 0); }
		public TerminalNode TOKUDB() { return getToken(MySqlParser.TOKUDB, 0); }
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CONNECT() { return getToken(MySqlParser.CONNECT, 0); }
		public EngineNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_engineName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterEngineName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitEngineName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitEngineName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final EngineNameContext engineName() throws RecognitionException {
		EngineNameContext _localctx = new EngineNameContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_engineName);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2245);
			_la = _input.LA(1);
			if ( !(_la==CONNECT || ((((_la - 767)) & ~0x3f) == 0 && ((1L << (_la - 767)) & ((1L << (ARCHIVE - 767)) | (1L << (BLACKHOLE - 767)) | (1L << (CSV - 767)) | (1L << (FEDERATED - 767)) | (1L << (INNODB - 767)) | (1L << (MEMORY - 767)) | (1L << (MRG_MYISAM - 767)) | (1L << (MYISAM - 767)) | (1L << (NDB - 767)) | (1L << (NDBCLUSTER - 767)) | (1L << (PERFORMANCE_SCHEMA - 767)) | (1L << (TOKUDB - 767)))) != 0) || ((((_la - 1138)) & ~0x3f) == 0 && ((1L << (_la - 1138)) & ((1L << (STRING_LITERAL - 1138)) | (1L << (ID - 1138)) | (1L << (REVERSE_QUOTE_ID - 1138)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UuidSetContext extends ParserRuleContext {
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public List<TerminalNode> MINUS() { return getTokens(MySqlParser.MINUS); }
		public TerminalNode MINUS(int i) {
			return getToken(MySqlParser.MINUS, i);
		}
		public List<TerminalNode> COLON_SYMB() { return getTokens(MySqlParser.COLON_SYMB); }
		public TerminalNode COLON_SYMB(int i) {
			return getToken(MySqlParser.COLON_SYMB, i);
		}
		public UuidSetContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uuidSet; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUuidSet(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUuidSet(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUuidSet(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UuidSetContext uuidSet() throws RecognitionException {
		UuidSetContext _localctx = new UuidSetContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_uuidSet);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2247);
			decimalLiteral();
			setState(2248);
			match(MINUS);
			setState(2249);
			decimalLiteral();
			setState(2250);
			match(MINUS);
			setState(2251);
			decimalLiteral();
			setState(2252);
			match(MINUS);
			setState(2253);
			decimalLiteral();
			setState(2254);
			match(MINUS);
			setState(2255);
			decimalLiteral();
			setState(2261); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2256);
				match(COLON_SYMB);
				setState(2257);
				decimalLiteral();
				setState(2258);
				match(MINUS);
				setState(2259);
				decimalLiteral();
				}
				}
				setState(2263); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==COLON_SYMB );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XidContext extends ParserRuleContext {
		public XuidStringIdContext globalTableUid;
		public XuidStringIdContext qualifier;
		public DecimalLiteralContext idFormat;
		public List<XuidStringIdContext> xuidStringId() {
			return getRuleContexts(XuidStringIdContext.class);
		}
		public XuidStringIdContext xuidStringId(int i) {
			return getRuleContext(XuidStringIdContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public XidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XidContext xid() throws RecognitionException {
		XidContext _localctx = new XidContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_xid);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2265);
			((XidContext)_localctx).globalTableUid = xuidStringId();
			setState(2272);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2266);
				match(COMMA);
				setState(2267);
				((XidContext)_localctx).qualifier = xuidStringId();
				setState(2270);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2268);
					match(COMMA);
					setState(2269);
					((XidContext)_localctx).idFormat = decimalLiteral();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class XuidStringIdContext extends ParserRuleContext {
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(MySqlParser.BIT_STRING, 0); }
		public List<TerminalNode> HEXADECIMAL_LITERAL() { return getTokens(MySqlParser.HEXADECIMAL_LITERAL); }
		public TerminalNode HEXADECIMAL_LITERAL(int i) {
			return getToken(MySqlParser.HEXADECIMAL_LITERAL, i);
		}
		public XuidStringIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xuidStringId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterXuidStringId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitXuidStringId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitXuidStringId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final XuidStringIdContext xuidStringId() throws RecognitionException {
		XuidStringIdContext _localctx = new XuidStringIdContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_xuidStringId);
		int _la;
		try {
			setState(2281);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case STRING_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2274);
				match(STRING_LITERAL);
				}
				break;
			case BIT_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(2275);
				match(BIT_STRING);
				}
				break;
			case HEXADECIMAL_LITERAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(2277); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2276);
					match(HEXADECIMAL_LITERAL);
					}
					}
					setState(2279); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==HEXADECIMAL_LITERAL );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AuthPluginContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public AuthPluginContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_authPlugin; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAuthPlugin(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAuthPlugin(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAuthPlugin(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AuthPluginContext authPlugin() throws RecognitionException {
		AuthPluginContext _localctx = new AuthPluginContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_authPlugin);
		try {
			setState(2285);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,341,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2283);
				uid();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2284);
				match(STRING_LITERAL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidContext extends ParserRuleContext {
		public SimpleIdContext simpleId() {
			return getRuleContext(SimpleIdContext.class,0);
		}
		public TerminalNode REVERSE_QUOTE_ID() { return getToken(MySqlParser.REVERSE_QUOTE_ID, 0); }
		public TerminalNode CHARSET_REVERSE_QOUTE_STRING() { return getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0); }
		public UidContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uid; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUid(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUid(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUid(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UidContext uid() throws RecognitionException {
		UidContext _localctx = new UidContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_uid);
		try {
			setState(2290);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,342,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2287);
				simpleId();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2288);
				match(REVERSE_QUOTE_ID);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2289);
				match(CHARSET_REVERSE_QOUTE_STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleIdContext extends ParserRuleContext {
		public TerminalNode ID() { return getToken(MySqlParser.ID, 0); }
		public CharsetNameBaseContext charsetNameBase() {
			return getRuleContext(CharsetNameBaseContext.class,0);
		}
		public TransactionLevelBaseContext transactionLevelBase() {
			return getRuleContext(TransactionLevelBaseContext.class,0);
		}
		public EngineNameContext engineName() {
			return getRuleContext(EngineNameContext.class,0);
		}
		public PrivilegesBaseContext privilegesBase() {
			return getRuleContext(PrivilegesBaseContext.class,0);
		}
		public IntervalTypeBaseContext intervalTypeBase() {
			return getRuleContext(IntervalTypeBaseContext.class,0);
		}
		public DataTypeBaseContext dataTypeBase() {
			return getRuleContext(DataTypeBaseContext.class,0);
		}
		public KeywordsCanBeIdContext keywordsCanBeId() {
			return getRuleContext(KeywordsCanBeIdContext.class,0);
		}
		public ScalarFunctionNameContext scalarFunctionName() {
			return getRuleContext(ScalarFunctionNameContext.class,0);
		}
		public SimpleIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleIdContext simpleId() throws RecognitionException {
		SimpleIdContext _localctx = new SimpleIdContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_simpleId);
		try {
			setState(2301);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,343,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2292);
				match(ID);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2293);
				charsetNameBase();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2294);
				transactionLevelBase();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2295);
				engineName();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2296);
				privilegesBase();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2297);
				intervalTypeBase();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2298);
				dataTypeBase();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2299);
				keywordsCanBeId();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2300);
				scalarFunctionName();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DottedIdContext extends ParserRuleContext {
		public TerminalNode DOT_ID() { return getToken(MySqlParser.DOT_ID, 0); }
		public TerminalNode DOT() { return getToken(MySqlParser.DOT, 0); }
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public DottedIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dottedId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDottedId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDottedId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDottedId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DottedIdContext dottedId() throws RecognitionException {
		DottedIdContext _localctx = new DottedIdContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_dottedId);
		try {
			setState(2306);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DOT_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2303);
				match(DOT_ID);
				}
				break;
			case DOT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2304);
				match(DOT);
				setState(2305);
				uid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DecimalLiteralContext extends ParserRuleContext {
		public TerminalNode DECIMAL_LITERAL() { return getToken(MySqlParser.DECIMAL_LITERAL, 0); }
		public TerminalNode ZERO_DECIMAL() { return getToken(MySqlParser.ZERO_DECIMAL, 0); }
		public TerminalNode ONE_DECIMAL() { return getToken(MySqlParser.ONE_DECIMAL, 0); }
		public TerminalNode TWO_DECIMAL() { return getToken(MySqlParser.TWO_DECIMAL, 0); }
		public TerminalNode REAL_LITERAL() { return getToken(MySqlParser.REAL_LITERAL, 0); }
		public DecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_decimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DecimalLiteralContext decimalLiteral() throws RecognitionException {
		DecimalLiteralContext _localctx = new DecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_decimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2308);
			_la = _input.LA(1);
			if ( !(((((_la - 1128)) & ~0x3f) == 0 && ((1L << (_la - 1128)) & ((1L << (ZERO_DECIMAL - 1128)) | (1L << (ONE_DECIMAL - 1128)) | (1L << (TWO_DECIMAL - 1128)) | (1L << (DECIMAL_LITERAL - 1128)) | (1L << (REAL_LITERAL - 1128)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FileSizeLiteralContext extends ParserRuleContext {
		public TerminalNode FILESIZE_LITERAL() { return getToken(MySqlParser.FILESIZE_LITERAL, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public FileSizeLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fileSizeLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFileSizeLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFileSizeLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFileSizeLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FileSizeLiteralContext fileSizeLiteral() throws RecognitionException {
		FileSizeLiteralContext _localctx = new FileSizeLiteralContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_fileSizeLiteral);
		try {
			setState(2312);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FILESIZE_LITERAL:
				enterOuterAlt(_localctx, 1);
				{
				setState(2310);
				match(FILESIZE_LITERAL);
				}
				break;
			case ZERO_DECIMAL:
			case ONE_DECIMAL:
			case TWO_DECIMAL:
			case DECIMAL_LITERAL:
			case REAL_LITERAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(2311);
				decimalLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StringLiteralContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode START_NATIONAL_STRING_LITERAL() { return getToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public StringLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stringLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStringLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StringLiteralContext stringLiteral() throws RecognitionException {
		StringLiteralContext _localctx = new StringLiteralContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_stringLiteral);
		int _la;
		try {
			int _alt;
			setState(2337);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,352,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2319);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(2315);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(2314);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(2317);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(2318);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2322); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(2321);
						match(STRING_LITERAL);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2324); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,348,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2331);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case STRING_LITERAL:
				case STRING_CHARSET_NAME:
					{
					setState(2327);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==STRING_CHARSET_NAME) {
						{
						setState(2326);
						match(STRING_CHARSET_NAME);
						}
					}

					setState(2329);
					match(STRING_LITERAL);
					}
					break;
				case START_NATIONAL_STRING_LITERAL:
					{
					setState(2330);
					match(START_NATIONAL_STRING_LITERAL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2335);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
				case 1:
					{
					setState(2333);
					match(COLLATE);
					setState(2334);
					collationName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BooleanLiteralContext extends ParserRuleContext {
		public TerminalNode TRUE() { return getToken(MySqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(MySqlParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBooleanLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBooleanLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBooleanLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanLiteralContext booleanLiteral() throws RecognitionException {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_booleanLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2339);
			_la = _input.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class HexadecimalLiteralContext extends ParserRuleContext {
		public TerminalNode HEXADECIMAL_LITERAL() { return getToken(MySqlParser.HEXADECIMAL_LITERAL, 0); }
		public TerminalNode STRING_CHARSET_NAME() { return getToken(MySqlParser.STRING_CHARSET_NAME, 0); }
		public HexadecimalLiteralContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hexadecimalLiteral; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterHexadecimalLiteral(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitHexadecimalLiteral(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitHexadecimalLiteral(this);
			else return visitor.visitChildren(this);
		}
	}

	public final HexadecimalLiteralContext hexadecimalLiteral() throws RecognitionException {
		HexadecimalLiteralContext _localctx = new HexadecimalLiteralContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_hexadecimalLiteral);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2342);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==STRING_CHARSET_NAME) {
				{
				setState(2341);
				match(STRING_CHARSET_NAME);
				}
			}

			setState(2344);
			match(HEXADECIMAL_LITERAL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NullNotnullContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public NullNotnullContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nullNotnull; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNullNotnull(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNullNotnull(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNullNotnull(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NullNotnullContext nullNotnull() throws RecognitionException {
		NullNotnullContext _localctx = new NullNotnullContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_nullNotnull);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2346);
				match(NOT);
				}
			}

			setState(2349);
			_la = _input.LA(1);
			if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public Token nullLiteral;
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public HexadecimalLiteralContext hexadecimalLiteral() {
			return getRuleContext(HexadecimalLiteralContext.class,0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return getRuleContext(BooleanLiteralContext.class,0);
		}
		public TerminalNode REAL_LITERAL() { return getToken(MySqlParser.REAL_LITERAL, 0); }
		public TerminalNode BIT_STRING() { return getToken(MySqlParser.BIT_STRING, 0); }
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode NULL_SPEC_LITERAL() { return getToken(MySqlParser.NULL_SPEC_LITERAL, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_constant);
		int _la;
		try {
			setState(2363);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,356,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2351);
				stringLiteral();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2352);
				decimalLiteral();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2353);
				match(MINUS);
				setState(2354);
				decimalLiteral();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2355);
				hexadecimalLiteral();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2356);
				booleanLiteral();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2357);
				match(REAL_LITERAL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2358);
				match(BIT_STRING);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2360);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2359);
					match(NOT);
					}
				}

				setState(2362);
				((ConstantContext)_localctx).nullLiteral = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NULL_LITERAL || _la==NULL_SPEC_LITERAL) ) {
					((ConstantContext)_localctx).nullLiteral = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeContext extends ParserRuleContext {
		public DataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataType; }
	 
		public DataTypeContext() { }
		public void copyFrom(DataTypeContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpatialDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMCOLLECTION() { return getToken(MySqlParser.GEOMCOLLECTION, 0); }
		public TerminalNode LINESTRING() { return getToken(MySqlParser.LINESTRING, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(MySqlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTIPOINT() { return getToken(MySqlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(MySqlParser.MULTIPOLYGON, 0); }
		public TerminalNode POINT() { return getToken(MySqlParser.POINT, 0); }
		public TerminalNode POLYGON() { return getToken(MySqlParser.POLYGON, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public TerminalNode GEOMETRY() { return getToken(MySqlParser.GEOMETRY, 0); }
		public SpatialDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpatialDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpatialDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSpatialDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LongVarbinaryDataTypeContext extends DataTypeContext {
		public TerminalNode LONG() { return getToken(MySqlParser.LONG, 0); }
		public TerminalNode VARBINARY() { return getToken(MySqlParser.VARBINARY, 0); }
		public LongVarbinaryDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLongVarbinaryDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLongVarbinaryDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLongVarbinaryDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollectionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public CollectionOptionsContext collectionOptions() {
			return getRuleContext(CollectionOptionsContext.class,0);
		}
		public TerminalNode ENUM() { return getToken(MySqlParser.ENUM, 0); }
		public TerminalNode SET() { return getToken(MySqlParser.SET, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public CollectionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollectionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollectionDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollectionDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NationalVaryingStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(MySqlParser.NATIONAL, 0); }
		public TerminalNode VARYING() { return getToken(MySqlParser.VARYING, 0); }
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public NationalVaryingStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNationalVaryingStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNationalVaryingStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNationalVaryingStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DimensionDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode TINYINT() { return getToken(MySqlParser.TINYINT, 0); }
		public TerminalNode SMALLINT() { return getToken(MySqlParser.SMALLINT, 0); }
		public TerminalNode MEDIUMINT() { return getToken(MySqlParser.MEDIUMINT, 0); }
		public TerminalNode INT() { return getToken(MySqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public TerminalNode BIGINT() { return getToken(MySqlParser.BIGINT, 0); }
		public TerminalNode MIDDLEINT() { return getToken(MySqlParser.MIDDLEINT, 0); }
		public TerminalNode INT1() { return getToken(MySqlParser.INT1, 0); }
		public TerminalNode INT2() { return getToken(MySqlParser.INT2, 0); }
		public TerminalNode INT3() { return getToken(MySqlParser.INT3, 0); }
		public TerminalNode INT4() { return getToken(MySqlParser.INT4, 0); }
		public TerminalNode INT8() { return getToken(MySqlParser.INT8, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public List<TerminalNode> SIGNED() { return getTokens(MySqlParser.SIGNED); }
		public TerminalNode SIGNED(int i) {
			return getToken(MySqlParser.SIGNED, i);
		}
		public List<TerminalNode> UNSIGNED() { return getTokens(MySqlParser.UNSIGNED); }
		public TerminalNode UNSIGNED(int i) {
			return getToken(MySqlParser.UNSIGNED, i);
		}
		public List<TerminalNode> ZEROFILL() { return getTokens(MySqlParser.ZEROFILL); }
		public TerminalNode ZEROFILL(int i) {
			return getToken(MySqlParser.ZEROFILL, i);
		}
		public TerminalNode REAL() { return getToken(MySqlParser.REAL, 0); }
		public LengthTwoDimensionContext lengthTwoDimension() {
			return getRuleContext(LengthTwoDimensionContext.class,0);
		}
		public TerminalNode DOUBLE() { return getToken(MySqlParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(MySqlParser.PRECISION, 0); }
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public TerminalNode DEC() { return getToken(MySqlParser.DEC, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode NUMERIC() { return getToken(MySqlParser.NUMERIC, 0); }
		public TerminalNode FLOAT() { return getToken(MySqlParser.FLOAT, 0); }
		public TerminalNode FLOAT4() { return getToken(MySqlParser.FLOAT4, 0); }
		public TerminalNode FLOAT8() { return getToken(MySqlParser.FLOAT8, 0); }
		public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return getRuleContext(LengthTwoOptionalDimensionContext.class,0);
		}
		public TerminalNode BIT() { return getToken(MySqlParser.BIT, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode VARBINARY() { return getToken(MySqlParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(MySqlParser.BLOB, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public DimensionDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDimensionDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDimensionDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDimensionDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class StringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode TINYTEXT() { return getToken(MySqlParser.TINYTEXT, 0); }
		public TerminalNode TEXT() { return getToken(MySqlParser.TEXT, 0); }
		public TerminalNode MEDIUMTEXT() { return getToken(MySqlParser.MEDIUMTEXT, 0); }
		public TerminalNode LONGTEXT() { return getToken(MySqlParser.LONGTEXT, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode NVARCHAR() { return getToken(MySqlParser.NVARCHAR, 0); }
		public TerminalNode LONG() { return getToken(MySqlParser.LONG, 0); }
		public TerminalNode VARYING() { return getToken(MySqlParser.VARYING, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public List<TerminalNode> BINARY() { return getTokens(MySqlParser.BINARY); }
		public TerminalNode BINARY(int i) {
			return getToken(MySqlParser.BINARY, i);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public StringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LongVarcharDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode LONG() { return getToken(MySqlParser.LONG, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public LongVarcharDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLongVarcharDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLongVarcharDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLongVarcharDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NationalStringDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode NATIONAL() { return getToken(MySqlParser.NATIONAL, 0); }
		public TerminalNode VARCHAR() { return getToken(MySqlParser.VARCHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(MySqlParser.CHARACTER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public NationalStringDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNationalStringDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNationalStringDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNationalStringDataType(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleDataTypeContext extends DataTypeContext {
		public Token typeName;
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TINYBLOB() { return getToken(MySqlParser.TINYBLOB, 0); }
		public TerminalNode MEDIUMBLOB() { return getToken(MySqlParser.MEDIUMBLOB, 0); }
		public TerminalNode LONGBLOB() { return getToken(MySqlParser.LONGBLOB, 0); }
		public TerminalNode BOOL() { return getToken(MySqlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(MySqlParser.BOOLEAN, 0); }
		public TerminalNode SERIAL() { return getToken(MySqlParser.SERIAL, 0); }
		public SimpleDataTypeContext(DataTypeContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeContext dataType() throws RecognitionException {
		DataTypeContext _localctx = new DataTypeContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_dataType);
		int _la;
		try {
			setState(2472);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,381,_ctx) ) {
			case 1:
				_localctx = new StringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2365);
				((StringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & ((1L << (CHAR - 216)) | (1L << (VARCHAR - 216)) | (1L << (NVARCHAR - 216)) | (1L << (LONG - 216)) | (1L << (TINYTEXT - 216)) | (1L << (TEXT - 216)) | (1L << (MEDIUMTEXT - 216)) | (1L << (LONGTEXT - 216)))) != 0) || _la==NCHAR) ) {
					((StringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2367);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARYING) {
					{
					setState(2366);
					match(VARYING);
					}
				}

				setState(2370);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2369);
					lengthOneDimension();
					}
				}

				setState(2373);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,359,_ctx) ) {
				case 1:
					{
					setState(2372);
					match(BINARY);
					}
					break;
				}
				setState(2378);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,360,_ctx) ) {
				case 1:
					{
					setState(2375);
					match(COLLATE);
					setState(2376);
					collationName();
					}
					break;
				case 2:
					{
					setState(2377);
					match(BINARY);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2380);
				match(NATIONAL);
				setState(2381);
				((NationalStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==VARCHAR) ) {
					((NationalStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2383);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2382);
					lengthOneDimension();
					}
				}

				setState(2386);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(2385);
					match(BINARY);
					}
				}

				}
				break;
			case 3:
				_localctx = new NationalStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2388);
				match(NCHAR);
				setState(2389);
				((NationalStringDataTypeContext)_localctx).typeName = match(VARCHAR);
				setState(2391);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2390);
					lengthOneDimension();
					}
				}

				setState(2394);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(2393);
					match(BINARY);
					}
				}

				}
				break;
			case 4:
				_localctx = new NationalVaryingStringDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2396);
				match(NATIONAL);
				setState(2397);
				((NationalVaryingStringDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==CHARACTER || _la==CHAR) ) {
					((NationalVaryingStringDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2398);
				match(VARYING);
				setState(2400);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2399);
					lengthOneDimension();
					}
				}

				setState(2403);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(2402);
					match(BINARY);
					}
				}

				}
				break;
			case 5:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2405);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 190)) & ~0x3f) == 0 && ((1L << (_la - 190)) & ((1L << (TINYINT - 190)) | (1L << (SMALLINT - 190)) | (1L << (MEDIUMINT - 190)) | (1L << (MIDDLEINT - 190)) | (1L << (INT - 190)) | (1L << (INT1 - 190)) | (1L << (INT2 - 190)) | (1L << (INT3 - 190)) | (1L << (INT4 - 190)) | (1L << (INT8 - 190)) | (1L << (INTEGER - 190)) | (1L << (BIGINT - 190)))) != 0)) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2407);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2406);
					lengthOneDimension();
					}
				}

				setState(2412);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) {
					{
					{
					setState(2409);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(2414);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 6:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2415);
				((DimensionDataTypeContext)_localctx).typeName = match(REAL);
				setState(2417);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2416);
					lengthTwoDimension();
					}
				}

				setState(2422);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) {
					{
					{
					setState(2419);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(2424);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 7:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2425);
				((DimensionDataTypeContext)_localctx).typeName = match(DOUBLE);
				setState(2427);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(2426);
					match(PRECISION);
					}
				}

				setState(2430);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2429);
					lengthTwoDimension();
					}
				}

				setState(2435);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) {
					{
					{
					setState(2432);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(2437);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 8:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2438);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 205)) & ~0x3f) == 0 && ((1L << (_la - 205)) & ((1L << (FLOAT - 205)) | (1L << (FLOAT4 - 205)) | (1L << (FLOAT8 - 205)) | (1L << (DECIMAL - 205)) | (1L << (DEC - 205)) | (1L << (NUMERIC - 205)))) != 0) || _la==FIXED) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2440);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2439);
					lengthTwoOptionalDimension();
					}
				}

				setState(2445);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) {
					{
					{
					setState(2442);
					_la = _input.LA(1);
					if ( !(_la==UNSIGNED || _la==ZEROFILL || _la==SIGNED) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					}
					setState(2447);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 9:
				_localctx = new SimpleDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2448);
				((SimpleDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TINYBLOB - 211)) | (1L << (MEDIUMBLOB - 211)) | (1L << (LONGBLOB - 211)) | (1L << (SERIAL - 211)))) != 0) || _la==BOOL || _la==BOOLEAN) ) {
					((SimpleDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 10:
				_localctx = new DimensionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2449);
				((DimensionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 212)) & ~0x3f) == 0 && ((1L << (_la - 212)) & ((1L << (TIME - 212)) | (1L << (TIMESTAMP - 212)) | (1L << (DATETIME - 212)) | (1L << (YEAR - 212)) | (1L << (BINARY - 212)) | (1L << (VARBINARY - 212)) | (1L << (BLOB - 212)))) != 0) || _la==BIT) ) {
					((DimensionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2451);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2450);
					lengthOneDimension();
					}
				}

				}
				break;
			case 11:
				_localctx = new CollectionDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2453);
				((CollectionDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==SET || _la==ENUM) ) {
					((CollectionDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2454);
				collectionOptions();
				setState(2456);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(2455);
					match(BINARY);
					}
				}

				}
				break;
			case 12:
				_localctx = new SpatialDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(2458);
				((SpatialDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==JSON || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (GEOMETRYCOLLECTION - 783)) | (1L << (GEOMCOLLECTION - 783)) | (1L << (GEOMETRY - 783)) | (1L << (LINESTRING - 783)) | (1L << (MULTILINESTRING - 783)) | (1L << (MULTIPOINT - 783)) | (1L << (MULTIPOLYGON - 783)) | (1L << (POINT - 783)) | (1L << (POLYGON - 783)))) != 0)) ) {
					((SpatialDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 13:
				_localctx = new LongVarcharDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(2459);
				((LongVarcharDataTypeContext)_localctx).typeName = match(LONG);
				setState(2461);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARCHAR) {
					{
					setState(2460);
					match(VARCHAR);
					}
				}

				setState(2464);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BINARY) {
					{
					setState(2463);
					match(BINARY);
					}
				}

				setState(2468);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,380,_ctx) ) {
				case 1:
					{
					setState(2466);
					match(COLLATE);
					setState(2467);
					collationName();
					}
					break;
				}
				}
				break;
			case 14:
				_localctx = new LongVarbinaryDataTypeContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(2470);
				match(LONG);
				setState(2471);
				match(VARBINARY);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CollectionOptionsContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public CollectionOptionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collectionOptions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollectionOptions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollectionOptions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollectionOptions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CollectionOptionsContext collectionOptions() throws RecognitionException {
		CollectionOptionsContext _localctx = new CollectionOptionsContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_collectionOptions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2474);
			match(LR_BRACKET);
			setState(2475);
			match(STRING_LITERAL);
			setState(2480);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2476);
				match(COMMA);
				setState(2477);
				match(STRING_LITERAL);
				}
				}
				setState(2482);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2483);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConvertedDataTypeContext extends ParserRuleContext {
		public Token typeName;
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode DECIMAL() { return getToken(MySqlParser.DECIMAL, 0); }
		public TerminalNode SIGNED() { return getToken(MySqlParser.SIGNED, 0); }
		public TerminalNode UNSIGNED() { return getToken(MySqlParser.UNSIGNED, 0); }
		public TerminalNode ARRAY() { return getToken(MySqlParser.ARRAY, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public TerminalNode INT() { return getToken(MySqlParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(MySqlParser.INTEGER, 0); }
		public LengthOneDimensionContext lengthOneDimension() {
			return getRuleContext(LengthOneDimensionContext.class,0);
		}
		public LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() {
			return getRuleContext(LengthTwoOptionalDimensionContext.class,0);
		}
		public ConvertedDataTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_convertedDataType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConvertedDataType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConvertedDataType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConvertedDataType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConvertedDataTypeContext convertedDataType() throws RecognitionException {
		ConvertedDataTypeContext _localctx = new ConvertedDataTypeContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_convertedDataType);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2502);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY:
			case NCHAR:
				{
				setState(2485);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BINARY || _la==NCHAR) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2487);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2486);
					lengthOneDimension();
					}
				}

				}
				break;
			case CHAR:
				{
				setState(2489);
				((ConvertedDataTypeContext)_localctx).typeName = match(CHAR);
				setState(2491);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2490);
					lengthOneDimension();
					}
				}

				}
				break;
			case INT:
			case INTEGER:
			case DATE:
			case TIME:
			case DATETIME:
			case JSON:
				{
				setState(2493);
				((ConvertedDataTypeContext)_localctx).typeName = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 194)) & ~0x3f) == 0 && ((1L << (_la - 194)) & ((1L << (INT - 194)) | (1L << (INTEGER - 194)) | (1L << (DATE - 194)) | (1L << (TIME - 194)) | (1L << (DATETIME - 194)))) != 0) || _la==JSON) ) {
					((ConvertedDataTypeContext)_localctx).typeName = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case DECIMAL:
				{
				setState(2494);
				((ConvertedDataTypeContext)_localctx).typeName = match(DECIMAL);
				setState(2496);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2495);
					lengthTwoOptionalDimension();
					}
				}

				}
				break;
			case UNSIGNED:
			case SIGNED:
				{
				setState(2498);
				_la = _input.LA(1);
				if ( !(_la==UNSIGNED || _la==SIGNED) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2500);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTEGER) {
					{
					setState(2499);
					match(INTEGER);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2505);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ARRAY) {
				{
				setState(2504);
				match(ARRAY);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthOneDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public LengthOneDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthOneDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthOneDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthOneDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLengthOneDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthOneDimensionContext lengthOneDimension() throws RecognitionException {
		LengthOneDimensionContext _localctx = new LengthOneDimensionContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_lengthOneDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2507);
			match(LR_BRACKET);
			setState(2508);
			decimalLiteral();
			setState(2509);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public LengthTwoDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthTwoDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthTwoDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLengthTwoDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoDimensionContext lengthTwoDimension() throws RecognitionException {
		LengthTwoDimensionContext _localctx = new LengthTwoDimensionContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_lengthTwoDimension);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2511);
			match(LR_BRACKET);
			setState(2512);
			decimalLiteral();
			setState(2513);
			match(COMMA);
			setState(2514);
			decimalLiteral();
			setState(2515);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LengthTwoOptionalDimensionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public LengthTwoOptionalDimensionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lengthTwoOptionalDimension; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLengthTwoOptionalDimension(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLengthTwoOptionalDimension(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLengthTwoOptionalDimension(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LengthTwoOptionalDimensionContext lengthTwoOptionalDimension() throws RecognitionException {
		LengthTwoOptionalDimensionContext _localctx = new LengthTwoOptionalDimensionContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_lengthTwoOptionalDimension);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2517);
			match(LR_BRACKET);
			setState(2518);
			decimalLiteral();
			setState(2521);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(2519);
				match(COMMA);
				setState(2520);
				decimalLiteral();
				}
			}

			setState(2523);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UidListContext extends ParserRuleContext {
		public List<UidContext> uid() {
			return getRuleContexts(UidContext.class);
		}
		public UidContext uid(int i) {
			return getRuleContext(UidContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public UidListContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_uidList; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUidList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUidList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUidList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UidListContext uidList() throws RecognitionException {
		UidListContext _localctx = new UidListContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_uidList);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2525);
			uid();
			setState(2530);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2526);
				match(COMMA);
				setState(2527);
				uid();
				}
				}
				setState(2532);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TablesContext extends ParserRuleContext {
		public List<TableNameContext> tableName() {
			return getRuleContexts(TableNameContext.class);
		}
		public TableNameContext tableName(int i) {
			return getRuleContext(TableNameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public TablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TablesContext tables() throws RecognitionException {
		TablesContext _localctx = new TablesContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_tables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2533);
			tableName();
			setState(2538);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2534);
				match(COMMA);
				setState(2535);
				tableName();
				}
				}
				setState(2540);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IndexColumnNamesContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<IndexColumnNameContext> indexColumnName() {
			return getRuleContexts(IndexColumnNameContext.class);
		}
		public IndexColumnNameContext indexColumnName(int i) {
			return getRuleContext(IndexColumnNameContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public IndexColumnNamesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_indexColumnNames; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIndexColumnNames(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIndexColumnNames(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIndexColumnNames(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IndexColumnNamesContext indexColumnNames() throws RecognitionException {
		IndexColumnNamesContext _localctx = new IndexColumnNamesContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_indexColumnNames);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2541);
			match(LR_BRACKET);
			setState(2542);
			indexColumnName();
			setState(2547);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2543);
				match(COMMA);
				setState(2544);
				indexColumnName();
				}
				}
				setState(2549);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2550);
			match(RR_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ExpressionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressions; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressions(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressions(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressions(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsContext expressions() throws RecognitionException {
		ExpressionsContext _localctx = new ExpressionsContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_expressions);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2552);
			expression(0);
			setState(2557);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2553);
				match(COMMA);
				setState(2554);
				expression(0);
				}
				}
				setState(2559);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionsWithDefaultsContext extends ParserRuleContext {
		public List<ExpressionOrDefaultContext> expressionOrDefault() {
			return getRuleContexts(ExpressionOrDefaultContext.class);
		}
		public ExpressionOrDefaultContext expressionOrDefault(int i) {
			return getRuleContext(ExpressionOrDefaultContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ExpressionsWithDefaultsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionsWithDefaults; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionsWithDefaults(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionsWithDefaults(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressionsWithDefaults(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionsWithDefaultsContext expressionsWithDefaults() throws RecognitionException {
		ExpressionsWithDefaultsContext _localctx = new ExpressionsWithDefaultsContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_expressionsWithDefaults);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2560);
			expressionOrDefault();
			setState(2565);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2561);
				match(COMMA);
				setState(2562);
				expressionOrDefault();
				}
				}
				setState(2567);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public ConstantsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constants; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstants(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstants(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstants(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantsContext constants() throws RecognitionException {
		ConstantsContext _localctx = new ConstantsContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_constants);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2568);
			constant();
			setState(2573);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2569);
				match(COMMA);
				setState(2570);
				constant();
				}
				}
				setState(2575);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SimpleStringsContext extends ParserRuleContext {
		public List<TerminalNode> STRING_LITERAL() { return getTokens(MySqlParser.STRING_LITERAL); }
		public TerminalNode STRING_LITERAL(int i) {
			return getToken(MySqlParser.STRING_LITERAL, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public SimpleStringsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simpleStrings; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleStrings(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleStrings(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleStrings(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SimpleStringsContext simpleStrings() throws RecognitionException {
		SimpleStringsContext _localctx = new SimpleStringsContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_simpleStrings);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2576);
			match(STRING_LITERAL);
			setState(2581);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2577);
				match(COMMA);
				setState(2578);
				match(STRING_LITERAL);
				}
				}
				setState(2583);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class UserVariablesContext extends ParserRuleContext {
		public List<TerminalNode> LOCAL_ID() { return getTokens(MySqlParser.LOCAL_ID); }
		public TerminalNode LOCAL_ID(int i) {
			return getToken(MySqlParser.LOCAL_ID, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public UserVariablesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_userVariables; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUserVariables(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUserVariables(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUserVariables(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UserVariablesContext userVariables() throws RecognitionException {
		UserVariablesContext _localctx = new UserVariablesContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_userVariables);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2584);
			match(LOCAL_ID);
			setState(2589);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2585);
				match(COMMA);
				setState(2586);
				match(LOCAL_ID);
				}
				}
				setState(2591);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DefaultValueContext extends ParserRuleContext {
		public TerminalNode NULL_LITERAL() { return getToken(MySqlParser.NULL_LITERAL, 0); }
		public TerminalNode CAST() { return getToken(MySqlParser.CAST, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public List<CurrentTimestampContext> currentTimestamp() {
			return getRuleContexts(CurrentTimestampContext.class);
		}
		public CurrentTimestampContext currentTimestamp(int i) {
			return getRuleContext(CurrentTimestampContext.class,i);
		}
		public TerminalNode ON() { return getToken(MySqlParser.ON, 0); }
		public TerminalNode UPDATE() { return getToken(MySqlParser.UPDATE, 0); }
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LASTVAL() { return getToken(MySqlParser.LASTVAL, 0); }
		public TerminalNode NEXTVAL() { return getToken(MySqlParser.NEXTVAL, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public TerminalNode PREVIOUS() { return getToken(MySqlParser.PREVIOUS, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public DefaultValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_defaultValue; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDefaultValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDefaultValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDefaultValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DefaultValueContext defaultValue() throws RecognitionException {
		DefaultValueContext _localctx = new DefaultValueContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_defaultValue);
		int _la;
		try {
			setState(2627);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2592);
				match(NULL_LITERAL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2593);
				match(CAST);
				setState(2594);
				match(LR_BRACKET);
				setState(2595);
				expression(0);
				setState(2596);
				match(AS);
				setState(2597);
				convertedDataType();
				setState(2598);
				match(RR_BRACKET);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2601);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,398,_ctx) ) {
				case 1:
					{
					setState(2600);
					unaryOperator();
					}
					break;
				}
				setState(2603);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2604);
				currentTimestamp();
				setState(2608);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,399,_ctx) ) {
				case 1:
					{
					setState(2605);
					match(ON);
					setState(2606);
					match(UPDATE);
					setState(2607);
					currentTimestamp();
					}
					break;
				}
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2610);
				match(LR_BRACKET);
				setState(2611);
				expression(0);
				setState(2612);
				match(RR_BRACKET);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2614);
				_la = _input.LA(1);
				if ( !(_la==LASTVAL || _la==NEXTVAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2615);
				match(LR_BRACKET);
				setState(2616);
				fullId();
				setState(2617);
				match(RR_BRACKET);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2619);
				match(LR_BRACKET);
				setState(2620);
				_la = _input.LA(1);
				if ( !(_la==NEXT || _la==PREVIOUS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2621);
				match(VALUE);
				setState(2622);
				match(FOR);
				setState(2623);
				fullId();
				setState(2624);
				match(RR_BRACKET);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2626);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CurrentTimestampContext extends ParserRuleContext {
		public TerminalNode NOW() { return getToken(MySqlParser.NOW, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(MySqlParser.LOCALTIMESTAMP, 0); }
		public TerminalNode CURDATE() { return getToken(MySqlParser.CURDATE, 0); }
		public TerminalNode CURTIME() { return getToken(MySqlParser.CURTIME, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public CurrentTimestampContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_currentTimestamp; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCurrentTimestamp(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCurrentTimestamp(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCurrentTimestamp(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CurrentTimestampContext currentTimestamp() throws RecognitionException {
		CurrentTimestampContext _localctx = new CurrentTimestampContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_currentTimestamp);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2643);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case LOCALTIMESTAMP:
				{
				setState(2629);
				_la = _input.LA(1);
				if ( !(((((_la - 306)) & ~0x3f) == 0 && ((1L << (_la - 306)) & ((1L << (CURRENT_TIMESTAMP - 306)) | (1L << (LOCALTIME - 306)) | (1L << (CURDATE - 306)) | (1L << (CURTIME - 306)) | (1L << (LOCALTIMESTAMP - 306)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2635);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LR_BRACKET) {
					{
					setState(2630);
					match(LR_BRACKET);
					setState(2632);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (((((_la - 1128)) & ~0x3f) == 0 && ((1L << (_la - 1128)) & ((1L << (ZERO_DECIMAL - 1128)) | (1L << (ONE_DECIMAL - 1128)) | (1L << (TWO_DECIMAL - 1128)) | (1L << (DECIMAL_LITERAL - 1128)) | (1L << (REAL_LITERAL - 1128)))) != 0)) {
						{
						setState(2631);
						decimalLiteral();
						}
					}

					setState(2634);
					match(RR_BRACKET);
					}
				}

				}
				break;
			case NOW:
				{
				setState(2637);
				match(NOW);
				setState(2638);
				match(LR_BRACKET);
				setState(2640);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (((((_la - 1128)) & ~0x3f) == 0 && ((1L << (_la - 1128)) & ((1L << (ZERO_DECIMAL - 1128)) | (1L << (ONE_DECIMAL - 1128)) | (1L << (TWO_DECIMAL - 1128)) | (1L << (DECIMAL_LITERAL - 1128)) | (1L << (REAL_LITERAL - 1128)))) != 0)) {
					{
					setState(2639);
					decimalLiteral();
					}
				}

				setState(2642);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionOrDefaultContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public ExpressionOrDefaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionOrDefault; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionOrDefault(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionOrDefault(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressionOrDefault(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionOrDefaultContext expressionOrDefault() throws RecognitionException {
		ExpressionOrDefaultContext _localctx = new ExpressionOrDefaultContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_expressionOrDefault);
		try {
			setState(2647);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,405,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2645);
				expression(0);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2646);
				match(DEFAULT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIfExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIfExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIfExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfExistsContext ifExists() throws RecognitionException {
		IfExistsContext _localctx = new IfExistsContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_ifExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2649);
			match(IF);
			setState(2650);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IfNotExistsContext extends ParserRuleContext {
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_ifNotExists; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIfNotExists(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIfNotExists(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIfNotExists(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IfNotExistsContext ifNotExists() throws RecognitionException {
		IfNotExistsContext _localctx = new IfNotExistsContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_ifNotExists);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2652);
			match(IF);
			setState(2653);
			match(NOT);
			setState(2654);
			match(EXISTS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WaitNowaitClauseContext extends ParserRuleContext {
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(MySqlParser.NOWAIT, 0); }
		public WaitNowaitClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_waitNowaitClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWaitNowaitClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWaitNowaitClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWaitNowaitClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WaitNowaitClauseContext waitNowaitClause() throws RecognitionException {
		WaitNowaitClauseContext _localctx = new WaitNowaitClauseContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_waitNowaitClause);
		try {
			setState(2659);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2656);
				match(WAIT);
				setState(2657);
				decimalLiteral();
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2658);
				match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionCallContext extends ParserRuleContext {
		public FunctionCallContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionCall; }
	 
		public FunctionCallContext() { }
		public void copyFrom(FunctionCallContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SpecificFunctionCallContext extends FunctionCallContext {
		public SpecificFunctionContext specificFunction() {
			return getRuleContext(SpecificFunctionContext.class,0);
		}
		public SpecificFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSpecificFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSpecificFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSpecificFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class UdfFunctionCallContext extends FunctionCallContext {
		public FullIdContext fullId() {
			return getRuleContext(FullIdContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public UdfFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUdfFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUdfFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUdfFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NonAggregateFunctionCallContext extends FunctionCallContext {
		public NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() {
			return getRuleContext(NonAggregateWindowedFunctionContext.class,0);
		}
		public NonAggregateFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNonAggregateFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNonAggregateFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNonAggregateFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class AggregateFunctionCallContext extends FunctionCallContext {
		public AggregateWindowedFunctionContext aggregateWindowedFunction() {
			return getRuleContext(AggregateWindowedFunctionContext.class,0);
		}
		public AggregateFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAggregateFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAggregateFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAggregateFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ScalarFunctionCallContext extends FunctionCallContext {
		public ScalarFunctionNameContext scalarFunctionName() {
			return getRuleContext(ScalarFunctionNameContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public ScalarFunctionCallContext(FunctionCallContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterScalarFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitScalarFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitScalarFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionCallContext functionCall() throws RecognitionException {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_functionCall);
		try {
			setState(2678);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
			case 1:
				_localctx = new SpecificFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2661);
				specificFunction();
				}
				break;
			case 2:
				_localctx = new AggregateFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2662);
				aggregateWindowedFunction();
				}
				break;
			case 3:
				_localctx = new NonAggregateFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2663);
				nonAggregateWindowedFunction();
				}
				break;
			case 4:
				_localctx = new ScalarFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2664);
				scalarFunctionName();
				setState(2665);
				match(LR_BRACKET);
				setState(2667);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,407,_ctx) ) {
				case 1:
					{
					setState(2666);
					functionArgs();
					}
					break;
				}
				setState(2669);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new UdfFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2671);
				fullId();
				setState(2672);
				match(LR_BRACKET);
				setState(2674);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,408,_ctx) ) {
				case 1:
					{
					setState(2673);
					functionArgs();
					}
					break;
				}
				setState(2676);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SpecificFunctionContext extends ParserRuleContext {
		public SpecificFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_specificFunction; }
	 
		public SpecificFunctionContext() { }
		public void copyFrom(SpecificFunctionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class PositionFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext positionString;
		public ExpressionContext positionExpression;
		public StringLiteralContext inString;
		public ExpressionContext inExpression;
		public TerminalNode POSITION() { return getToken(MySqlParser.POSITION, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public PositionFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPositionFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPositionFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPositionFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class TrimFunctionCallContext extends SpecificFunctionContext {
		public Token positioinForm;
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public StringLiteralContext fromString;
		public ExpressionContext fromExpression;
		public TerminalNode TRIM() { return getToken(MySqlParser.TRIM, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode BOTH() { return getToken(MySqlParser.BOTH, 0); }
		public TerminalNode LEADING() { return getToken(MySqlParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(MySqlParser.TRAILING, 0); }
		public List<StringLiteralContext> stringLiteral() {
			return getRuleContexts(StringLiteralContext.class);
		}
		public StringLiteralContext stringLiteral(int i) {
			return getRuleContext(StringLiteralContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TrimFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTrimFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTrimFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTrimFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonValueFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode JSON_VALUE() { return getToken(MySqlParser.JSON_VALUE, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode RETURNING() { return getToken(MySqlParser.RETURNING, 0); }
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public List<TerminalNode> ON() { return getTokens(MySqlParser.ON); }
		public TerminalNode ON(int i) {
			return getToken(MySqlParser.ON, i);
		}
		public TerminalNode EMPTY() { return getToken(MySqlParser.EMPTY, 0); }
		public List<TerminalNode> ERROR() { return getTokens(MySqlParser.ERROR); }
		public TerminalNode ERROR(int i) {
			return getToken(MySqlParser.ERROR, i);
		}
		public List<TerminalNode> NULL_LITERAL() { return getTokens(MySqlParser.NULL_LITERAL); }
		public TerminalNode NULL_LITERAL(int i) {
			return getToken(MySqlParser.NULL_LITERAL, i);
		}
		public List<TerminalNode> DEFAULT() { return getTokens(MySqlParser.DEFAULT); }
		public TerminalNode DEFAULT(int i) {
			return getToken(MySqlParser.DEFAULT, i);
		}
		public List<DefaultValueContext> defaultValue() {
			return getRuleContexts(DefaultValueContext.class);
		}
		public DefaultValueContext defaultValue(int i) {
			return getRuleContext(DefaultValueContext.class,i);
		}
		public JsonValueFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonValueFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonValueFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonValueFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CaseFunctionCallContext extends SpecificFunctionContext {
		public FunctionArgContext elseArg;
		public TerminalNode CASE() { return getToken(MySqlParser.CASE, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<CaseFuncAlternativeContext> caseFuncAlternative() {
			return getRuleContexts(CaseFuncAlternativeContext.class);
		}
		public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return getRuleContext(CaseFuncAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public CaseFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCaseFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExtractFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public TerminalNode EXTRACT() { return getToken(MySqlParser.EXTRACT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ExtractFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExtractFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExtractFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExtractFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class DataTypeFunctionCallContext extends SpecificFunctionContext {
		public Token separator;
		public TerminalNode CONVERT() { return getToken(MySqlParser.CONVERT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConvertedDataTypeContext convertedDataType() {
			return getRuleContext(ConvertedDataTypeContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public TerminalNode CAST() { return getToken(MySqlParser.CAST, 0); }
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public DataTypeFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDataTypeFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDataTypeFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDataTypeFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ValuesFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode VALUES() { return getToken(MySqlParser.VALUES, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ValuesFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterValuesFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitValuesFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitValuesFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CaseExpressionFunctionCallContext extends SpecificFunctionContext {
		public FunctionArgContext elseArg;
		public TerminalNode CASE() { return getToken(MySqlParser.CASE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public List<CaseFuncAlternativeContext> caseFuncAlternative() {
			return getRuleContexts(CaseFuncAlternativeContext.class);
		}
		public CaseFuncAlternativeContext caseFuncAlternative(int i) {
			return getRuleContext(CaseFuncAlternativeContext.class,i);
		}
		public TerminalNode ELSE() { return getToken(MySqlParser.ELSE, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public CaseExpressionFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseExpressionFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseExpressionFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCaseExpressionFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SimpleFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CURRENT_DATE() { return getToken(MySqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(MySqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURRENT_USER() { return getToken(MySqlParser.CURRENT_USER, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public SimpleFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSimpleFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSimpleFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSimpleFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CharFunctionCallContext extends SpecificFunctionContext {
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode USING() { return getToken(MySqlParser.USING, 0); }
		public CharsetNameContext charsetName() {
			return getRuleContext(CharsetNameContext.class,0);
		}
		public CharFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class WeightFunctionCallContext extends SpecificFunctionContext {
		public Token stringFormat;
		public TerminalNode WEIGHT_STRING() { return getToken(MySqlParser.WEIGHT_STRING, 0); }
		public List<TerminalNode> LR_BRACKET() { return getTokens(MySqlParser.LR_BRACKET); }
		public TerminalNode LR_BRACKET(int i) {
			return getToken(MySqlParser.LR_BRACKET, i);
		}
		public List<TerminalNode> RR_BRACKET() { return getTokens(MySqlParser.RR_BRACKET); }
		public TerminalNode RR_BRACKET(int i) {
			return getToken(MySqlParser.RR_BRACKET, i);
		}
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(MySqlParser.AS, 0); }
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public LevelsInWeightStringContext levelsInWeightString() {
			return getRuleContext(LevelsInWeightStringContext.class,0);
		}
		public TerminalNode CHAR() { return getToken(MySqlParser.CHAR, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public WeightFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWeightFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWeightFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWeightFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class GetFormatFunctionCallContext extends SpecificFunctionContext {
		public Token datetimeFormat;
		public TerminalNode GET_FORMAT() { return getToken(MySqlParser.GET_FORMAT, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode COMMA() { return getToken(MySqlParser.COMMA, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public GetFormatFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterGetFormatFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitGetFormatFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitGetFormatFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubstrFunctionCallContext extends SpecificFunctionContext {
		public StringLiteralContext sourceString;
		public ExpressionContext sourceExpression;
		public DecimalLiteralContext fromDecimal;
		public ExpressionContext fromExpression;
		public DecimalLiteralContext forDecimal;
		public ExpressionContext forExpression;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode FROM() { return getToken(MySqlParser.FROM, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode SUBSTR() { return getToken(MySqlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(MySqlParser.SUBSTRING, 0); }
		public StringLiteralContext stringLiteral() {
			return getRuleContext(StringLiteralContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode FOR() { return getToken(MySqlParser.FOR, 0); }
		public SubstrFunctionCallContext(SpecificFunctionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubstrFunctionCall(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubstrFunctionCall(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubstrFunctionCall(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SpecificFunctionContext specificFunction() throws RecognitionException {
		SpecificFunctionContext _localctx = new SpecificFunctionContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_specificFunction);
		int _la;
		try {
			setState(2872);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,435,_ctx) ) {
			case 1:
				_localctx = new SimpleFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2680);
				_la = _input.LA(1);
				if ( !(_la==CURRENT_USER || ((((_la - 304)) & ~0x3f) == 0 && ((1L << (_la - 304)) & ((1L << (CURRENT_DATE - 304)) | (1L << (CURRENT_TIME - 304)) | (1L << (CURRENT_TIMESTAMP - 304)) | (1L << (LOCALTIME - 304)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2683);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,410,_ctx) ) {
				case 1:
					{
					setState(2681);
					match(LR_BRACKET);
					setState(2682);
					match(RR_BRACKET);
					}
					break;
				}
				}
				break;
			case 2:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2685);
				match(CONVERT);
				setState(2686);
				match(LR_BRACKET);
				setState(2687);
				expression(0);
				setState(2688);
				((DataTypeFunctionCallContext)_localctx).separator = match(COMMA);
				setState(2689);
				convertedDataType();
				setState(2690);
				match(RR_BRACKET);
				}
				break;
			case 3:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 3);
				{
				setState(2692);
				match(CONVERT);
				setState(2693);
				match(LR_BRACKET);
				setState(2694);
				expression(0);
				setState(2695);
				match(USING);
				setState(2696);
				charsetName();
				setState(2697);
				match(RR_BRACKET);
				}
				break;
			case 4:
				_localctx = new DataTypeFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 4);
				{
				setState(2699);
				match(CAST);
				setState(2700);
				match(LR_BRACKET);
				setState(2701);
				expression(0);
				setState(2702);
				match(AS);
				setState(2703);
				convertedDataType();
				setState(2704);
				match(RR_BRACKET);
				}
				break;
			case 5:
				_localctx = new ValuesFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 5);
				{
				setState(2706);
				match(VALUES);
				setState(2707);
				match(LR_BRACKET);
				setState(2708);
				fullColumnName();
				setState(2709);
				match(RR_BRACKET);
				}
				break;
			case 6:
				_localctx = new CaseExpressionFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 6);
				{
				setState(2711);
				match(CASE);
				setState(2712);
				expression(0);
				setState(2714); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2713);
					caseFuncAlternative();
					}
					}
					setState(2716); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(2720);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(2718);
					match(ELSE);
					setState(2719);
					((CaseExpressionFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(2722);
				match(END);
				}
				break;
			case 7:
				_localctx = new CaseFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 7);
				{
				setState(2724);
				match(CASE);
				setState(2726); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2725);
					caseFuncAlternative();
					}
					}
					setState(2728); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==WHEN );
				setState(2732);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ELSE) {
					{
					setState(2730);
					match(ELSE);
					setState(2731);
					((CaseFunctionCallContext)_localctx).elseArg = functionArg();
					}
				}

				setState(2734);
				match(END);
				}
				break;
			case 8:
				_localctx = new CharFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 8);
				{
				setState(2736);
				match(CHAR);
				setState(2737);
				match(LR_BRACKET);
				setState(2738);
				functionArgs();
				setState(2741);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2739);
					match(USING);
					setState(2740);
					charsetName();
					}
				}

				setState(2743);
				match(RR_BRACKET);
				}
				break;
			case 9:
				_localctx = new PositionFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 9);
				{
				setState(2745);
				match(POSITION);
				setState(2746);
				match(LR_BRACKET);
				setState(2749);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,416,_ctx) ) {
				case 1:
					{
					setState(2747);
					((PositionFunctionCallContext)_localctx).positionString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(2748);
					((PositionFunctionCallContext)_localctx).positionExpression = expression(0);
					}
					break;
				}
				setState(2751);
				match(IN);
				setState(2754);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
				case 1:
					{
					setState(2752);
					((PositionFunctionCallContext)_localctx).inString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(2753);
					((PositionFunctionCallContext)_localctx).inExpression = expression(0);
					}
					break;
				}
				setState(2756);
				match(RR_BRACKET);
				}
				break;
			case 10:
				_localctx = new SubstrFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 10);
				{
				setState(2758);
				_la = _input.LA(1);
				if ( !(_la==SUBSTR || _la==SUBSTRING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2759);
				match(LR_BRACKET);
				setState(2762);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,418,_ctx) ) {
				case 1:
					{
					setState(2760);
					((SubstrFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(2761);
					((SubstrFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(2764);
				match(FROM);
				setState(2767);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,419,_ctx) ) {
				case 1:
					{
					setState(2765);
					((SubstrFunctionCallContext)_localctx).fromDecimal = decimalLiteral();
					}
					break;
				case 2:
					{
					setState(2766);
					((SubstrFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(2774);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==FOR) {
					{
					setState(2769);
					match(FOR);
					setState(2772);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,420,_ctx) ) {
					case 1:
						{
						setState(2770);
						((SubstrFunctionCallContext)_localctx).forDecimal = decimalLiteral();
						}
						break;
					case 2:
						{
						setState(2771);
						((SubstrFunctionCallContext)_localctx).forExpression = expression(0);
						}
						break;
					}
					}
				}

				setState(2776);
				match(RR_BRACKET);
				}
				break;
			case 11:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 11);
				{
				setState(2778);
				match(TRIM);
				setState(2779);
				match(LR_BRACKET);
				setState(2780);
				((TrimFunctionCallContext)_localctx).positioinForm = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
					((TrimFunctionCallContext)_localctx).positioinForm = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2783);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,422,_ctx) ) {
				case 1:
					{
					setState(2781);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(2782);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(2785);
				match(FROM);
				setState(2788);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,423,_ctx) ) {
				case 1:
					{
					setState(2786);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(2787);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(2790);
				match(RR_BRACKET);
				}
				break;
			case 12:
				_localctx = new TrimFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 12);
				{
				setState(2792);
				match(TRIM);
				setState(2793);
				match(LR_BRACKET);
				setState(2796);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,424,_ctx) ) {
				case 1:
					{
					setState(2794);
					((TrimFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(2795);
					((TrimFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(2798);
				match(FROM);
				setState(2801);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,425,_ctx) ) {
				case 1:
					{
					setState(2799);
					((TrimFunctionCallContext)_localctx).fromString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(2800);
					((TrimFunctionCallContext)_localctx).fromExpression = expression(0);
					}
					break;
				}
				setState(2803);
				match(RR_BRACKET);
				}
				break;
			case 13:
				_localctx = new WeightFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 13);
				{
				setState(2805);
				match(WEIGHT_STRING);
				setState(2806);
				match(LR_BRACKET);
				setState(2809);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,426,_ctx) ) {
				case 1:
					{
					setState(2807);
					stringLiteral();
					}
					break;
				case 2:
					{
					setState(2808);
					expression(0);
					}
					break;
				}
				setState(2817);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(2811);
					match(AS);
					setState(2812);
					((WeightFunctionCallContext)_localctx).stringFormat = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==CHAR || _la==BINARY) ) {
						((WeightFunctionCallContext)_localctx).stringFormat = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(2813);
					match(LR_BRACKET);
					setState(2814);
					decimalLiteral();
					setState(2815);
					match(RR_BRACKET);
					}
				}

				setState(2820);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEVEL) {
					{
					setState(2819);
					levelsInWeightString();
					}
				}

				setState(2822);
				match(RR_BRACKET);
				}
				break;
			case 14:
				_localctx = new ExtractFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 14);
				{
				setState(2824);
				match(EXTRACT);
				setState(2825);
				match(LR_BRACKET);
				setState(2826);
				intervalType();
				setState(2827);
				match(FROM);
				setState(2830);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
				case 1:
					{
					setState(2828);
					((ExtractFunctionCallContext)_localctx).sourceString = stringLiteral();
					}
					break;
				case 2:
					{
					setState(2829);
					((ExtractFunctionCallContext)_localctx).sourceExpression = expression(0);
					}
					break;
				}
				setState(2832);
				match(RR_BRACKET);
				}
				break;
			case 15:
				_localctx = new GetFormatFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 15);
				{
				setState(2834);
				match(GET_FORMAT);
				setState(2835);
				match(LR_BRACKET);
				setState(2836);
				((GetFormatFunctionCallContext)_localctx).datetimeFormat = _input.LT(1);
				_la = _input.LA(1);
				if ( !(((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (DATETIME - 211)))) != 0)) ) {
					((GetFormatFunctionCallContext)_localctx).datetimeFormat = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2837);
				match(COMMA);
				setState(2838);
				stringLiteral();
				setState(2839);
				match(RR_BRACKET);
				}
				break;
			case 16:
				_localctx = new JsonValueFunctionCallContext(_localctx);
				enterOuterAlt(_localctx, 16);
				{
				setState(2841);
				match(JSON_VALUE);
				setState(2842);
				match(LR_BRACKET);
				setState(2843);
				expression(0);
				setState(2844);
				match(COMMA);
				setState(2845);
				expression(0);
				setState(2848);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURNING) {
					{
					setState(2846);
					match(RETURNING);
					setState(2847);
					convertedDataType();
					}
				}

				setState(2858);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
				case 1:
					{
					setState(2854);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NULL_LITERAL:
						{
						setState(2850);
						match(NULL_LITERAL);
						}
						break;
					case ERROR:
						{
						setState(2851);
						match(ERROR);
						}
						break;
					case DEFAULT:
						{
						{
						setState(2852);
						match(DEFAULT);
						setState(2853);
						defaultValue();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2856);
					match(ON);
					setState(2857);
					match(EMPTY);
					}
					break;
				}
				setState(2868);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT || _la==NULL_LITERAL || _la==ERROR) {
					{
					setState(2864);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NULL_LITERAL:
						{
						setState(2860);
						match(NULL_LITERAL);
						}
						break;
					case ERROR:
						{
						setState(2861);
						match(ERROR);
						}
						break;
					case DEFAULT:
						{
						{
						setState(2862);
						match(DEFAULT);
						setState(2863);
						defaultValue();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(2866);
					match(ON);
					setState(2867);
					match(ERROR);
					}
				}

				setState(2870);
				match(RR_BRACKET);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CaseFuncAlternativeContext extends ParserRuleContext {
		public FunctionArgContext condition;
		public FunctionArgContext consequent;
		public TerminalNode WHEN() { return getToken(MySqlParser.WHEN, 0); }
		public TerminalNode THEN() { return getToken(MySqlParser.THEN, 0); }
		public List<FunctionArgContext> functionArg() {
			return getRuleContexts(FunctionArgContext.class);
		}
		public FunctionArgContext functionArg(int i) {
			return getRuleContext(FunctionArgContext.class,i);
		}
		public CaseFuncAlternativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_caseFuncAlternative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCaseFuncAlternative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCaseFuncAlternative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCaseFuncAlternative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CaseFuncAlternativeContext caseFuncAlternative() throws RecognitionException {
		CaseFuncAlternativeContext _localctx = new CaseFuncAlternativeContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_caseFuncAlternative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2874);
			match(WHEN);
			setState(2875);
			((CaseFuncAlternativeContext)_localctx).condition = functionArg();
			setState(2876);
			match(THEN);
			setState(2877);
			((CaseFuncAlternativeContext)_localctx).consequent = functionArg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelsInWeightStringContext extends ParserRuleContext {
		public LevelsInWeightStringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelsInWeightString; }
	 
		public LevelsInWeightStringContext() { }
		public void copyFrom(LevelsInWeightStringContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class LevelWeightRangeContext extends LevelsInWeightStringContext {
		public DecimalLiteralContext firstLevel;
		public DecimalLiteralContext lastLevel;
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public LevelWeightRangeContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLevelWeightRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLevelWeightRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLevelWeightRange(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LevelWeightListContext extends LevelsInWeightStringContext {
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public List<LevelInWeightListElementContext> levelInWeightListElement() {
			return getRuleContexts(LevelInWeightListElementContext.class);
		}
		public LevelInWeightListElementContext levelInWeightListElement(int i) {
			return getRuleContext(LevelInWeightListElementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public LevelWeightListContext(LevelsInWeightStringContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLevelWeightList(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLevelWeightList(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLevelWeightList(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelsInWeightStringContext levelsInWeightString() throws RecognitionException {
		LevelsInWeightStringContext _localctx = new LevelsInWeightStringContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_levelsInWeightString);
		int _la;
		try {
			setState(2893);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
			case 1:
				_localctx = new LevelWeightListContext(_localctx);
				enterOuterAlt(_localctx, 1);
				{
				setState(2879);
				match(LEVEL);
				setState(2880);
				levelInWeightListElement();
				setState(2885);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2881);
					match(COMMA);
					setState(2882);
					levelInWeightListElement();
					}
					}
					setState(2887);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				_localctx = new LevelWeightRangeContext(_localctx);
				enterOuterAlt(_localctx, 2);
				{
				setState(2888);
				match(LEVEL);
				setState(2889);
				((LevelWeightRangeContext)_localctx).firstLevel = decimalLiteral();
				setState(2890);
				match(MINUS);
				setState(2891);
				((LevelWeightRangeContext)_localctx).lastLevel = decimalLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LevelInWeightListElementContext extends ParserRuleContext {
		public Token orderType;
		public DecimalLiteralContext decimalLiteral() {
			return getRuleContext(DecimalLiteralContext.class,0);
		}
		public TerminalNode ASC() { return getToken(MySqlParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(MySqlParser.DESC, 0); }
		public TerminalNode REVERSE() { return getToken(MySqlParser.REVERSE, 0); }
		public LevelInWeightListElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_levelInWeightListElement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLevelInWeightListElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLevelInWeightListElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLevelInWeightListElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LevelInWeightListElementContext levelInWeightListElement() throws RecognitionException {
		LevelInWeightListElementContext _localctx = new LevelInWeightListElementContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_levelInWeightListElement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2895);
			decimalLiteral();
			setState(2897);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC || _la==REVERSE) {
				{
				setState(2896);
				((LevelInWeightListElementContext)_localctx).orderType = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC || _la==REVERSE) ) {
					((LevelInWeightListElementContext)_localctx).orderType = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AggregateWindowedFunctionContext extends ParserRuleContext {
		public Token aggregator;
		public Token starArg;
		public Token separator;
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public FunctionArgContext functionArg() {
			return getRuleContext(FunctionArgContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode AVG() { return getToken(MySqlParser.AVG, 0); }
		public TerminalNode MAX() { return getToken(MySqlParser.MAX, 0); }
		public TerminalNode MIN() { return getToken(MySqlParser.MIN, 0); }
		public TerminalNode SUM() { return getToken(MySqlParser.SUM, 0); }
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode DISTINCT() { return getToken(MySqlParser.DISTINCT, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public FunctionArgsContext functionArgs() {
			return getRuleContext(FunctionArgsContext.class,0);
		}
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public TerminalNode BIT_AND() { return getToken(MySqlParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(MySqlParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(MySqlParser.BIT_XOR, 0); }
		public TerminalNode STD() { return getToken(MySqlParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(MySqlParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(MySqlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(MySqlParser.STDDEV_SAMP, 0); }
		public TerminalNode VAR_POP() { return getToken(MySqlParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(MySqlParser.VAR_SAMP, 0); }
		public TerminalNode VARIANCE() { return getToken(MySqlParser.VARIANCE, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(MySqlParser.GROUP_CONCAT, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<OrderByExpressionContext> orderByExpression() {
			return getRuleContexts(OrderByExpressionContext.class);
		}
		public OrderByExpressionContext orderByExpression(int i) {
			return getRuleContext(OrderByExpressionContext.class,i);
		}
		public TerminalNode SEPARATOR() { return getToken(MySqlParser.SEPARATOR, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public AggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregateWindowedFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterAggregateWindowedFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitAggregateWindowedFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitAggregateWindowedFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AggregateWindowedFunctionContext aggregateWindowedFunction() throws RecognitionException {
		AggregateWindowedFunctionContext _localctx = new AggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_aggregateWindowedFunction);
		int _la;
		try {
			setState(2958);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AVG:
			case MAX:
			case MIN:
			case SUM:
				enterOuterAlt(_localctx, 1);
				{
				setState(2899);
				_la = _input.LA(1);
				if ( !(((((_la - 277)) & ~0x3f) == 0 && ((1L << (_la - 277)) & ((1L << (AVG - 277)) | (1L << (MAX - 277)) | (1L << (MIN - 277)) | (1L << (SUM - 277)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2900);
				match(LR_BRACKET);
				setState(2902);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
				case 1:
					{
					setState(2901);
					((AggregateWindowedFunctionContext)_localctx).aggregator = _input.LT(1);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
						((AggregateWindowedFunctionContext)_localctx).aggregator = (Token)_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(2904);
				functionArg();
				setState(2905);
				match(RR_BRACKET);
				setState(2907);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,440,_ctx) ) {
				case 1:
					{
					setState(2906);
					overClause();
					}
					break;
				}
				}
				break;
			case COUNT:
				enterOuterAlt(_localctx, 2);
				{
				setState(2909);
				match(COUNT);
				setState(2910);
				match(LR_BRACKET);
				setState(2918);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,442,_ctx) ) {
				case 1:
					{
					setState(2911);
					((AggregateWindowedFunctionContext)_localctx).starArg = match(STAR);
					}
					break;
				case 2:
					{
					setState(2913);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,441,_ctx) ) {
					case 1:
						{
						setState(2912);
						((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
						}
						break;
					}
					setState(2915);
					functionArg();
					}
					break;
				case 3:
					{
					setState(2916);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
					setState(2917);
					functionArgs();
					}
					break;
				}
				setState(2920);
				match(RR_BRACKET);
				setState(2922);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,443,_ctx) ) {
				case 1:
					{
					setState(2921);
					overClause();
					}
					break;
				}
				}
				break;
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
				enterOuterAlt(_localctx, 3);
				{
				setState(2924);
				_la = _input.LA(1);
				if ( !(((((_la - 278)) & ~0x3f) == 0 && ((1L << (_la - 278)) & ((1L << (BIT_AND - 278)) | (1L << (BIT_OR - 278)) | (1L << (BIT_XOR - 278)) | (1L << (STD - 278)) | (1L << (STDDEV - 278)) | (1L << (STDDEV_POP - 278)) | (1L << (STDDEV_SAMP - 278)) | (1L << (VAR_POP - 278)) | (1L << (VAR_SAMP - 278)) | (1L << (VARIANCE - 278)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2925);
				match(LR_BRACKET);
				setState(2927);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,444,_ctx) ) {
				case 1:
					{
					setState(2926);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(ALL);
					}
					break;
				}
				setState(2929);
				functionArg();
				setState(2930);
				match(RR_BRACKET);
				setState(2932);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
				case 1:
					{
					setState(2931);
					overClause();
					}
					break;
				}
				}
				break;
			case GROUP_CONCAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(2934);
				match(GROUP_CONCAT);
				setState(2935);
				match(LR_BRACKET);
				setState(2937);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,446,_ctx) ) {
				case 1:
					{
					setState(2936);
					((AggregateWindowedFunctionContext)_localctx).aggregator = match(DISTINCT);
					}
					break;
				}
				setState(2939);
				functionArgs();
				setState(2950);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(2940);
					match(ORDER);
					setState(2941);
					match(BY);
					setState(2942);
					orderByExpression();
					setState(2947);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(2943);
						match(COMMA);
						setState(2944);
						orderByExpression();
						}
						}
						setState(2949);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					}
				}

				setState(2954);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SEPARATOR) {
					{
					setState(2952);
					match(SEPARATOR);
					setState(2953);
					((AggregateWindowedFunctionContext)_localctx).separator = match(STRING_LITERAL);
					}
				}

				setState(2956);
				match(RR_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NonAggregateWindowedFunctionContext extends ParserRuleContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public OverClauseContext overClause() {
			return getRuleContext(OverClauseContext.class,0);
		}
		public TerminalNode LAG() { return getToken(MySqlParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(MySqlParser.LEAD, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public List<DecimalLiteralContext> decimalLiteral() {
			return getRuleContexts(DecimalLiteralContext.class);
		}
		public DecimalLiteralContext decimalLiteral(int i) {
			return getRuleContext(DecimalLiteralContext.class,i);
		}
		public TerminalNode FIRST_VALUE() { return getToken(MySqlParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(MySqlParser.LAST_VALUE, 0); }
		public TerminalNode CUME_DIST() { return getToken(MySqlParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(MySqlParser.DENSE_RANK, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(MySqlParser.PERCENT_RANK, 0); }
		public TerminalNode RANK() { return getToken(MySqlParser.RANK, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(MySqlParser.ROW_NUMBER, 0); }
		public TerminalNode NTH_VALUE() { return getToken(MySqlParser.NTH_VALUE, 0); }
		public TerminalNode NTILE() { return getToken(MySqlParser.NTILE, 0); }
		public NonAggregateWindowedFunctionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nonAggregateWindowedFunction; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNonAggregateWindowedFunction(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNonAggregateWindowedFunction(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNonAggregateWindowedFunction(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NonAggregateWindowedFunctionContext nonAggregateWindowedFunction() throws RecognitionException {
		NonAggregateWindowedFunctionContext _localctx = new NonAggregateWindowedFunctionContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_nonAggregateWindowedFunction);
		int _la;
		try {
			setState(2998);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LAG:
			case LEAD:
				enterOuterAlt(_localctx, 1);
				{
				setState(2960);
				_la = _input.LA(1);
				if ( !(_la==LAG || _la==LEAD) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2961);
				match(LR_BRACKET);
				setState(2962);
				expression(0);
				setState(2965);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
				case 1:
					{
					setState(2963);
					match(COMMA);
					setState(2964);
					decimalLiteral();
					}
					break;
				}
				setState(2969);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(2967);
					match(COMMA);
					setState(2968);
					decimalLiteral();
					}
				}

				setState(2971);
				match(RR_BRACKET);
				setState(2972);
				overClause();
				}
				break;
			case FIRST_VALUE:
			case LAST_VALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(2974);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2975);
				match(LR_BRACKET);
				setState(2976);
				expression(0);
				setState(2977);
				match(RR_BRACKET);
				setState(2978);
				overClause();
				}
				break;
			case CUME_DIST:
			case DENSE_RANK:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
				enterOuterAlt(_localctx, 3);
				{
				setState(2980);
				_la = _input.LA(1);
				if ( !(((((_la - 282)) & ~0x3f) == 0 && ((1L << (_la - 282)) & ((1L << (CUME_DIST - 282)) | (1L << (DENSE_RANK - 282)) | (1L << (PERCENT_RANK - 282)) | (1L << (RANK - 282)) | (1L << (ROW_NUMBER - 282)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2981);
				match(LR_BRACKET);
				setState(2982);
				match(RR_BRACKET);
				setState(2983);
				overClause();
				}
				break;
			case NTH_VALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(2984);
				match(NTH_VALUE);
				setState(2985);
				match(LR_BRACKET);
				setState(2986);
				expression(0);
				setState(2987);
				match(COMMA);
				setState(2988);
				decimalLiteral();
				setState(2989);
				match(RR_BRACKET);
				setState(2990);
				overClause();
				}
				break;
			case NTILE:
				enterOuterAlt(_localctx, 5);
				{
				setState(2992);
				match(NTILE);
				setState(2993);
				match(LR_BRACKET);
				setState(2994);
				decimalLiteral();
				setState(2995);
				match(RR_BRACKET);
				setState(2996);
				overClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OverClauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(MySqlParser.OVER, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public WindowSpecContext windowSpec() {
			return getRuleContext(WindowSpecContext.class,0);
		}
		public OverClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_overClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterOverClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitOverClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitOverClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OverClauseContext overClause() throws RecognitionException {
		OverClauseContext _localctx = new OverClauseContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_overClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3000);
			match(OVER);
			setState(3007);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LR_BRACKET:
				{
				setState(3001);
				match(LR_BRACKET);
				setState(3003);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,454,_ctx) ) {
				case 1:
					{
					setState(3002);
					windowSpec();
					}
					break;
				}
				setState(3005);
				match(RR_BRACKET);
				}
				break;
			case BUCKETS:
			case CURRENT:
			case DATABASE:
			case DEFAULT:
			case DIAGNOSTICS:
			case EXCEPT:
			case GROUP:
			case IF:
			case IGNORED:
			case INSERT:
			case LEFT:
			case LOCKED:
			case MAXVALUE:
			case MINVALUE:
			case NUMBER:
			case OPTIONAL:
			case ORDER:
			case PRIMARY:
			case REPLACE:
			case RIGHT:
			case SCHEMA:
			case SKIP_:
			case STACKED:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case DATETIME:
			case YEAR:
			case BINARY:
			case TEXT:
			case ENUM:
			case SERIAL:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case AVG:
			case BIT_AND:
			case BIT_OR:
			case BIT_XOR:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case GROUP_CONCAT:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case MAX:
			case MIN:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case STD:
			case STDDEV:
			case STDDEV_POP:
			case STDDEV_SAMP:
			case SUM:
			case VAR_POP:
			case VAR_SAMP:
			case VARIANCE:
			case CURRENT_DATE:
			case CURRENT_TIME:
			case CURRENT_TIMESTAMP:
			case LOCALTIME:
			case CURDATE:
			case CURTIME:
			case DATE_ADD:
			case DATE_SUB:
			case LOCALTIMESTAMP:
			case NOW:
			case POSITION:
			case SUBSTR:
			case SUBSTRING:
			case SYSDATE:
			case TRIM:
			case UTC_DATE:
			case UTC_TIME:
			case UTC_TIMESTAMP:
			case ACCOUNT:
			case ACTION:
			case AFTER:
			case AGGREGATE:
			case ALGORITHM:
			case ANY:
			case AT:
			case AUTHORS:
			case AUTOCOMMIT:
			case AUTOEXTEND_SIZE:
			case AUTO_INCREMENT:
			case AVG_ROW_LENGTH:
			case BEGIN:
			case BINLOG:
			case BIT:
			case BLOCK:
			case BOOL:
			case BOOLEAN:
			case BTREE:
			case CACHE:
			case CASCADED:
			case CHAIN:
			case CHANGED:
			case CHANNEL:
			case CHECKSUM:
			case PAGE_CHECKSUM:
			case CIPHER:
			case CLASS_ORIGIN:
			case CLIENT:
			case CLOSE:
			case CLUSTERING:
			case COALESCE:
			case CODE:
			case COLUMNS:
			case COLUMN_FORMAT:
			case COLUMN_NAME:
			case COMMENT:
			case COMMIT:
			case COMPACT:
			case COMPLETION:
			case COMPRESSED:
			case COMPRESSION:
			case CONCURRENT:
			case CONNECT:
			case CONNECTION:
			case CONSISTENT:
			case CONSTRAINT_CATALOG:
			case CONSTRAINT_SCHEMA:
			case CONSTRAINT_NAME:
			case CONTAINS:
			case CONTEXT:
			case CONTRIBUTORS:
			case COPY:
			case CPU:
			case CYCLE:
			case CURSOR_NAME:
			case DATA:
			case DATAFILE:
			case DEALLOCATE:
			case DEFAULT_AUTH:
			case DEFINER:
			case DELAY_KEY_WRITE:
			case DES_KEY_FILE:
			case DIRECTORY:
			case DISABLE:
			case DISCARD:
			case DISK:
			case DO:
			case DUMPFILE:
			case DUPLICATE:
			case DYNAMIC:
			case ENABLE:
			case ENCRYPTION:
			case END:
			case ENDS:
			case ENGINE:
			case ENGINES:
			case ERROR:
			case ERRORS:
			case ESCAPE:
			case EVEN:
			case EVENT:
			case EVENTS:
			case EVERY:
			case EXCHANGE:
			case EXCLUSIVE:
			case EXPIRE:
			case EXPORT:
			case EXTENDED:
			case EXTENT_SIZE:
			case FAST:
			case FAULTS:
			case FIELDS:
			case FILE_BLOCK_SIZE:
			case FILTER:
			case FIRST:
			case FIXED:
			case FLUSH:
			case FOLLOWS:
			case FOUND:
			case FULL:
			case FUNCTION:
			case GENERAL:
			case GLOBAL:
			case GRANTS:
			case GROUP_REPLICATION:
			case HANDLER:
			case HASH:
			case HELP:
			case HOST:
			case HOSTS:
			case IDENTIFIED:
			case IGNORE_SERVER_IDS:
			case IMPORT:
			case INCREMENT:
			case INDEXES:
			case INITIAL_SIZE:
			case INPLACE:
			case INSERT_METHOD:
			case INSTALL:
			case INSTANCE:
			case INSTANT:
			case INVISIBLE:
			case INVOKER:
			case IO:
			case IO_THREAD:
			case IPC:
			case ISOLATION:
			case ISSUER:
			case JSON:
			case KEY_BLOCK_SIZE:
			case LANGUAGE:
			case LAST:
			case LEAVES:
			case LESS:
			case LEVEL:
			case LIST:
			case LOCAL:
			case LOGFILE:
			case LOGS:
			case MASTER:
			case MASTER_AUTO_POSITION:
			case MASTER_CONNECT_RETRY:
			case MASTER_DELAY:
			case MASTER_HEARTBEAT_PERIOD:
			case MASTER_HOST:
			case MASTER_LOG_FILE:
			case MASTER_LOG_POS:
			case MASTER_PASSWORD:
			case MASTER_PORT:
			case MASTER_RETRY_COUNT:
			case MASTER_SSL:
			case MASTER_SSL_CA:
			case MASTER_SSL_CAPATH:
			case MASTER_SSL_CERT:
			case MASTER_SSL_CIPHER:
			case MASTER_SSL_CRL:
			case MASTER_SSL_CRLPATH:
			case MASTER_SSL_KEY:
			case MASTER_TLS_VERSION:
			case MASTER_USER:
			case MAX_CONNECTIONS_PER_HOUR:
			case MAX_QUERIES_PER_HOUR:
			case MAX_ROWS:
			case MAX_SIZE:
			case MAX_UPDATES_PER_HOUR:
			case MAX_USER_CONNECTIONS:
			case MEDIUM:
			case MEMBER:
			case MERGE:
			case MESSAGE_TEXT:
			case MID:
			case MIGRATE:
			case MIN_ROWS:
			case MODE:
			case MODIFY:
			case MUTEX:
			case MYSQL:
			case MYSQL_ERRNO:
			case NAME:
			case NAMES:
			case NCHAR:
			case NEVER:
			case NEXT:
			case NO:
			case NOCACHE:
			case NOCOPY:
			case NOCYCLE:
			case NOMAXVALUE:
			case NOMINVALUE:
			case NOWAIT:
			case NODEGROUP:
			case NONE:
			case ODBC:
			case OFFLINE:
			case OFFSET:
			case OF:
			case OJ:
			case OLD_PASSWORD:
			case ONE:
			case ONLINE:
			case ONLY:
			case OPEN:
			case OPTIMIZER_COSTS:
			case OPTIONS:
			case OWNER:
			case PACK_KEYS:
			case PAGE:
			case PARSER:
			case PARTIAL:
			case PARTITIONING:
			case PARTITIONS:
			case PASSWORD:
			case PHASE:
			case PLUGIN:
			case PLUGIN_DIR:
			case PLUGINS:
			case PORT:
			case PRECEDES:
			case PREPARE:
			case PRESERVE:
			case PREV:
			case PROCESSLIST:
			case PROFILE:
			case PROFILES:
			case PROXY:
			case QUERY:
			case QUICK:
			case REBUILD:
			case RECOVER:
			case RECURSIVE:
			case REDO_BUFFER_SIZE:
			case REDUNDANT:
			case RELAY:
			case RELAY_LOG_FILE:
			case RELAY_LOG_POS:
			case RELAYLOG:
			case REMOVE:
			case REORGANIZE:
			case REPAIR:
			case REPLICATE_DO_DB:
			case REPLICATE_DO_TABLE:
			case REPLICATE_IGNORE_DB:
			case REPLICATE_IGNORE_TABLE:
			case REPLICATE_REWRITE_DB:
			case REPLICATE_WILD_DO_TABLE:
			case REPLICATE_WILD_IGNORE_TABLE:
			case REPLICATION:
			case RESET:
			case RESTART:
			case RESUME:
			case RETURNED_SQLSTATE:
			case RETURNS:
			case ROLE:
			case ROLLBACK:
			case ROLLUP:
			case ROTATE:
			case ROW:
			case ROWS:
			case ROW_FORMAT:
			case RTREE:
			case SAVEPOINT:
			case SCHEDULE:
			case SECURITY:
			case SEQUENCE:
			case SERVER:
			case SESSION:
			case SHARE:
			case SHARED:
			case SIGNED:
			case SIMPLE:
			case SLAVE:
			case SLOW:
			case SNAPSHOT:
			case SOCKET:
			case SOME:
			case SONAME:
			case SOUNDS:
			case SOURCE:
			case SQL_AFTER_GTIDS:
			case SQL_AFTER_MTS_GAPS:
			case SQL_BEFORE_GTIDS:
			case SQL_BUFFER_RESULT:
			case SQL_CACHE:
			case SQL_NO_CACHE:
			case SQL_THREAD:
			case START:
			case STARTS:
			case STATS_AUTO_RECALC:
			case STATS_PERSISTENT:
			case STATS_SAMPLE_PAGES:
			case STATUS:
			case STOP:
			case STORAGE:
			case STRING:
			case SUBCLASS_ORIGIN:
			case SUBJECT:
			case SUBPARTITION:
			case SUBPARTITIONS:
			case SUSPEND:
			case SWAPS:
			case SWITCHES:
			case TABLE_NAME:
			case TABLESPACE:
			case TABLE_TYPE:
			case TEMPORARY:
			case TEMPTABLE:
			case THAN:
			case TRADITIONAL:
			case TRANSACTION:
			case TRANSACTIONAL:
			case TRIGGERS:
			case TRUNCATE:
			case UNDEFINED:
			case UNDOFILE:
			case UNDO_BUFFER_SIZE:
			case UNINSTALL:
			case UNKNOWN:
			case UNTIL:
			case UPGRADE:
			case USER:
			case USE_FRM:
			case USER_RESOURCES:
			case VALIDATION:
			case VALUE:
			case VARIABLES:
			case VIEW:
			case VIRTUAL:
			case VISIBLE:
			case WAIT:
			case WARNINGS:
			case WITHOUT:
			case WORK:
			case WRAPPER:
			case X509:
			case XA:
			case XML:
			case EUR:
			case USA:
			case JIS:
			case ISO:
			case INTERNAL:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case TABLES:
			case ROUTINE:
			case EXECUTE:
			case FILE:
			case PROCESS:
			case RELOAD:
			case SHUTDOWN:
			case SUPER:
			case PRIVILEGES:
			case AUDIT_ADMIN:
			case BACKUP_ADMIN:
			case BINLOG_ADMIN:
			case BINLOG_ENCRYPTION_ADMIN:
			case CLONE_ADMIN:
			case CONNECTION_ADMIN:
			case ENCRYPTION_KEY_ADMIN:
			case FIREWALL_ADMIN:
			case FIREWALL_USER:
			case ADMIN:
			case GROUP_REPLICATION_ADMIN:
			case INNODB_REDO_LOG_ARCHIVE:
			case INVOKE:
			case LAMBDA:
			case NDB_STORED_USER:
			case PASSWORDLESS_USER_ADMIN:
			case PERSIST_RO_VARIABLES_ADMIN:
			case REPLICATION_APPLIER:
			case REPLICATION_SLAVE_ADMIN:
			case RESOURCE_GROUP_ADMIN:
			case RESOURCE_GROUP_USER:
			case ROLE_ADMIN:
			case S3:
			case SESSION_VARIABLES_ADMIN:
			case SET_USER_ID:
			case SHOW_ROUTINE:
			case SYSTEM_VARIABLES_ADMIN:
			case TABLE_ENCRYPTION_ADMIN:
			case VERSION_TOKEN_ADMIN:
			case XA_RECOVER_ADMIN:
			case ARMSCII8:
			case ASCII:
			case BIG5:
			case CP1250:
			case CP1251:
			case CP1256:
			case CP1257:
			case CP850:
			case CP852:
			case CP866:
			case CP932:
			case DEC8:
			case EUCJPMS:
			case EUCKR:
			case GB18030:
			case GB2312:
			case GBK:
			case GEOSTD8:
			case GREEK:
			case HEBREW:
			case HP8:
			case KEYBCS2:
			case KOI8R:
			case KOI8U:
			case LATIN1:
			case LATIN2:
			case LATIN5:
			case LATIN7:
			case MACCE:
			case MACROMAN:
			case SJIS:
			case SWE7:
			case TIS620:
			case UCS2:
			case UJIS:
			case UTF16:
			case UTF16LE:
			case UTF32:
			case UTF8:
			case UTF8MB3:
			case UTF8MB4:
			case ARCHIVE:
			case BLACKHOLE:
			case CSV:
			case FEDERATED:
			case INNODB:
			case MEMORY:
			case MRG_MYISAM:
			case MYISAM:
			case NDB:
			case NDBCLUSTER:
			case PERFORMANCE_SCHEMA:
			case TOKUDB:
			case REPEATABLE:
			case COMMITTED:
			case UNCOMMITTED:
			case SERIALIZABLE:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CATALOG_NAME:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENGINE_ATTRIBUTE:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SECONDARY_ENGINE_ATTRIBUTE:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SCHEMA_NAME:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case VIA:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case PREVIOUS:
			case PERSISTENT:
			case BINLOG_MONITOR:
			case BINLOG_REPLAY:
			case FEDERATED_ADMIN:
			case READ_ONLY_ADMIN:
			case REPLICA:
			case REPLICATION_MASTER_ADMIN:
			case MOD:
			case CHARSET_REVERSE_QOUTE_STRING:
			case STRING_LITERAL:
			case ID:
			case REVERSE_QUOTE_ID:
			case ENCRYPTED:
			case ENCRYPTION_KEY_ID:
				{
				setState(3006);
				windowName();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowSpecContext extends ParserRuleContext {
		public WindowNameContext windowName() {
			return getRuleContext(WindowNameContext.class,0);
		}
		public PartitionClauseContext partitionClause() {
			return getRuleContext(PartitionClauseContext.class,0);
		}
		public OrderByClauseContext orderByClause() {
			return getRuleContext(OrderByClauseContext.class,0);
		}
		public FrameClauseContext frameClause() {
			return getRuleContext(FrameClauseContext.class,0);
		}
		public WindowSpecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowSpec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWindowSpec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWindowSpec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWindowSpec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowSpecContext windowSpec() throws RecognitionException {
		WindowSpecContext _localctx = new WindowSpecContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_windowSpec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3010);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
			case 1:
				{
				setState(3009);
				windowName();
				}
				break;
			}
			setState(3013);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3012);
				partitionClause();
				}
			}

			setState(3016);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3015);
				orderByClause();
				}
			}

			setState(3019);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE || _la==ROWS) {
				{
				setState(3018);
				frameClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class WindowNameContext extends ParserRuleContext {
		public UidContext uid() {
			return getRuleContext(UidContext.class,0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterWindowName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitWindowName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitWindowName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final WindowNameContext windowName() throws RecognitionException {
		WindowNameContext _localctx = new WindowNameContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_windowName);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3021);
			uid();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameClauseContext extends ParserRuleContext {
		public FrameUnitsContext frameUnits() {
			return getRuleContext(FrameUnitsContext.class,0);
		}
		public FrameExtentContext frameExtent() {
			return getRuleContext(FrameExtentContext.class,0);
		}
		public FrameClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFrameClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFrameClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFrameClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameClauseContext frameClause() throws RecognitionException {
		FrameClauseContext _localctx = new FrameClauseContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_frameClause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3023);
			frameUnits();
			setState(3024);
			frameExtent();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameUnitsContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(MySqlParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(MySqlParser.RANGE, 0); }
		public FrameUnitsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameUnits; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFrameUnits(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFrameUnits(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFrameUnits(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameUnitsContext frameUnits() throws RecognitionException {
		FrameUnitsContext _localctx = new FrameUnitsContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_frameUnits);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3026);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameExtentContext extends ParserRuleContext {
		public FrameRangeContext frameRange() {
			return getRuleContext(FrameRangeContext.class,0);
		}
		public FrameBetweenContext frameBetween() {
			return getRuleContext(FrameBetweenContext.class,0);
		}
		public FrameExtentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameExtent; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFrameExtent(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFrameExtent(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFrameExtent(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameExtentContext frameExtent() throws RecognitionException {
		FrameExtentContext _localctx = new FrameExtentContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_frameExtent);
		try {
			setState(3030);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,460,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3028);
				frameRange();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3029);
				frameBetween();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameBetweenContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(MySqlParser.BETWEEN, 0); }
		public List<FrameRangeContext> frameRange() {
			return getRuleContexts(FrameRangeContext.class);
		}
		public FrameRangeContext frameRange(int i) {
			return getRuleContext(FrameRangeContext.class,i);
		}
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public FrameBetweenContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameBetween; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFrameBetween(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFrameBetween(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFrameBetween(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameBetweenContext frameBetween() throws RecognitionException {
		FrameBetweenContext _localctx = new FrameBetweenContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_frameBetween);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3032);
			match(BETWEEN);
			setState(3033);
			frameRange();
			setState(3034);
			match(AND);
			setState(3035);
			frameRange();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FrameRangeContext extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode UNBOUNDED() { return getToken(MySqlParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(MySqlParser.PRECEDING, 0); }
		public TerminalNode FOLLOWING() { return getToken(MySqlParser.FOLLOWING, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FrameRangeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_frameRange; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFrameRange(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFrameRange(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFrameRange(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FrameRangeContext frameRange() throws RecognitionException {
		FrameRangeContext _localctx = new FrameRangeContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_frameRange);
		int _la;
		try {
			setState(3044);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,461,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3037);
				match(CURRENT);
				setState(3038);
				match(ROW);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3039);
				match(UNBOUNDED);
				setState(3040);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3041);
				expression(0);
				setState(3042);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PartitionClauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(MySqlParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(MySqlParser.BY, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partitionClause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPartitionClause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPartitionClause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPartitionClause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PartitionClauseContext partitionClause() throws RecognitionException {
		PartitionClauseContext _localctx = new PartitionClauseContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_partitionClause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3046);
			match(PARTITION);
			setState(3047);
			match(BY);
			setState(3048);
			expression(0);
			setState(3053);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3049);
				match(COMMA);
				setState(3050);
				expression(0);
				}
				}
				setState(3055);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ScalarFunctionNameContext extends ParserRuleContext {
		public FunctionNameBaseContext functionNameBase() {
			return getRuleContext(FunctionNameBaseContext.class,0);
		}
		public TerminalNode ASCII() { return getToken(MySqlParser.ASCII, 0); }
		public TerminalNode CURDATE() { return getToken(MySqlParser.CURDATE, 0); }
		public TerminalNode CURRENT_DATE() { return getToken(MySqlParser.CURRENT_DATE, 0); }
		public TerminalNode CURRENT_TIME() { return getToken(MySqlParser.CURRENT_TIME, 0); }
		public TerminalNode CURRENT_TIMESTAMP() { return getToken(MySqlParser.CURRENT_TIMESTAMP, 0); }
		public TerminalNode CURTIME() { return getToken(MySqlParser.CURTIME, 0); }
		public TerminalNode DATE_ADD() { return getToken(MySqlParser.DATE_ADD, 0); }
		public TerminalNode DATE_SUB() { return getToken(MySqlParser.DATE_SUB, 0); }
		public TerminalNode IF() { return getToken(MySqlParser.IF, 0); }
		public TerminalNode INSERT() { return getToken(MySqlParser.INSERT, 0); }
		public TerminalNode LOCALTIME() { return getToken(MySqlParser.LOCALTIME, 0); }
		public TerminalNode LOCALTIMESTAMP() { return getToken(MySqlParser.LOCALTIMESTAMP, 0); }
		public TerminalNode MID() { return getToken(MySqlParser.MID, 0); }
		public TerminalNode NOW() { return getToken(MySqlParser.NOW, 0); }
		public TerminalNode REPLACE() { return getToken(MySqlParser.REPLACE, 0); }
		public TerminalNode SUBSTR() { return getToken(MySqlParser.SUBSTR, 0); }
		public TerminalNode SUBSTRING() { return getToken(MySqlParser.SUBSTRING, 0); }
		public TerminalNode SYSDATE() { return getToken(MySqlParser.SYSDATE, 0); }
		public TerminalNode TRIM() { return getToken(MySqlParser.TRIM, 0); }
		public TerminalNode UTC_DATE() { return getToken(MySqlParser.UTC_DATE, 0); }
		public TerminalNode UTC_TIME() { return getToken(MySqlParser.UTC_TIME, 0); }
		public TerminalNode UTC_TIMESTAMP() { return getToken(MySqlParser.UTC_TIMESTAMP, 0); }
		public ScalarFunctionNameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_scalarFunctionName; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterScalarFunctionName(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitScalarFunctionName(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitScalarFunctionName(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ScalarFunctionNameContext scalarFunctionName() throws RecognitionException {
		ScalarFunctionNameContext _localctx = new ScalarFunctionNameContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_scalarFunctionName);
		try {
			setState(3079);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATABASE:
			case LEFT:
			case RIGHT:
			case SCHEMA:
			case DATE:
			case TIME:
			case TIMESTAMP:
			case YEAR:
			case JSON_ARRAY:
			case JSON_OBJECT:
			case JSON_QUOTE:
			case JSON_CONTAINS:
			case JSON_CONTAINS_PATH:
			case JSON_EXTRACT:
			case JSON_KEYS:
			case JSON_OVERLAPS:
			case JSON_SEARCH:
			case JSON_VALUE:
			case JSON_ARRAY_APPEND:
			case JSON_ARRAY_INSERT:
			case JSON_INSERT:
			case JSON_MERGE:
			case JSON_MERGE_PATCH:
			case JSON_MERGE_PRESERVE:
			case JSON_REMOVE:
			case JSON_REPLACE:
			case JSON_SET:
			case JSON_UNQUOTE:
			case JSON_DEPTH:
			case JSON_LENGTH:
			case JSON_TYPE:
			case JSON_VALID:
			case JSON_TABLE:
			case JSON_SCHEMA_VALID:
			case JSON_SCHEMA_VALIDATION_REPORT:
			case JSON_PRETTY:
			case JSON_STORAGE_FREE:
			case JSON_STORAGE_SIZE:
			case JSON_ARRAYAGG:
			case JSON_OBJECTAGG:
			case COUNT:
			case CUME_DIST:
			case DENSE_RANK:
			case FIRST_VALUE:
			case LAG:
			case LAST_VALUE:
			case LEAD:
			case NTILE:
			case NTH_VALUE:
			case PERCENT_RANK:
			case RANK:
			case ROW_NUMBER:
			case POSITION:
			case INVISIBLE:
			case VISIBLE:
			case QUARTER:
			case MONTH:
			case DAY:
			case HOUR:
			case MINUTE:
			case WEEK:
			case SECOND:
			case MICROSECOND:
			case SESSION_VARIABLES_ADMIN:
			case GEOMETRYCOLLECTION:
			case LINESTRING:
			case MULTILINESTRING:
			case MULTIPOINT:
			case MULTIPOLYGON:
			case POINT:
			case POLYGON:
			case ABS:
			case ACOS:
			case ADDDATE:
			case ADDTIME:
			case AES_DECRYPT:
			case AES_ENCRYPT:
			case AREA:
			case ASBINARY:
			case ASIN:
			case ASTEXT:
			case ASWKB:
			case ASWKT:
			case ASYMMETRIC_DECRYPT:
			case ASYMMETRIC_DERIVE:
			case ASYMMETRIC_ENCRYPT:
			case ASYMMETRIC_SIGN:
			case ASYMMETRIC_VERIFY:
			case ATAN:
			case ATAN2:
			case BENCHMARK:
			case BIN:
			case BIT_COUNT:
			case BIT_LENGTH:
			case BUFFER:
			case CEIL:
			case CEILING:
			case CENTROID:
			case CHARACTER_LENGTH:
			case CHARSET:
			case CHAR_LENGTH:
			case COERCIBILITY:
			case COLLATION:
			case COMPRESS:
			case CONCAT:
			case CONCAT_WS:
			case CONNECTION_ID:
			case CONV:
			case CONVERT_TZ:
			case COS:
			case COT:
			case CRC32:
			case CREATE_ASYMMETRIC_PRIV_KEY:
			case CREATE_ASYMMETRIC_PUB_KEY:
			case CREATE_DH_PARAMETERS:
			case CREATE_DIGEST:
			case CROSSES:
			case DATEDIFF:
			case DATE_FORMAT:
			case DAYNAME:
			case DAYOFMONTH:
			case DAYOFWEEK:
			case DAYOFYEAR:
			case DECODE:
			case DEGREES:
			case DES_DECRYPT:
			case DES_ENCRYPT:
			case DIMENSION:
			case DISJOINT:
			case ELT:
			case ENCODE:
			case ENCRYPT:
			case ENDPOINT:
			case ENVELOPE:
			case EQUALS:
			case EXP:
			case EXPORT_SET:
			case EXTERIORRING:
			case EXTRACTVALUE:
			case FIELD:
			case FIND_IN_SET:
			case FLOOR:
			case FORMAT:
			case FOUND_ROWS:
			case FROM_BASE64:
			case FROM_DAYS:
			case FROM_UNIXTIME:
			case GEOMCOLLFROMTEXT:
			case GEOMCOLLFROMWKB:
			case GEOMETRYCOLLECTIONFROMTEXT:
			case GEOMETRYCOLLECTIONFROMWKB:
			case GEOMETRYFROMTEXT:
			case GEOMETRYFROMWKB:
			case GEOMETRYN:
			case GEOMETRYTYPE:
			case GEOMFROMTEXT:
			case GEOMFROMWKB:
			case GET_FORMAT:
			case GET_LOCK:
			case GLENGTH:
			case GREATEST:
			case GTID_SUBSET:
			case GTID_SUBTRACT:
			case HEX:
			case IFNULL:
			case INET6_ATON:
			case INET6_NTOA:
			case INET_ATON:
			case INET_NTOA:
			case INSTR:
			case INTERIORRINGN:
			case INTERSECTS:
			case ISCLOSED:
			case ISEMPTY:
			case ISNULL:
			case ISSIMPLE:
			case IS_FREE_LOCK:
			case IS_IPV4:
			case IS_IPV4_COMPAT:
			case IS_IPV4_MAPPED:
			case IS_IPV6:
			case IS_USED_LOCK:
			case LAST_INSERT_ID:
			case LCASE:
			case LEAST:
			case LENGTH:
			case LINEFROMTEXT:
			case LINEFROMWKB:
			case LINESTRINGFROMTEXT:
			case LINESTRINGFROMWKB:
			case LN:
			case LOAD_FILE:
			case LOCATE:
			case LOG:
			case LOG10:
			case LOG2:
			case LOWER:
			case LPAD:
			case LTRIM:
			case MAKEDATE:
			case MAKETIME:
			case MAKE_SET:
			case MASTER_POS_WAIT:
			case MBRCONTAINS:
			case MBRDISJOINT:
			case MBREQUAL:
			case MBRINTERSECTS:
			case MBROVERLAPS:
			case MBRTOUCHES:
			case MBRWITHIN:
			case MD5:
			case MLINEFROMTEXT:
			case MLINEFROMWKB:
			case MONTHNAME:
			case MPOINTFROMTEXT:
			case MPOINTFROMWKB:
			case MPOLYFROMTEXT:
			case MPOLYFROMWKB:
			case MULTILINESTRINGFROMTEXT:
			case MULTILINESTRINGFROMWKB:
			case MULTIPOINTFROMTEXT:
			case MULTIPOINTFROMWKB:
			case MULTIPOLYGONFROMTEXT:
			case MULTIPOLYGONFROMWKB:
			case NAME_CONST:
			case NULLIF:
			case NUMGEOMETRIES:
			case NUMINTERIORRINGS:
			case NUMPOINTS:
			case OCT:
			case OCTET_LENGTH:
			case ORD:
			case OVERLAPS:
			case PERIOD_ADD:
			case PERIOD_DIFF:
			case PI:
			case POINTFROMTEXT:
			case POINTFROMWKB:
			case POINTN:
			case POLYFROMTEXT:
			case POLYFROMWKB:
			case POLYGONFROMTEXT:
			case POLYGONFROMWKB:
			case POW:
			case POWER:
			case QUOTE:
			case RADIANS:
			case RAND:
			case RANDOM_BYTES:
			case RELEASE_LOCK:
			case REVERSE:
			case ROUND:
			case ROW_COUNT:
			case RPAD:
			case RTRIM:
			case SEC_TO_TIME:
			case SESSION_USER:
			case SHA:
			case SHA1:
			case SHA2:
			case SIGN:
			case SIN:
			case SLEEP:
			case SOUNDEX:
			case SQL_THREAD_WAIT_AFTER_GTIDS:
			case SQRT:
			case SRID:
			case STARTPOINT:
			case STRCMP:
			case STR_TO_DATE:
			case ST_AREA:
			case ST_ASBINARY:
			case ST_ASTEXT:
			case ST_ASWKB:
			case ST_ASWKT:
			case ST_BUFFER:
			case ST_CENTROID:
			case ST_CONTAINS:
			case ST_CROSSES:
			case ST_DIFFERENCE:
			case ST_DIMENSION:
			case ST_DISJOINT:
			case ST_DISTANCE:
			case ST_ENDPOINT:
			case ST_ENVELOPE:
			case ST_EQUALS:
			case ST_EXTERIORRING:
			case ST_GEOMCOLLFROMTEXT:
			case ST_GEOMCOLLFROMTXT:
			case ST_GEOMCOLLFROMWKB:
			case ST_GEOMETRYCOLLECTIONFROMTEXT:
			case ST_GEOMETRYCOLLECTIONFROMWKB:
			case ST_GEOMETRYFROMTEXT:
			case ST_GEOMETRYFROMWKB:
			case ST_GEOMETRYN:
			case ST_GEOMETRYTYPE:
			case ST_GEOMFROMTEXT:
			case ST_GEOMFROMWKB:
			case ST_INTERIORRINGN:
			case ST_INTERSECTION:
			case ST_INTERSECTS:
			case ST_ISCLOSED:
			case ST_ISEMPTY:
			case ST_ISSIMPLE:
			case ST_LINEFROMTEXT:
			case ST_LINEFROMWKB:
			case ST_LINESTRINGFROMTEXT:
			case ST_LINESTRINGFROMWKB:
			case ST_NUMGEOMETRIES:
			case ST_NUMINTERIORRING:
			case ST_NUMINTERIORRINGS:
			case ST_NUMPOINTS:
			case ST_OVERLAPS:
			case ST_POINTFROMTEXT:
			case ST_POINTFROMWKB:
			case ST_POINTN:
			case ST_POLYFROMTEXT:
			case ST_POLYFROMWKB:
			case ST_POLYGONFROMTEXT:
			case ST_POLYGONFROMWKB:
			case ST_SRID:
			case ST_STARTPOINT:
			case ST_SYMDIFFERENCE:
			case ST_TOUCHES:
			case ST_UNION:
			case ST_WITHIN:
			case ST_X:
			case ST_Y:
			case SUBDATE:
			case SUBSTRING_INDEX:
			case SUBTIME:
			case SYSTEM_USER:
			case TAN:
			case TIMEDIFF:
			case TIMESTAMPADD:
			case TIMESTAMPDIFF:
			case TIME_FORMAT:
			case TIME_TO_SEC:
			case TOUCHES:
			case TO_BASE64:
			case TO_DAYS:
			case TO_SECONDS:
			case UCASE:
			case UNCOMPRESS:
			case UNCOMPRESSED_LENGTH:
			case UNHEX:
			case UNIX_TIMESTAMP:
			case UPDATEXML:
			case UPPER:
			case UUID:
			case UUID_SHORT:
			case VALIDATE_PASSWORD_STRENGTH:
			case VERSION:
			case WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS:
			case WEEKDAY:
			case WEEKOFYEAR:
			case WEIGHT_STRING:
			case WITHIN:
			case YEARWEEK:
			case Y_FUNCTION:
			case X_FUNCTION:
			case LASTVAL:
			case NEXTVAL:
			case SETVAL:
			case MOD:
				enterOuterAlt(_localctx, 1);
				{
				setState(3056);
				functionNameBase();
				}
				break;
			case ASCII:
				enterOuterAlt(_localctx, 2);
				{
				setState(3057);
				match(ASCII);
				}
				break;
			case CURDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(3058);
				match(CURDATE);
				}
				break;
			case CURRENT_DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(3059);
				match(CURRENT_DATE);
				}
				break;
			case CURRENT_TIME:
				enterOuterAlt(_localctx, 5);
				{
				setState(3060);
				match(CURRENT_TIME);
				}
				break;
			case CURRENT_TIMESTAMP:
				enterOuterAlt(_localctx, 6);
				{
				setState(3061);
				match(CURRENT_TIMESTAMP);
				}
				break;
			case CURTIME:
				enterOuterAlt(_localctx, 7);
				{
				setState(3062);
				match(CURTIME);
				}
				break;
			case DATE_ADD:
				enterOuterAlt(_localctx, 8);
				{
				setState(3063);
				match(DATE_ADD);
				}
				break;
			case DATE_SUB:
				enterOuterAlt(_localctx, 9);
				{
				setState(3064);
				match(DATE_SUB);
				}
				break;
			case IF:
				enterOuterAlt(_localctx, 10);
				{
				setState(3065);
				match(IF);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 11);
				{
				setState(3066);
				match(INSERT);
				}
				break;
			case LOCALTIME:
				enterOuterAlt(_localctx, 12);
				{
				setState(3067);
				match(LOCALTIME);
				}
				break;
			case LOCALTIMESTAMP:
				enterOuterAlt(_localctx, 13);
				{
				setState(3068);
				match(LOCALTIMESTAMP);
				}
				break;
			case MID:
				enterOuterAlt(_localctx, 14);
				{
				setState(3069);
				match(MID);
				}
				break;
			case NOW:
				enterOuterAlt(_localctx, 15);
				{
				setState(3070);
				match(NOW);
				}
				break;
			case REPLACE:
				enterOuterAlt(_localctx, 16);
				{
				setState(3071);
				match(REPLACE);
				}
				break;
			case SUBSTR:
				enterOuterAlt(_localctx, 17);
				{
				setState(3072);
				match(SUBSTR);
				}
				break;
			case SUBSTRING:
				enterOuterAlt(_localctx, 18);
				{
				setState(3073);
				match(SUBSTRING);
				}
				break;
			case SYSDATE:
				enterOuterAlt(_localctx, 19);
				{
				setState(3074);
				match(SYSDATE);
				}
				break;
			case TRIM:
				enterOuterAlt(_localctx, 20);
				{
				setState(3075);
				match(TRIM);
				}
				break;
			case UTC_DATE:
				enterOuterAlt(_localctx, 21);
				{
				setState(3076);
				match(UTC_DATE);
				}
				break;
			case UTC_TIME:
				enterOuterAlt(_localctx, 22);
				{
				setState(3077);
				match(UTC_TIME);
				}
				break;
			case UTC_TIMESTAMP:
				enterOuterAlt(_localctx, 23);
				{
				setState(3078);
				match(UTC_TIMESTAMP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgsContext extends ParserRuleContext {
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public List<FullColumnNameContext> fullColumnName() {
			return getRuleContexts(FullColumnNameContext.class);
		}
		public FullColumnNameContext fullColumnName(int i) {
			return getRuleContext(FullColumnNameContext.class,i);
		}
		public List<FunctionCallContext> functionCall() {
			return getRuleContexts(FunctionCallContext.class);
		}
		public FunctionCallContext functionCall(int i) {
			return getRuleContext(FunctionCallContext.class,i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public FunctionArgsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArgs; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionArgs(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionArgs(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionArgs(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgsContext functionArgs() throws RecognitionException {
		FunctionArgsContext _localctx = new FunctionArgsContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_functionArgs);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3085);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,464,_ctx) ) {
			case 1:
				{
				setState(3081);
				constant();
				}
				break;
			case 2:
				{
				setState(3082);
				fullColumnName();
				}
				break;
			case 3:
				{
				setState(3083);
				functionCall();
				}
				break;
			case 4:
				{
				setState(3084);
				expression(0);
				}
				break;
			}
			setState(3096);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3087);
				match(COMMA);
				setState(3092);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,465,_ctx) ) {
				case 1:
					{
					setState(3088);
					constant();
					}
					break;
				case 2:
					{
					setState(3089);
					fullColumnName();
					}
					break;
				case 3:
					{
					setState(3090);
					functionCall();
					}
					break;
				case 4:
					{
					setState(3091);
					expression(0);
					}
					break;
				}
				}
				}
				setState(3098);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionArgContext extends ParserRuleContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public FunctionArgContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionArg; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionArg(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionArg(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionArg(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionArgContext functionArg() throws RecognitionException {
		FunctionArgContext _localctx = new FunctionArgContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_functionArg);
		try {
			setState(3103);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,467,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3099);
				constant();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3100);
				fullColumnName();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3101);
				functionCall();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3102);
				expression(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
	 
		public ExpressionContext() { }
		public void copyFrom(ExpressionContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class IsExpressionContext extends ExpressionContext {
		public Token testValue;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(MySqlParser.IS, 0); }
		public TerminalNode TRUE() { return getToken(MySqlParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(MySqlParser.FALSE, 0); }
		public TerminalNode UNKNOWN() { return getToken(MySqlParser.UNKNOWN, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public IsExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIsExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIsExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIsExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NotExpressionContext extends ExpressionContext {
		public Token notOperator;
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public NotExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNotExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNotExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNotExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LogicalExpressionContext extends ExpressionContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public LogicalOperatorContext logicalOperator() {
			return getRuleContext(LogicalOperatorContext.class,0);
		}
		public LogicalExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLogicalExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLogicalExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLogicalExpression(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class PredicateExpressionContext extends ExpressionContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public PredicateExpressionContext(ExpressionContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPredicateExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPredicateExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPredicateExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		return expression(0);
	}

	private ExpressionContext expression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 330;
		enterRecursionRule(_localctx, 330, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3116);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,469,_ctx) ) {
			case 1:
				{
				_localctx = new NotExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(3106);
				((NotExpressionContext)_localctx).notOperator = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==NOT || _la==EXCLAMATION_SYMBOL) ) {
					((NotExpressionContext)_localctx).notOperator = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3107);
				expression(4);
				}
				break;
			case 2:
				{
				_localctx = new IsExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3108);
				predicate(0);
				setState(3109);
				match(IS);
				setState(3111);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(3110);
					match(NOT);
					}
				}

				setState(3113);
				((IsExpressionContext)_localctx).testValue = _input.LT(1);
				_la = _input.LA(1);
				if ( !(_la==FALSE || _la==TRUE || _la==UNKNOWN) ) {
					((IsExpressionContext)_localctx).testValue = (Token)_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case 3:
				{
				_localctx = new PredicateExpressionContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3115);
				predicate(0);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3124);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,470,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
					pushNewRecursionContext(_localctx, _startState, RULE_expression);
					setState(3118);
					if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
					setState(3119);
					logicalOperator();
					setState(3120);
					expression(4);
					}
					} 
				}
				setState(3126);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,470,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
	 
		public PredicateContext() { }
		public void copyFrom(PredicateContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class SoundsLikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode SOUNDS() { return getToken(MySqlParser.SOUNDS, 0); }
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public SoundsLikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSoundsLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSoundsLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSoundsLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExpressionAtomPredicateContext extends PredicateContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode LOCAL_ID() { return getToken(MySqlParser.LOCAL_ID, 0); }
		public TerminalNode VAR_ASSIGN() { return getToken(MySqlParser.VAR_ASSIGN, 0); }
		public ExpressionAtomPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExpressionAtomPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExpressionAtomPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExpressionAtomPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubqueryComparisonPredicateContext extends PredicateContext {
		public Token quantifier;
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public TerminalNode ALL() { return getToken(MySqlParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(MySqlParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(MySqlParser.SOME, 0); }
		public SubqueryComparisonPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubqueryComparisonPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubqueryComparisonPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubqueryComparisonPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonMemberOfPredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode MEMBER() { return getToken(MySqlParser.MEMBER, 0); }
		public TerminalNode OF() { return getToken(MySqlParser.OF, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public JsonMemberOfPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonMemberOfPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonMemberOfPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonMemberOfPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryComparisonPredicateContext extends PredicateContext {
		public PredicateContext left;
		public PredicateContext right;
		public ComparisonOperatorContext comparisonOperator() {
			return getRuleContext(ComparisonOperatorContext.class,0);
		}
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public BinaryComparisonPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBinaryComparisonPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBinaryComparisonPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBinaryComparisonPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class InPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IN() { return getToken(MySqlParser.IN, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public ExpressionsContext expressions() {
			return getRuleContext(ExpressionsContext.class,0);
		}
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public InPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterInPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitInPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitInPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BetweenPredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(MySqlParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public BetweenPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBetweenPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBetweenPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBetweenPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IsNullPredicateContext extends PredicateContext {
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode IS() { return getToken(MySqlParser.IS, 0); }
		public NullNotnullContext nullNotnull() {
			return getRuleContext(NullNotnullContext.class,0);
		}
		public IsNullPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIsNullPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIsNullPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIsNullPredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class LikePredicateContext extends PredicateContext {
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode LIKE() { return getToken(MySqlParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public TerminalNode ESCAPE() { return getToken(MySqlParser.ESCAPE, 0); }
		public TerminalNode STRING_LITERAL() { return getToken(MySqlParser.STRING_LITERAL, 0); }
		public LikePredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLikePredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLikePredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLikePredicate(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class RegexpPredicateContext extends PredicateContext {
		public Token regex;
		public List<PredicateContext> predicate() {
			return getRuleContexts(PredicateContext.class);
		}
		public PredicateContext predicate(int i) {
			return getRuleContext(PredicateContext.class,i);
		}
		public TerminalNode REGEXP() { return getToken(MySqlParser.REGEXP, 0); }
		public TerminalNode RLIKE() { return getToken(MySqlParser.RLIKE, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public RegexpPredicateContext(PredicateContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterRegexpPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitRegexpPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitRegexpPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		return predicate(0);
	}

	private PredicateContext predicate(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		PredicateContext _localctx = new PredicateContext(_ctx, _parentState);
		PredicateContext _prevctx = _localctx;
		int _startState = 332;
		enterRecursionRule(_localctx, 332, RULE_predicate, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new ExpressionAtomPredicateContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			setState(3130);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
			case 1:
				{
				setState(3128);
				match(LOCAL_ID);
				setState(3129);
				match(VAR_ASSIGN);
				}
				break;
			}
			setState(3132);
			expressionAtom(0);
			}
			_ctx.stop = _input.LT(-1);
			setState(3198);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,479,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3196);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,478,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						((BinaryComparisonPredicateContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(3134);
						if (!(precpred(_ctx, 8))) throw new FailedPredicateException(this, "precpred(_ctx, 8)");
						setState(3135);
						comparisonOperator();
						setState(3136);
						((BinaryComparisonPredicateContext)_localctx).right = predicate(9);
						}
						break;
					case 2:
						{
						_localctx = new BetweenPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(3138);
						if (!(precpred(_ctx, 6))) throw new FailedPredicateException(this, "precpred(_ctx, 6)");
						setState(3140);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(3139);
							match(NOT);
							}
						}

						setState(3142);
						match(BETWEEN);
						setState(3143);
						predicate(0);
						setState(3144);
						match(AND);
						setState(3145);
						predicate(7);
						}
						break;
					case 3:
						{
						_localctx = new SoundsLikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(3147);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(3148);
						match(SOUNDS);
						setState(3149);
						match(LIKE);
						setState(3150);
						predicate(6);
						}
						break;
					case 4:
						{
						_localctx = new RegexpPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(3151);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(3153);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(3152);
							match(NOT);
							}
						}

						setState(3155);
						((RegexpPredicateContext)_localctx).regex = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==REGEXP || _la==RLIKE) ) {
							((RegexpPredicateContext)_localctx).regex = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3156);
						predicate(4);
						}
						break;
					case 5:
						{
						_localctx = new InPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(3157);
						if (!(precpred(_ctx, 10))) throw new FailedPredicateException(this, "precpred(_ctx, 10)");
						setState(3159);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(3158);
							match(NOT);
							}
						}

						setState(3161);
						match(IN);
						setState(3162);
						match(LR_BRACKET);
						setState(3165);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,475,_ctx) ) {
						case 1:
							{
							setState(3163);
							selectStatement();
							}
							break;
						case 2:
							{
							setState(3164);
							expressions();
							}
							break;
						}
						setState(3167);
						match(RR_BRACKET);
						}
						break;
					case 6:
						{
						_localctx = new IsNullPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(3169);
						if (!(precpred(_ctx, 9))) throw new FailedPredicateException(this, "precpred(_ctx, 9)");
						setState(3170);
						match(IS);
						setState(3171);
						nullNotnull();
						}
						break;
					case 7:
						{
						_localctx = new SubqueryComparisonPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(3172);
						if (!(precpred(_ctx, 7))) throw new FailedPredicateException(this, "precpred(_ctx, 7)");
						setState(3173);
						comparisonOperator();
						setState(3174);
						((SubqueryComparisonPredicateContext)_localctx).quantifier = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
							((SubqueryComparisonPredicateContext)_localctx).quantifier = (Token)_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						setState(3175);
						match(LR_BRACKET);
						setState(3176);
						selectStatement();
						setState(3177);
						match(RR_BRACKET);
						}
						break;
					case 8:
						{
						_localctx = new LikePredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(3179);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(3181);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==NOT) {
							{
							setState(3180);
							match(NOT);
							}
						}

						setState(3183);
						match(LIKE);
						setState(3184);
						predicate(0);
						setState(3187);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
						case 1:
							{
							setState(3185);
							match(ESCAPE);
							setState(3186);
							match(STRING_LITERAL);
							}
							break;
						}
						}
						break;
					case 9:
						{
						_localctx = new JsonMemberOfPredicateContext(new PredicateContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_predicate);
						setState(3189);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(3190);
						match(MEMBER);
						setState(3191);
						match(OF);
						setState(3192);
						match(LR_BRACKET);
						setState(3193);
						predicate(0);
						setState(3194);
						match(RR_BRACKET);
						}
						break;
					}
					} 
				}
				setState(3200);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,479,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ExpressionAtomContext extends ParserRuleContext {
		public ExpressionAtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionAtom; }
	 
		public ExpressionAtomContext() { }
		public void copyFrom(ExpressionAtomContext ctx) {
			super.copyFrom(ctx);
		}
	}
	public static class UnaryExpressionAtomContext extends ExpressionAtomContext {
		public UnaryOperatorContext unaryOperator() {
			return getRuleContext(UnaryOperatorContext.class,0);
		}
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public UnaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnaryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnaryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnaryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class CollateExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public TerminalNode COLLATE() { return getToken(MySqlParser.COLLATE, 0); }
		public CollationNameContext collationName() {
			return getRuleContext(CollationNameContext.class,0);
		}
		public CollateExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCollateExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCollateExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCollateExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MysqlVariableExpressionAtomContext extends ExpressionAtomContext {
		public MysqlVariableContext mysqlVariable() {
			return getRuleContext(MysqlVariableContext.class,0);
		}
		public MysqlVariableExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMysqlVariableExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMysqlVariableExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMysqlVariableExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NestedExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public NestedExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNestedExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNestedExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNestedExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class NestedRowExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public List<TerminalNode> COMMA() { return getTokens(MySqlParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(MySqlParser.COMMA, i);
		}
		public NestedRowExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterNestedRowExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitNestedRowExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitNestedRowExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class MathExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public MathOperatorContext mathOperator() {
			return getRuleContext(MathOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public MathExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMathExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMathExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMathExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ExistsExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode EXISTS() { return getToken(MySqlParser.EXISTS, 0); }
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public ExistsExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterExistsExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitExistsExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitExistsExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class IntervalExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode INTERVAL() { return getToken(MySqlParser.INTERVAL, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public IntervalTypeContext intervalType() {
			return getRuleContext(IntervalTypeContext.class,0);
		}
		public IntervalExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class JsonExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public JsonOperatorContext jsonOperator() {
			return getRuleContext(JsonOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public JsonExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class SubqueryExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode LR_BRACKET() { return getToken(MySqlParser.LR_BRACKET, 0); }
		public SelectStatementContext selectStatement() {
			return getRuleContext(SelectStatementContext.class,0);
		}
		public TerminalNode RR_BRACKET() { return getToken(MySqlParser.RR_BRACKET, 0); }
		public SubqueryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterSubqueryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitSubqueryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitSubqueryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class ConstantExpressionAtomContext extends ExpressionAtomContext {
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public ConstantExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterConstantExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitConstantExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitConstantExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FunctionCallExpressionAtomContext extends ExpressionAtomContext {
		public FunctionCallContext functionCall() {
			return getRuleContext(FunctionCallContext.class,0);
		}
		public FunctionCallExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionCallExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionCallExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionCallExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BinaryExpressionAtomContext extends ExpressionAtomContext {
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public ExpressionAtomContext expressionAtom() {
			return getRuleContext(ExpressionAtomContext.class,0);
		}
		public BinaryExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBinaryExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBinaryExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBinaryExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class FullColumnNameExpressionAtomContext extends ExpressionAtomContext {
		public FullColumnNameContext fullColumnName() {
			return getRuleContext(FullColumnNameContext.class,0);
		}
		public FullColumnNameExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFullColumnNameExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFullColumnNameExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFullColumnNameExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}
	public static class BitExpressionAtomContext extends ExpressionAtomContext {
		public ExpressionAtomContext left;
		public ExpressionAtomContext right;
		public BitOperatorContext bitOperator() {
			return getRuleContext(BitOperatorContext.class,0);
		}
		public List<ExpressionAtomContext> expressionAtom() {
			return getRuleContexts(ExpressionAtomContext.class);
		}
		public ExpressionAtomContext expressionAtom(int i) {
			return getRuleContext(ExpressionAtomContext.class,i);
		}
		public BitExpressionAtomContext(ExpressionAtomContext ctx) { copyFrom(ctx); }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBitExpressionAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBitExpressionAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBitExpressionAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionAtomContext expressionAtom() throws RecognitionException {
		return expressionAtom(0);
	}

	private ExpressionAtomContext expressionAtom(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ExpressionAtomContext _localctx = new ExpressionAtomContext(_ctx, _parentState);
		ExpressionAtomContext _prevctx = _localctx;
		int _startState = 334;
		enterRecursionRule(_localctx, 334, RULE_expressionAtom, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3246);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,482,_ctx) ) {
			case 1:
				{
				_localctx = new ConstantExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				setState(3202);
				constant();
				}
				break;
			case 2:
				{
				_localctx = new FullColumnNameExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3203);
				fullColumnName();
				}
				break;
			case 3:
				{
				_localctx = new FunctionCallExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3204);
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new MysqlVariableExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3205);
				mysqlVariable();
				}
				break;
			case 5:
				{
				_localctx = new UnaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3206);
				unaryOperator();
				setState(3207);
				expressionAtom(10);
				}
				break;
			case 6:
				{
				_localctx = new BinaryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3209);
				match(BINARY);
				setState(3210);
				expressionAtom(9);
				}
				break;
			case 7:
				{
				_localctx = new NestedExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3211);
				match(LR_BRACKET);
				setState(3212);
				expression(0);
				setState(3217);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3213);
					match(COMMA);
					setState(3214);
					expression(0);
					}
					}
					setState(3219);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3220);
				match(RR_BRACKET);
				}
				break;
			case 8:
				{
				_localctx = new NestedRowExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3222);
				match(ROW);
				setState(3223);
				match(LR_BRACKET);
				setState(3224);
				expression(0);
				setState(3227); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3225);
					match(COMMA);
					setState(3226);
					expression(0);
					}
					}
					setState(3229); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(3231);
				match(RR_BRACKET);
				}
				break;
			case 9:
				{
				_localctx = new ExistsExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3233);
				match(EXISTS);
				setState(3234);
				match(LR_BRACKET);
				setState(3235);
				selectStatement();
				setState(3236);
				match(RR_BRACKET);
				}
				break;
			case 10:
				{
				_localctx = new SubqueryExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3238);
				match(LR_BRACKET);
				setState(3239);
				selectStatement();
				setState(3240);
				match(RR_BRACKET);
				}
				break;
			case 11:
				{
				_localctx = new IntervalExpressionAtomContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				setState(3242);
				match(INTERVAL);
				setState(3243);
				expression(0);
				setState(3244);
				intervalType();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3265);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,484,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3263);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,483,_ctx) ) {
					case 1:
						{
						_localctx = new BitExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((BitExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(3248);
						if (!(precpred(_ctx, 3))) throw new FailedPredicateException(this, "precpred(_ctx, 3)");
						setState(3249);
						bitOperator();
						setState(3250);
						((BitExpressionAtomContext)_localctx).right = expressionAtom(4);
						}
						break;
					case 2:
						{
						_localctx = new MathExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((MathExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(3252);
						if (!(precpred(_ctx, 2))) throw new FailedPredicateException(this, "precpred(_ctx, 2)");
						setState(3253);
						mathOperator();
						setState(3254);
						((MathExpressionAtomContext)_localctx).right = expressionAtom(3);
						}
						break;
					case 3:
						{
						_localctx = new JsonExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						((JsonExpressionAtomContext)_localctx).left = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(3256);
						if (!(precpred(_ctx, 1))) throw new FailedPredicateException(this, "precpred(_ctx, 1)");
						setState(3257);
						jsonOperator();
						setState(3258);
						((JsonExpressionAtomContext)_localctx).right = expressionAtom(2);
						}
						break;
					case 4:
						{
						_localctx = new CollateExpressionAtomContext(new ExpressionAtomContext(_parentctx, _parentState));
						pushNewRecursionContext(_localctx, _startState, RULE_expressionAtom);
						setState(3260);
						if (!(precpred(_ctx, 12))) throw new FailedPredicateException(this, "precpred(_ctx, 12)");
						setState(3261);
						match(COLLATE);
						setState(3262);
						collationName();
						}
						break;
					}
					} 
				}
				setState(3267);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,484,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class UnaryOperatorContext extends ParserRuleContext {
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public TerminalNode BIT_NOT_OP() { return getToken(MySqlParser.BIT_NOT_OP, 0); }
		public TerminalNode PLUS() { return getToken(MySqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public TerminalNode NOT() { return getToken(MySqlParser.NOT, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unaryOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterUnaryOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitUnaryOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitUnaryOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final UnaryOperatorContext unaryOperator() throws RecognitionException {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_unaryOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3268);
			_la = _input.LA(1);
			if ( !(_la==NOT || ((((_la - 1110)) & ~0x3f) == 0 && ((1L << (_la - 1110)) & ((1L << (PLUS - 1110)) | (1L << (MINUS - 1110)) | (1L << (EXCLAMATION_SYMBOL - 1110)) | (1L << (BIT_NOT_OP - 1110)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ComparisonOperatorContext extends ParserRuleContext {
		public TerminalNode EQUAL_SYMBOL() { return getToken(MySqlParser.EQUAL_SYMBOL, 0); }
		public TerminalNode GREATER_SYMBOL() { return getToken(MySqlParser.GREATER_SYMBOL, 0); }
		public TerminalNode LESS_SYMBOL() { return getToken(MySqlParser.LESS_SYMBOL, 0); }
		public TerminalNode EXCLAMATION_SYMBOL() { return getToken(MySqlParser.EXCLAMATION_SYMBOL, 0); }
		public ComparisonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparisonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterComparisonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitComparisonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitComparisonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ComparisonOperatorContext comparisonOperator() throws RecognitionException {
		ComparisonOperatorContext _localctx = new ComparisonOperatorContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_comparisonOperator);
		try {
			setState(3284);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,485,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3270);
				match(EQUAL_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3271);
				match(GREATER_SYMBOL);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3272);
				match(LESS_SYMBOL);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3273);
				match(LESS_SYMBOL);
				setState(3274);
				match(EQUAL_SYMBOL);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3275);
				match(GREATER_SYMBOL);
				setState(3276);
				match(EQUAL_SYMBOL);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3277);
				match(LESS_SYMBOL);
				setState(3278);
				match(GREATER_SYMBOL);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(3279);
				match(EXCLAMATION_SYMBOL);
				setState(3280);
				match(EQUAL_SYMBOL);
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(3281);
				match(LESS_SYMBOL);
				setState(3282);
				match(EQUAL_SYMBOL);
				setState(3283);
				match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LogicalOperatorContext extends ParserRuleContext {
		public TerminalNode AND() { return getToken(MySqlParser.AND, 0); }
		public List<TerminalNode> BIT_AND_OP() { return getTokens(MySqlParser.BIT_AND_OP); }
		public TerminalNode BIT_AND_OP(int i) {
			return getToken(MySqlParser.BIT_AND_OP, i);
		}
		public TerminalNode XOR() { return getToken(MySqlParser.XOR, 0); }
		public TerminalNode OR() { return getToken(MySqlParser.OR, 0); }
		public List<TerminalNode> BIT_OR_OP() { return getTokens(MySqlParser.BIT_OR_OP); }
		public TerminalNode BIT_OR_OP(int i) {
			return getToken(MySqlParser.BIT_OR_OP, i);
		}
		public LogicalOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logicalOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterLogicalOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitLogicalOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitLogicalOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LogicalOperatorContext logicalOperator() throws RecognitionException {
		LogicalOperatorContext _localctx = new LogicalOperatorContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_logicalOperator);
		try {
			setState(3293);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AND:
				enterOuterAlt(_localctx, 1);
				{
				setState(3286);
				match(AND);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(3287);
				match(BIT_AND_OP);
				setState(3288);
				match(BIT_AND_OP);
				}
				break;
			case XOR:
				enterOuterAlt(_localctx, 3);
				{
				setState(3289);
				match(XOR);
				}
				break;
			case OR:
				enterOuterAlt(_localctx, 4);
				{
				setState(3290);
				match(OR);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(3291);
				match(BIT_OR_OP);
				setState(3292);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BitOperatorContext extends ParserRuleContext {
		public List<TerminalNode> LESS_SYMBOL() { return getTokens(MySqlParser.LESS_SYMBOL); }
		public TerminalNode LESS_SYMBOL(int i) {
			return getToken(MySqlParser.LESS_SYMBOL, i);
		}
		public List<TerminalNode> GREATER_SYMBOL() { return getTokens(MySqlParser.GREATER_SYMBOL); }
		public TerminalNode GREATER_SYMBOL(int i) {
			return getToken(MySqlParser.GREATER_SYMBOL, i);
		}
		public TerminalNode BIT_AND_OP() { return getToken(MySqlParser.BIT_AND_OP, 0); }
		public TerminalNode BIT_XOR_OP() { return getToken(MySqlParser.BIT_XOR_OP, 0); }
		public TerminalNode BIT_OR_OP() { return getToken(MySqlParser.BIT_OR_OP, 0); }
		public BitOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bitOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterBitOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitBitOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitBitOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BitOperatorContext bitOperator() throws RecognitionException {
		BitOperatorContext _localctx = new BitOperatorContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_bitOperator);
		try {
			setState(3302);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_SYMBOL:
				enterOuterAlt(_localctx, 1);
				{
				setState(3295);
				match(LESS_SYMBOL);
				setState(3296);
				match(LESS_SYMBOL);
				}
				break;
			case GREATER_SYMBOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(3297);
				match(GREATER_SYMBOL);
				setState(3298);
				match(GREATER_SYMBOL);
				}
				break;
			case BIT_AND_OP:
				enterOuterAlt(_localctx, 3);
				{
				setState(3299);
				match(BIT_AND_OP);
				}
				break;
			case BIT_XOR_OP:
				enterOuterAlt(_localctx, 4);
				{
				setState(3300);
				match(BIT_XOR_OP);
				}
				break;
			case BIT_OR_OP:
				enterOuterAlt(_localctx, 5);
				{
				setState(3301);
				match(BIT_OR_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MathOperatorContext extends ParserRuleContext {
		public TerminalNode STAR() { return getToken(MySqlParser.STAR, 0); }
		public TerminalNode DIVIDE() { return getToken(MySqlParser.DIVIDE, 0); }
		public TerminalNode MODULE() { return getToken(MySqlParser.MODULE, 0); }
		public TerminalNode DIV() { return getToken(MySqlParser.DIV, 0); }
		public TerminalNode MOD() { return getToken(MySqlParser.MOD, 0); }
		public TerminalNode PLUS() { return getToken(MySqlParser.PLUS, 0); }
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public MathOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_mathOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterMathOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitMathOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitMathOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MathOperatorContext mathOperator() throws RecognitionException {
		MathOperatorContext _localctx = new MathOperatorContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_mathOperator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3304);
			_la = _input.LA(1);
			if ( !(((((_la - 1107)) & ~0x3f) == 0 && ((1L << (_la - 1107)) & ((1L << (STAR - 1107)) | (1L << (DIVIDE - 1107)) | (1L << (MODULE - 1107)) | (1L << (PLUS - 1107)) | (1L << (MINUS - 1107)) | (1L << (DIV - 1107)) | (1L << (MOD - 1107)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class JsonOperatorContext extends ParserRuleContext {
		public TerminalNode MINUS() { return getToken(MySqlParser.MINUS, 0); }
		public List<TerminalNode> GREATER_SYMBOL() { return getTokens(MySqlParser.GREATER_SYMBOL); }
		public TerminalNode GREATER_SYMBOL(int i) {
			return getToken(MySqlParser.GREATER_SYMBOL, i);
		}
		public JsonOperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_jsonOperator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterJsonOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitJsonOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitJsonOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final JsonOperatorContext jsonOperator() throws RecognitionException {
		JsonOperatorContext _localctx = new JsonOperatorContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_jsonOperator);
		try {
			setState(3311);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,488,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3306);
				match(MINUS);
				setState(3307);
				match(GREATER_SYMBOL);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3308);
				match(MINUS);
				setState(3309);
				match(GREATER_SYMBOL);
				setState(3310);
				match(GREATER_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class CharsetNameBaseContext extends ParserRuleContext {
		public TerminalNode ARMSCII8() { return getToken(MySqlParser.ARMSCII8, 0); }
		public TerminalNode ASCII() { return getToken(MySqlParser.ASCII, 0); }
		public TerminalNode BIG5() { return getToken(MySqlParser.BIG5, 0); }
		public TerminalNode BINARY() { return getToken(MySqlParser.BINARY, 0); }
		public TerminalNode CP1250() { return getToken(MySqlParser.CP1250, 0); }
		public TerminalNode CP1251() { return getToken(MySqlParser.CP1251, 0); }
		public TerminalNode CP1256() { return getToken(MySqlParser.CP1256, 0); }
		public TerminalNode CP1257() { return getToken(MySqlParser.CP1257, 0); }
		public TerminalNode CP850() { return getToken(MySqlParser.CP850, 0); }
		public TerminalNode CP852() { return getToken(MySqlParser.CP852, 0); }
		public TerminalNode CP866() { return getToken(MySqlParser.CP866, 0); }
		public TerminalNode CP932() { return getToken(MySqlParser.CP932, 0); }
		public TerminalNode DEC8() { return getToken(MySqlParser.DEC8, 0); }
		public TerminalNode EUCJPMS() { return getToken(MySqlParser.EUCJPMS, 0); }
		public TerminalNode EUCKR() { return getToken(MySqlParser.EUCKR, 0); }
		public TerminalNode GB18030() { return getToken(MySqlParser.GB18030, 0); }
		public TerminalNode GB2312() { return getToken(MySqlParser.GB2312, 0); }
		public TerminalNode GBK() { return getToken(MySqlParser.GBK, 0); }
		public TerminalNode GEOSTD8() { return getToken(MySqlParser.GEOSTD8, 0); }
		public TerminalNode GREEK() { return getToken(MySqlParser.GREEK, 0); }
		public TerminalNode HEBREW() { return getToken(MySqlParser.HEBREW, 0); }
		public TerminalNode HP8() { return getToken(MySqlParser.HP8, 0); }
		public TerminalNode KEYBCS2() { return getToken(MySqlParser.KEYBCS2, 0); }
		public TerminalNode KOI8R() { return getToken(MySqlParser.KOI8R, 0); }
		public TerminalNode KOI8U() { return getToken(MySqlParser.KOI8U, 0); }
		public TerminalNode LATIN1() { return getToken(MySqlParser.LATIN1, 0); }
		public TerminalNode LATIN2() { return getToken(MySqlParser.LATIN2, 0); }
		public TerminalNode LATIN5() { return getToken(MySqlParser.LATIN5, 0); }
		public TerminalNode LATIN7() { return getToken(MySqlParser.LATIN7, 0); }
		public TerminalNode MACCE() { return getToken(MySqlParser.MACCE, 0); }
		public TerminalNode MACROMAN() { return getToken(MySqlParser.MACROMAN, 0); }
		public TerminalNode SJIS() { return getToken(MySqlParser.SJIS, 0); }
		public TerminalNode SWE7() { return getToken(MySqlParser.SWE7, 0); }
		public TerminalNode TIS620() { return getToken(MySqlParser.TIS620, 0); }
		public TerminalNode UCS2() { return getToken(MySqlParser.UCS2, 0); }
		public TerminalNode UJIS() { return getToken(MySqlParser.UJIS, 0); }
		public TerminalNode UTF16() { return getToken(MySqlParser.UTF16, 0); }
		public TerminalNode UTF16LE() { return getToken(MySqlParser.UTF16LE, 0); }
		public TerminalNode UTF32() { return getToken(MySqlParser.UTF32, 0); }
		public TerminalNode UTF8() { return getToken(MySqlParser.UTF8, 0); }
		public TerminalNode UTF8MB3() { return getToken(MySqlParser.UTF8MB3, 0); }
		public TerminalNode UTF8MB4() { return getToken(MySqlParser.UTF8MB4, 0); }
		public CharsetNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_charsetNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterCharsetNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitCharsetNameBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitCharsetNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final CharsetNameBaseContext charsetNameBase() throws RecognitionException {
		CharsetNameBaseContext _localctx = new CharsetNameBaseContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_charsetNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3313);
			_la = _input.LA(1);
			if ( !(_la==BINARY || ((((_la - 726)) & ~0x3f) == 0 && ((1L << (_la - 726)) & ((1L << (ARMSCII8 - 726)) | (1L << (ASCII - 726)) | (1L << (BIG5 - 726)) | (1L << (CP1250 - 726)) | (1L << (CP1251 - 726)) | (1L << (CP1256 - 726)) | (1L << (CP1257 - 726)) | (1L << (CP850 - 726)) | (1L << (CP852 - 726)) | (1L << (CP866 - 726)) | (1L << (CP932 - 726)) | (1L << (DEC8 - 726)) | (1L << (EUCJPMS - 726)) | (1L << (EUCKR - 726)) | (1L << (GB18030 - 726)) | (1L << (GB2312 - 726)) | (1L << (GBK - 726)) | (1L << (GEOSTD8 - 726)) | (1L << (GREEK - 726)) | (1L << (HEBREW - 726)) | (1L << (HP8 - 726)) | (1L << (KEYBCS2 - 726)) | (1L << (KOI8R - 726)) | (1L << (KOI8U - 726)) | (1L << (LATIN1 - 726)) | (1L << (LATIN2 - 726)) | (1L << (LATIN5 - 726)) | (1L << (LATIN7 - 726)) | (1L << (MACCE - 726)) | (1L << (MACROMAN - 726)) | (1L << (SJIS - 726)) | (1L << (SWE7 - 726)) | (1L << (TIS620 - 726)) | (1L << (UCS2 - 726)) | (1L << (UJIS - 726)) | (1L << (UTF16 - 726)) | (1L << (UTF16LE - 726)) | (1L << (UTF32 - 726)) | (1L << (UTF8 - 726)) | (1L << (UTF8MB3 - 726)) | (1L << (UTF8MB4 - 726)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TransactionLevelBaseContext extends ParserRuleContext {
		public TerminalNode REPEATABLE() { return getToken(MySqlParser.REPEATABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(MySqlParser.COMMITTED, 0); }
		public TerminalNode UNCOMMITTED() { return getToken(MySqlParser.UNCOMMITTED, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(MySqlParser.SERIALIZABLE, 0); }
		public TransactionLevelBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transactionLevelBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterTransactionLevelBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitTransactionLevelBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitTransactionLevelBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TransactionLevelBaseContext transactionLevelBase() throws RecognitionException {
		TransactionLevelBaseContext _localctx = new TransactionLevelBaseContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_transactionLevelBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3315);
			_la = _input.LA(1);
			if ( !(((((_la - 779)) & ~0x3f) == 0 && ((1L << (_la - 779)) & ((1L << (REPEATABLE - 779)) | (1L << (COMMITTED - 779)) | (1L << (UNCOMMITTED - 779)) | (1L << (SERIALIZABLE - 779)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class PrivilegesBaseContext extends ParserRuleContext {
		public TerminalNode TABLES() { return getToken(MySqlParser.TABLES, 0); }
		public TerminalNode ROUTINE() { return getToken(MySqlParser.ROUTINE, 0); }
		public TerminalNode EXECUTE() { return getToken(MySqlParser.EXECUTE, 0); }
		public TerminalNode FILE() { return getToken(MySqlParser.FILE, 0); }
		public TerminalNode PROCESS() { return getToken(MySqlParser.PROCESS, 0); }
		public TerminalNode RELOAD() { return getToken(MySqlParser.RELOAD, 0); }
		public TerminalNode SHUTDOWN() { return getToken(MySqlParser.SHUTDOWN, 0); }
		public TerminalNode SUPER() { return getToken(MySqlParser.SUPER, 0); }
		public TerminalNode PRIVILEGES() { return getToken(MySqlParser.PRIVILEGES, 0); }
		public PrivilegesBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_privilegesBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterPrivilegesBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitPrivilegesBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitPrivilegesBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PrivilegesBaseContext privilegesBase() throws RecognitionException {
		PrivilegesBaseContext _localctx = new PrivilegesBaseContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_privilegesBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3317);
			_la = _input.LA(1);
			if ( !(((((_la - 680)) & ~0x3f) == 0 && ((1L << (_la - 680)) & ((1L << (TABLES - 680)) | (1L << (ROUTINE - 680)) | (1L << (EXECUTE - 680)) | (1L << (FILE - 680)) | (1L << (PROCESS - 680)) | (1L << (RELOAD - 680)) | (1L << (SHUTDOWN - 680)) | (1L << (SUPER - 680)) | (1L << (PRIVILEGES - 680)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntervalTypeBaseContext extends ParserRuleContext {
		public TerminalNode QUARTER() { return getToken(MySqlParser.QUARTER, 0); }
		public TerminalNode MONTH() { return getToken(MySqlParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(MySqlParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(MySqlParser.MINUTE, 0); }
		public TerminalNode WEEK() { return getToken(MySqlParser.WEEK, 0); }
		public TerminalNode SECOND() { return getToken(MySqlParser.SECOND, 0); }
		public TerminalNode MICROSECOND() { return getToken(MySqlParser.MICROSECOND, 0); }
		public IntervalTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intervalTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterIntervalTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitIntervalTypeBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitIntervalTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntervalTypeBaseContext intervalTypeBase() throws RecognitionException {
		IntervalTypeBaseContext _localctx = new IntervalTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_intervalTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3319);
			_la = _input.LA(1);
			if ( !(((((_la - 672)) & ~0x3f) == 0 && ((1L << (_la - 672)) & ((1L << (QUARTER - 672)) | (1L << (MONTH - 672)) | (1L << (DAY - 672)) | (1L << (HOUR - 672)) | (1L << (MINUTE - 672)) | (1L << (WEEK - 672)) | (1L << (SECOND - 672)) | (1L << (MICROSECOND - 672)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DataTypeBaseContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode DATETIME() { return getToken(MySqlParser.DATETIME, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode ENUM() { return getToken(MySqlParser.ENUM, 0); }
		public TerminalNode TEXT() { return getToken(MySqlParser.TEXT, 0); }
		public DataTypeBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dataTypeBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterDataTypeBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitDataTypeBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitDataTypeBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DataTypeBaseContext dataTypeBase() throws RecognitionException {
		DataTypeBaseContext _localctx = new DataTypeBaseContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_dataTypeBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3321);
			_la = _input.LA(1);
			if ( !(((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (DATETIME - 211)) | (1L << (YEAR - 211)) | (1L << (TEXT - 211)) | (1L << (ENUM - 211)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class KeywordsCanBeIdContext extends ParserRuleContext {
		public TerminalNode ACCOUNT() { return getToken(MySqlParser.ACCOUNT, 0); }
		public TerminalNode ACTION() { return getToken(MySqlParser.ACTION, 0); }
		public TerminalNode ADMIN() { return getToken(MySqlParser.ADMIN, 0); }
		public TerminalNode AFTER() { return getToken(MySqlParser.AFTER, 0); }
		public TerminalNode AGGREGATE() { return getToken(MySqlParser.AGGREGATE, 0); }
		public TerminalNode ALGORITHM() { return getToken(MySqlParser.ALGORITHM, 0); }
		public TerminalNode ANY() { return getToken(MySqlParser.ANY, 0); }
		public TerminalNode AT() { return getToken(MySqlParser.AT, 0); }
		public TerminalNode AUDIT_ADMIN() { return getToken(MySqlParser.AUDIT_ADMIN, 0); }
		public TerminalNode AUTHORS() { return getToken(MySqlParser.AUTHORS, 0); }
		public TerminalNode AUTOCOMMIT() { return getToken(MySqlParser.AUTOCOMMIT, 0); }
		public TerminalNode AUTOEXTEND_SIZE() { return getToken(MySqlParser.AUTOEXTEND_SIZE, 0); }
		public TerminalNode AUTO_INCREMENT() { return getToken(MySqlParser.AUTO_INCREMENT, 0); }
		public TerminalNode AVG() { return getToken(MySqlParser.AVG, 0); }
		public TerminalNode AVG_ROW_LENGTH() { return getToken(MySqlParser.AVG_ROW_LENGTH, 0); }
		public TerminalNode BACKUP_ADMIN() { return getToken(MySqlParser.BACKUP_ADMIN, 0); }
		public TerminalNode BEGIN() { return getToken(MySqlParser.BEGIN, 0); }
		public TerminalNode BINLOG() { return getToken(MySqlParser.BINLOG, 0); }
		public TerminalNode BINLOG_ADMIN() { return getToken(MySqlParser.BINLOG_ADMIN, 0); }
		public TerminalNode BINLOG_ENCRYPTION_ADMIN() { return getToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0); }
		public TerminalNode BIT() { return getToken(MySqlParser.BIT, 0); }
		public TerminalNode BIT_AND() { return getToken(MySqlParser.BIT_AND, 0); }
		public TerminalNode BIT_OR() { return getToken(MySqlParser.BIT_OR, 0); }
		public TerminalNode BIT_XOR() { return getToken(MySqlParser.BIT_XOR, 0); }
		public TerminalNode BLOCK() { return getToken(MySqlParser.BLOCK, 0); }
		public TerminalNode BOOL() { return getToken(MySqlParser.BOOL, 0); }
		public TerminalNode BOOLEAN() { return getToken(MySqlParser.BOOLEAN, 0); }
		public TerminalNode BTREE() { return getToken(MySqlParser.BTREE, 0); }
		public TerminalNode BUCKETS() { return getToken(MySqlParser.BUCKETS, 0); }
		public TerminalNode CACHE() { return getToken(MySqlParser.CACHE, 0); }
		public TerminalNode CASCADED() { return getToken(MySqlParser.CASCADED, 0); }
		public TerminalNode CHAIN() { return getToken(MySqlParser.CHAIN, 0); }
		public TerminalNode CHANGED() { return getToken(MySqlParser.CHANGED, 0); }
		public TerminalNode CHANNEL() { return getToken(MySqlParser.CHANNEL, 0); }
		public TerminalNode CHECKSUM() { return getToken(MySqlParser.CHECKSUM, 0); }
		public TerminalNode PAGE_CHECKSUM() { return getToken(MySqlParser.PAGE_CHECKSUM, 0); }
		public TerminalNode CATALOG_NAME() { return getToken(MySqlParser.CATALOG_NAME, 0); }
		public TerminalNode CIPHER() { return getToken(MySqlParser.CIPHER, 0); }
		public TerminalNode CLASS_ORIGIN() { return getToken(MySqlParser.CLASS_ORIGIN, 0); }
		public TerminalNode CLIENT() { return getToken(MySqlParser.CLIENT, 0); }
		public TerminalNode CLONE_ADMIN() { return getToken(MySqlParser.CLONE_ADMIN, 0); }
		public TerminalNode CLOSE() { return getToken(MySqlParser.CLOSE, 0); }
		public TerminalNode CLUSTERING() { return getToken(MySqlParser.CLUSTERING, 0); }
		public TerminalNode COALESCE() { return getToken(MySqlParser.COALESCE, 0); }
		public TerminalNode CODE() { return getToken(MySqlParser.CODE, 0); }
		public TerminalNode COLUMNS() { return getToken(MySqlParser.COLUMNS, 0); }
		public TerminalNode COLUMN_FORMAT() { return getToken(MySqlParser.COLUMN_FORMAT, 0); }
		public TerminalNode COLUMN_NAME() { return getToken(MySqlParser.COLUMN_NAME, 0); }
		public TerminalNode COMMENT() { return getToken(MySqlParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(MySqlParser.COMMIT, 0); }
		public TerminalNode COMPACT() { return getToken(MySqlParser.COMPACT, 0); }
		public TerminalNode COMPLETION() { return getToken(MySqlParser.COMPLETION, 0); }
		public TerminalNode COMPRESSED() { return getToken(MySqlParser.COMPRESSED, 0); }
		public TerminalNode COMPRESSION() { return getToken(MySqlParser.COMPRESSION, 0); }
		public TerminalNode CONCURRENT() { return getToken(MySqlParser.CONCURRENT, 0); }
		public TerminalNode CONNECT() { return getToken(MySqlParser.CONNECT, 0); }
		public TerminalNode CONNECTION() { return getToken(MySqlParser.CONNECTION, 0); }
		public TerminalNode CONNECTION_ADMIN() { return getToken(MySqlParser.CONNECTION_ADMIN, 0); }
		public TerminalNode CONSISTENT() { return getToken(MySqlParser.CONSISTENT, 0); }
		public TerminalNode CONSTRAINT_CATALOG() { return getToken(MySqlParser.CONSTRAINT_CATALOG, 0); }
		public TerminalNode CONSTRAINT_NAME() { return getToken(MySqlParser.CONSTRAINT_NAME, 0); }
		public TerminalNode CONSTRAINT_SCHEMA() { return getToken(MySqlParser.CONSTRAINT_SCHEMA, 0); }
		public TerminalNode CONTAINS() { return getToken(MySqlParser.CONTAINS, 0); }
		public TerminalNode CONTEXT() { return getToken(MySqlParser.CONTEXT, 0); }
		public TerminalNode CONTRIBUTORS() { return getToken(MySqlParser.CONTRIBUTORS, 0); }
		public TerminalNode COPY() { return getToken(MySqlParser.COPY, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode CPU() { return getToken(MySqlParser.CPU, 0); }
		public TerminalNode CURRENT() { return getToken(MySqlParser.CURRENT, 0); }
		public TerminalNode CURSOR_NAME() { return getToken(MySqlParser.CURSOR_NAME, 0); }
		public TerminalNode DATA() { return getToken(MySqlParser.DATA, 0); }
		public TerminalNode DATAFILE() { return getToken(MySqlParser.DATAFILE, 0); }
		public TerminalNode DEALLOCATE() { return getToken(MySqlParser.DEALLOCATE, 0); }
		public TerminalNode DEFAULT() { return getToken(MySqlParser.DEFAULT, 0); }
		public TerminalNode DEFAULT_AUTH() { return getToken(MySqlParser.DEFAULT_AUTH, 0); }
		public TerminalNode DEFINER() { return getToken(MySqlParser.DEFINER, 0); }
		public TerminalNode DELAY_KEY_WRITE() { return getToken(MySqlParser.DELAY_KEY_WRITE, 0); }
		public TerminalNode DES_KEY_FILE() { return getToken(MySqlParser.DES_KEY_FILE, 0); }
		public TerminalNode DIAGNOSTICS() { return getToken(MySqlParser.DIAGNOSTICS, 0); }
		public TerminalNode DIRECTORY() { return getToken(MySqlParser.DIRECTORY, 0); }
		public TerminalNode DISABLE() { return getToken(MySqlParser.DISABLE, 0); }
		public TerminalNode DISCARD() { return getToken(MySqlParser.DISCARD, 0); }
		public TerminalNode DISK() { return getToken(MySqlParser.DISK, 0); }
		public TerminalNode DO() { return getToken(MySqlParser.DO, 0); }
		public TerminalNode DUMPFILE() { return getToken(MySqlParser.DUMPFILE, 0); }
		public TerminalNode DUPLICATE() { return getToken(MySqlParser.DUPLICATE, 0); }
		public TerminalNode DYNAMIC() { return getToken(MySqlParser.DYNAMIC, 0); }
		public TerminalNode ENABLE() { return getToken(MySqlParser.ENABLE, 0); }
		public TerminalNode ENCRYPTION() { return getToken(MySqlParser.ENCRYPTION, 0); }
		public TerminalNode ENCRYPTION_KEY_ADMIN() { return getToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0); }
		public TerminalNode END() { return getToken(MySqlParser.END, 0); }
		public TerminalNode ENDS() { return getToken(MySqlParser.ENDS, 0); }
		public TerminalNode ENGINE() { return getToken(MySqlParser.ENGINE, 0); }
		public TerminalNode ENGINE_ATTRIBUTE() { return getToken(MySqlParser.ENGINE_ATTRIBUTE, 0); }
		public TerminalNode ENGINES() { return getToken(MySqlParser.ENGINES, 0); }
		public TerminalNode ERROR() { return getToken(MySqlParser.ERROR, 0); }
		public TerminalNode ERRORS() { return getToken(MySqlParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(MySqlParser.ESCAPE, 0); }
		public TerminalNode EUR() { return getToken(MySqlParser.EUR, 0); }
		public TerminalNode EVEN() { return getToken(MySqlParser.EVEN, 0); }
		public TerminalNode EVENT() { return getToken(MySqlParser.EVENT, 0); }
		public TerminalNode EVENTS() { return getToken(MySqlParser.EVENTS, 0); }
		public TerminalNode EVERY() { return getToken(MySqlParser.EVERY, 0); }
		public TerminalNode EXCEPT() { return getToken(MySqlParser.EXCEPT, 0); }
		public TerminalNode EXCHANGE() { return getToken(MySqlParser.EXCHANGE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(MySqlParser.EXCLUSIVE, 0); }
		public TerminalNode EXPIRE() { return getToken(MySqlParser.EXPIRE, 0); }
		public TerminalNode EXPORT() { return getToken(MySqlParser.EXPORT, 0); }
		public TerminalNode EXTENDED() { return getToken(MySqlParser.EXTENDED, 0); }
		public TerminalNode EXTENT_SIZE() { return getToken(MySqlParser.EXTENT_SIZE, 0); }
		public TerminalNode FAST() { return getToken(MySqlParser.FAST, 0); }
		public TerminalNode FAULTS() { return getToken(MySqlParser.FAULTS, 0); }
		public TerminalNode FIELDS() { return getToken(MySqlParser.FIELDS, 0); }
		public TerminalNode FILE_BLOCK_SIZE() { return getToken(MySqlParser.FILE_BLOCK_SIZE, 0); }
		public TerminalNode FILTER() { return getToken(MySqlParser.FILTER, 0); }
		public TerminalNode FIREWALL_ADMIN() { return getToken(MySqlParser.FIREWALL_ADMIN, 0); }
		public TerminalNode FIREWALL_USER() { return getToken(MySqlParser.FIREWALL_USER, 0); }
		public TerminalNode FIRST() { return getToken(MySqlParser.FIRST, 0); }
		public TerminalNode FIXED() { return getToken(MySqlParser.FIXED, 0); }
		public TerminalNode FLUSH() { return getToken(MySqlParser.FLUSH, 0); }
		public TerminalNode FOLLOWS() { return getToken(MySqlParser.FOLLOWS, 0); }
		public TerminalNode FOUND() { return getToken(MySqlParser.FOUND, 0); }
		public TerminalNode FULL() { return getToken(MySqlParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(MySqlParser.FUNCTION, 0); }
		public TerminalNode GENERAL() { return getToken(MySqlParser.GENERAL, 0); }
		public TerminalNode GLOBAL() { return getToken(MySqlParser.GLOBAL, 0); }
		public TerminalNode GRANTS() { return getToken(MySqlParser.GRANTS, 0); }
		public TerminalNode GROUP() { return getToken(MySqlParser.GROUP, 0); }
		public TerminalNode GROUP_CONCAT() { return getToken(MySqlParser.GROUP_CONCAT, 0); }
		public TerminalNode GROUP_REPLICATION() { return getToken(MySqlParser.GROUP_REPLICATION, 0); }
		public TerminalNode GROUP_REPLICATION_ADMIN() { return getToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0); }
		public TerminalNode HANDLER() { return getToken(MySqlParser.HANDLER, 0); }
		public TerminalNode HASH() { return getToken(MySqlParser.HASH, 0); }
		public TerminalNode HELP() { return getToken(MySqlParser.HELP, 0); }
		public TerminalNode HOST() { return getToken(MySqlParser.HOST, 0); }
		public TerminalNode HOSTS() { return getToken(MySqlParser.HOSTS, 0); }
		public TerminalNode IDENTIFIED() { return getToken(MySqlParser.IDENTIFIED, 0); }
		public TerminalNode IGNORED() { return getToken(MySqlParser.IGNORED, 0); }
		public TerminalNode IGNORE_SERVER_IDS() { return getToken(MySqlParser.IGNORE_SERVER_IDS, 0); }
		public TerminalNode IMPORT() { return getToken(MySqlParser.IMPORT, 0); }
		public TerminalNode INDEXES() { return getToken(MySqlParser.INDEXES, 0); }
		public TerminalNode INITIAL_SIZE() { return getToken(MySqlParser.INITIAL_SIZE, 0); }
		public TerminalNode INNODB_REDO_LOG_ARCHIVE() { return getToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0); }
		public TerminalNode INPLACE() { return getToken(MySqlParser.INPLACE, 0); }
		public TerminalNode INSERT_METHOD() { return getToken(MySqlParser.INSERT_METHOD, 0); }
		public TerminalNode INSTALL() { return getToken(MySqlParser.INSTALL, 0); }
		public TerminalNode INSTANCE() { return getToken(MySqlParser.INSTANCE, 0); }
		public TerminalNode INSTANT() { return getToken(MySqlParser.INSTANT, 0); }
		public TerminalNode INTERNAL() { return getToken(MySqlParser.INTERNAL, 0); }
		public TerminalNode INVOKE() { return getToken(MySqlParser.INVOKE, 0); }
		public TerminalNode INVOKER() { return getToken(MySqlParser.INVOKER, 0); }
		public TerminalNode IO() { return getToken(MySqlParser.IO, 0); }
		public TerminalNode IO_THREAD() { return getToken(MySqlParser.IO_THREAD, 0); }
		public TerminalNode IPC() { return getToken(MySqlParser.IPC, 0); }
		public TerminalNode ISO() { return getToken(MySqlParser.ISO, 0); }
		public TerminalNode ISOLATION() { return getToken(MySqlParser.ISOLATION, 0); }
		public TerminalNode ISSUER() { return getToken(MySqlParser.ISSUER, 0); }
		public TerminalNode JIS() { return getToken(MySqlParser.JIS, 0); }
		public TerminalNode JSON() { return getToken(MySqlParser.JSON, 0); }
		public TerminalNode KEY_BLOCK_SIZE() { return getToken(MySqlParser.KEY_BLOCK_SIZE, 0); }
		public TerminalNode LAMBDA() { return getToken(MySqlParser.LAMBDA, 0); }
		public TerminalNode LANGUAGE() { return getToken(MySqlParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(MySqlParser.LAST, 0); }
		public TerminalNode LEAVES() { return getToken(MySqlParser.LEAVES, 0); }
		public TerminalNode LESS() { return getToken(MySqlParser.LESS, 0); }
		public TerminalNode LEVEL() { return getToken(MySqlParser.LEVEL, 0); }
		public TerminalNode LIST() { return getToken(MySqlParser.LIST, 0); }
		public TerminalNode LOCAL() { return getToken(MySqlParser.LOCAL, 0); }
		public TerminalNode LOGFILE() { return getToken(MySqlParser.LOGFILE, 0); }
		public TerminalNode LOGS() { return getToken(MySqlParser.LOGS, 0); }
		public TerminalNode MASTER() { return getToken(MySqlParser.MASTER, 0); }
		public TerminalNode MASTER_AUTO_POSITION() { return getToken(MySqlParser.MASTER_AUTO_POSITION, 0); }
		public TerminalNode MASTER_CONNECT_RETRY() { return getToken(MySqlParser.MASTER_CONNECT_RETRY, 0); }
		public TerminalNode MASTER_DELAY() { return getToken(MySqlParser.MASTER_DELAY, 0); }
		public TerminalNode MASTER_HEARTBEAT_PERIOD() { return getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0); }
		public TerminalNode MASTER_HOST() { return getToken(MySqlParser.MASTER_HOST, 0); }
		public TerminalNode MASTER_LOG_FILE() { return getToken(MySqlParser.MASTER_LOG_FILE, 0); }
		public TerminalNode MASTER_LOG_POS() { return getToken(MySqlParser.MASTER_LOG_POS, 0); }
		public TerminalNode MASTER_PASSWORD() { return getToken(MySqlParser.MASTER_PASSWORD, 0); }
		public TerminalNode MASTER_PORT() { return getToken(MySqlParser.MASTER_PORT, 0); }
		public TerminalNode MASTER_RETRY_COUNT() { return getToken(MySqlParser.MASTER_RETRY_COUNT, 0); }
		public TerminalNode MASTER_SSL() { return getToken(MySqlParser.MASTER_SSL, 0); }
		public TerminalNode MASTER_SSL_CA() { return getToken(MySqlParser.MASTER_SSL_CA, 0); }
		public TerminalNode MASTER_SSL_CAPATH() { return getToken(MySqlParser.MASTER_SSL_CAPATH, 0); }
		public TerminalNode MASTER_SSL_CERT() { return getToken(MySqlParser.MASTER_SSL_CERT, 0); }
		public TerminalNode MASTER_SSL_CIPHER() { return getToken(MySqlParser.MASTER_SSL_CIPHER, 0); }
		public TerminalNode MASTER_SSL_CRL() { return getToken(MySqlParser.MASTER_SSL_CRL, 0); }
		public TerminalNode MASTER_SSL_CRLPATH() { return getToken(MySqlParser.MASTER_SSL_CRLPATH, 0); }
		public TerminalNode MASTER_SSL_KEY() { return getToken(MySqlParser.MASTER_SSL_KEY, 0); }
		public TerminalNode MASTER_TLS_VERSION() { return getToken(MySqlParser.MASTER_TLS_VERSION, 0); }
		public TerminalNode MASTER_USER() { return getToken(MySqlParser.MASTER_USER, 0); }
		public TerminalNode MAX_CONNECTIONS_PER_HOUR() { return getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0); }
		public TerminalNode MAX_QUERIES_PER_HOUR() { return getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0); }
		public TerminalNode MAX() { return getToken(MySqlParser.MAX, 0); }
		public TerminalNode MAX_ROWS() { return getToken(MySqlParser.MAX_ROWS, 0); }
		public TerminalNode MAX_SIZE() { return getToken(MySqlParser.MAX_SIZE, 0); }
		public TerminalNode MAX_UPDATES_PER_HOUR() { return getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0); }
		public TerminalNode MAX_USER_CONNECTIONS() { return getToken(MySqlParser.MAX_USER_CONNECTIONS, 0); }
		public TerminalNode MEDIUM() { return getToken(MySqlParser.MEDIUM, 0); }
		public TerminalNode MEMBER() { return getToken(MySqlParser.MEMBER, 0); }
		public TerminalNode MEMORY() { return getToken(MySqlParser.MEMORY, 0); }
		public TerminalNode MERGE() { return getToken(MySqlParser.MERGE, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(MySqlParser.MESSAGE_TEXT, 0); }
		public TerminalNode MID() { return getToken(MySqlParser.MID, 0); }
		public TerminalNode MIGRATE() { return getToken(MySqlParser.MIGRATE, 0); }
		public TerminalNode MIN() { return getToken(MySqlParser.MIN, 0); }
		public TerminalNode MIN_ROWS() { return getToken(MySqlParser.MIN_ROWS, 0); }
		public TerminalNode MODE() { return getToken(MySqlParser.MODE, 0); }
		public TerminalNode MODIFY() { return getToken(MySqlParser.MODIFY, 0); }
		public TerminalNode MUTEX() { return getToken(MySqlParser.MUTEX, 0); }
		public TerminalNode MYSQL() { return getToken(MySqlParser.MYSQL, 0); }
		public TerminalNode MYSQL_ERRNO() { return getToken(MySqlParser.MYSQL_ERRNO, 0); }
		public TerminalNode NAME() { return getToken(MySqlParser.NAME, 0); }
		public TerminalNode NAMES() { return getToken(MySqlParser.NAMES, 0); }
		public TerminalNode NCHAR() { return getToken(MySqlParser.NCHAR, 0); }
		public TerminalNode NDB_STORED_USER() { return getToken(MySqlParser.NDB_STORED_USER, 0); }
		public TerminalNode NEVER() { return getToken(MySqlParser.NEVER, 0); }
		public TerminalNode NEXT() { return getToken(MySqlParser.NEXT, 0); }
		public TerminalNode NO() { return getToken(MySqlParser.NO, 0); }
		public TerminalNode NOCOPY() { return getToken(MySqlParser.NOCOPY, 0); }
		public TerminalNode NODEGROUP() { return getToken(MySqlParser.NODEGROUP, 0); }
		public TerminalNode NONE() { return getToken(MySqlParser.NONE, 0); }
		public TerminalNode NOWAIT() { return getToken(MySqlParser.NOWAIT, 0); }
		public TerminalNode NUMBER() { return getToken(MySqlParser.NUMBER, 0); }
		public TerminalNode ODBC() { return getToken(MySqlParser.ODBC, 0); }
		public TerminalNode OFFLINE() { return getToken(MySqlParser.OFFLINE, 0); }
		public TerminalNode OFFSET() { return getToken(MySqlParser.OFFSET, 0); }
		public TerminalNode OF() { return getToken(MySqlParser.OF, 0); }
		public TerminalNode OJ() { return getToken(MySqlParser.OJ, 0); }
		public TerminalNode OLD_PASSWORD() { return getToken(MySqlParser.OLD_PASSWORD, 0); }
		public TerminalNode ONE() { return getToken(MySqlParser.ONE, 0); }
		public TerminalNode ONLINE() { return getToken(MySqlParser.ONLINE, 0); }
		public TerminalNode ONLY() { return getToken(MySqlParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(MySqlParser.OPEN, 0); }
		public TerminalNode OPTIMIZER_COSTS() { return getToken(MySqlParser.OPTIMIZER_COSTS, 0); }
		public TerminalNode OPTIONAL() { return getToken(MySqlParser.OPTIONAL, 0); }
		public TerminalNode OPTIONS() { return getToken(MySqlParser.OPTIONS, 0); }
		public TerminalNode ORDER() { return getToken(MySqlParser.ORDER, 0); }
		public TerminalNode OWNER() { return getToken(MySqlParser.OWNER, 0); }
		public TerminalNode PACK_KEYS() { return getToken(MySqlParser.PACK_KEYS, 0); }
		public TerminalNode PAGE() { return getToken(MySqlParser.PAGE, 0); }
		public TerminalNode PARSER() { return getToken(MySqlParser.PARSER, 0); }
		public TerminalNode PARTIAL() { return getToken(MySqlParser.PARTIAL, 0); }
		public TerminalNode PARTITIONING() { return getToken(MySqlParser.PARTITIONING, 0); }
		public TerminalNode PARTITIONS() { return getToken(MySqlParser.PARTITIONS, 0); }
		public TerminalNode PASSWORD() { return getToken(MySqlParser.PASSWORD, 0); }
		public TerminalNode PASSWORDLESS_USER_ADMIN() { return getToken(MySqlParser.PASSWORDLESS_USER_ADMIN, 0); }
		public TerminalNode PERSIST_RO_VARIABLES_ADMIN() { return getToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0); }
		public TerminalNode PHASE() { return getToken(MySqlParser.PHASE, 0); }
		public TerminalNode PLUGINS() { return getToken(MySqlParser.PLUGINS, 0); }
		public TerminalNode PLUGIN_DIR() { return getToken(MySqlParser.PLUGIN_DIR, 0); }
		public TerminalNode PLUGIN() { return getToken(MySqlParser.PLUGIN, 0); }
		public TerminalNode PORT() { return getToken(MySqlParser.PORT, 0); }
		public TerminalNode PRECEDES() { return getToken(MySqlParser.PRECEDES, 0); }
		public TerminalNode PREPARE() { return getToken(MySqlParser.PREPARE, 0); }
		public TerminalNode PRESERVE() { return getToken(MySqlParser.PRESERVE, 0); }
		public TerminalNode PREV() { return getToken(MySqlParser.PREV, 0); }
		public TerminalNode PRIMARY() { return getToken(MySqlParser.PRIMARY, 0); }
		public TerminalNode PROCESSLIST() { return getToken(MySqlParser.PROCESSLIST, 0); }
		public TerminalNode PROFILE() { return getToken(MySqlParser.PROFILE, 0); }
		public TerminalNode PROFILES() { return getToken(MySqlParser.PROFILES, 0); }
		public TerminalNode PROXY() { return getToken(MySqlParser.PROXY, 0); }
		public TerminalNode QUERY() { return getToken(MySqlParser.QUERY, 0); }
		public TerminalNode QUICK() { return getToken(MySqlParser.QUICK, 0); }
		public TerminalNode REBUILD() { return getToken(MySqlParser.REBUILD, 0); }
		public TerminalNode RECOVER() { return getToken(MySqlParser.RECOVER, 0); }
		public TerminalNode RECURSIVE() { return getToken(MySqlParser.RECURSIVE, 0); }
		public TerminalNode REDO_BUFFER_SIZE() { return getToken(MySqlParser.REDO_BUFFER_SIZE, 0); }
		public TerminalNode REDUNDANT() { return getToken(MySqlParser.REDUNDANT, 0); }
		public TerminalNode RELAY() { return getToken(MySqlParser.RELAY, 0); }
		public TerminalNode RELAYLOG() { return getToken(MySqlParser.RELAYLOG, 0); }
		public TerminalNode RELAY_LOG_FILE() { return getToken(MySqlParser.RELAY_LOG_FILE, 0); }
		public TerminalNode RELAY_LOG_POS() { return getToken(MySqlParser.RELAY_LOG_POS, 0); }
		public TerminalNode REMOVE() { return getToken(MySqlParser.REMOVE, 0); }
		public TerminalNode REORGANIZE() { return getToken(MySqlParser.REORGANIZE, 0); }
		public TerminalNode REPAIR() { return getToken(MySqlParser.REPAIR, 0); }
		public TerminalNode REPLICATE_DO_DB() { return getToken(MySqlParser.REPLICATE_DO_DB, 0); }
		public TerminalNode REPLICATE_DO_TABLE() { return getToken(MySqlParser.REPLICATE_DO_TABLE, 0); }
		public TerminalNode REPLICATE_IGNORE_DB() { return getToken(MySqlParser.REPLICATE_IGNORE_DB, 0); }
		public TerminalNode REPLICATE_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATE_REWRITE_DB() { return getToken(MySqlParser.REPLICATE_REWRITE_DB, 0); }
		public TerminalNode REPLICATE_WILD_DO_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0); }
		public TerminalNode REPLICATE_WILD_IGNORE_TABLE() { return getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0); }
		public TerminalNode REPLICATION() { return getToken(MySqlParser.REPLICATION, 0); }
		public TerminalNode REPLICATION_APPLIER() { return getToken(MySqlParser.REPLICATION_APPLIER, 0); }
		public TerminalNode REPLICATION_SLAVE_ADMIN() { return getToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0); }
		public TerminalNode RESET() { return getToken(MySqlParser.RESET, 0); }
		public TerminalNode RESOURCE_GROUP_ADMIN() { return getToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0); }
		public TerminalNode RESOURCE_GROUP_USER() { return getToken(MySqlParser.RESOURCE_GROUP_USER, 0); }
		public TerminalNode RESUME() { return getToken(MySqlParser.RESUME, 0); }
		public TerminalNode RETURNED_SQLSTATE() { return getToken(MySqlParser.RETURNED_SQLSTATE, 0); }
		public TerminalNode RETURNS() { return getToken(MySqlParser.RETURNS, 0); }
		public TerminalNode ROLE() { return getToken(MySqlParser.ROLE, 0); }
		public TerminalNode ROLE_ADMIN() { return getToken(MySqlParser.ROLE_ADMIN, 0); }
		public TerminalNode ROLLBACK() { return getToken(MySqlParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(MySqlParser.ROLLUP, 0); }
		public TerminalNode ROTATE() { return getToken(MySqlParser.ROTATE, 0); }
		public TerminalNode ROW() { return getToken(MySqlParser.ROW, 0); }
		public TerminalNode ROWS() { return getToken(MySqlParser.ROWS, 0); }
		public TerminalNode ROW_FORMAT() { return getToken(MySqlParser.ROW_FORMAT, 0); }
		public TerminalNode RTREE() { return getToken(MySqlParser.RTREE, 0); }
		public TerminalNode S3() { return getToken(MySqlParser.S3, 0); }
		public TerminalNode SAVEPOINT() { return getToken(MySqlParser.SAVEPOINT, 0); }
		public TerminalNode SCHEDULE() { return getToken(MySqlParser.SCHEDULE, 0); }
		public TerminalNode SCHEMA_NAME() { return getToken(MySqlParser.SCHEMA_NAME, 0); }
		public TerminalNode SECURITY() { return getToken(MySqlParser.SECURITY, 0); }
		public TerminalNode SECONDARY_ENGINE_ATTRIBUTE() { return getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0); }
		public TerminalNode SERIAL() { return getToken(MySqlParser.SERIAL, 0); }
		public TerminalNode SERVER() { return getToken(MySqlParser.SERVER, 0); }
		public TerminalNode SESSION() { return getToken(MySqlParser.SESSION, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SET_USER_ID() { return getToken(MySqlParser.SET_USER_ID, 0); }
		public TerminalNode SHARE() { return getToken(MySqlParser.SHARE, 0); }
		public TerminalNode SHARED() { return getToken(MySqlParser.SHARED, 0); }
		public TerminalNode SHOW_ROUTINE() { return getToken(MySqlParser.SHOW_ROUTINE, 0); }
		public TerminalNode SIGNED() { return getToken(MySqlParser.SIGNED, 0); }
		public TerminalNode SIMPLE() { return getToken(MySqlParser.SIMPLE, 0); }
		public TerminalNode SLAVE() { return getToken(MySqlParser.SLAVE, 0); }
		public TerminalNode SLOW() { return getToken(MySqlParser.SLOW, 0); }
		public TerminalNode SNAPSHOT() { return getToken(MySqlParser.SNAPSHOT, 0); }
		public TerminalNode SOCKET() { return getToken(MySqlParser.SOCKET, 0); }
		public TerminalNode SOME() { return getToken(MySqlParser.SOME, 0); }
		public TerminalNode SONAME() { return getToken(MySqlParser.SONAME, 0); }
		public TerminalNode SOUNDS() { return getToken(MySqlParser.SOUNDS, 0); }
		public TerminalNode SOURCE() { return getToken(MySqlParser.SOURCE, 0); }
		public TerminalNode SQL_AFTER_GTIDS() { return getToken(MySqlParser.SQL_AFTER_GTIDS, 0); }
		public TerminalNode SQL_AFTER_MTS_GAPS() { return getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0); }
		public TerminalNode SQL_BEFORE_GTIDS() { return getToken(MySqlParser.SQL_BEFORE_GTIDS, 0); }
		public TerminalNode SQL_BUFFER_RESULT() { return getToken(MySqlParser.SQL_BUFFER_RESULT, 0); }
		public TerminalNode SQL_CACHE() { return getToken(MySqlParser.SQL_CACHE, 0); }
		public TerminalNode SQL_NO_CACHE() { return getToken(MySqlParser.SQL_NO_CACHE, 0); }
		public TerminalNode SQL_THREAD() { return getToken(MySqlParser.SQL_THREAD, 0); }
		public TerminalNode STACKED() { return getToken(MySqlParser.STACKED, 0); }
		public TerminalNode START() { return getToken(MySqlParser.START, 0); }
		public TerminalNode STARTS() { return getToken(MySqlParser.STARTS, 0); }
		public TerminalNode STATS_AUTO_RECALC() { return getToken(MySqlParser.STATS_AUTO_RECALC, 0); }
		public TerminalNode STATS_PERSISTENT() { return getToken(MySqlParser.STATS_PERSISTENT, 0); }
		public TerminalNode STATS_SAMPLE_PAGES() { return getToken(MySqlParser.STATS_SAMPLE_PAGES, 0); }
		public TerminalNode STATUS() { return getToken(MySqlParser.STATUS, 0); }
		public TerminalNode STD() { return getToken(MySqlParser.STD, 0); }
		public TerminalNode STDDEV() { return getToken(MySqlParser.STDDEV, 0); }
		public TerminalNode STDDEV_POP() { return getToken(MySqlParser.STDDEV_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(MySqlParser.STDDEV_SAMP, 0); }
		public TerminalNode STOP() { return getToken(MySqlParser.STOP, 0); }
		public TerminalNode STORAGE() { return getToken(MySqlParser.STORAGE, 0); }
		public TerminalNode STRING() { return getToken(MySqlParser.STRING, 0); }
		public TerminalNode SUBCLASS_ORIGIN() { return getToken(MySqlParser.SUBCLASS_ORIGIN, 0); }
		public TerminalNode SUBJECT() { return getToken(MySqlParser.SUBJECT, 0); }
		public TerminalNode SUBPARTITION() { return getToken(MySqlParser.SUBPARTITION, 0); }
		public TerminalNode SUBPARTITIONS() { return getToken(MySqlParser.SUBPARTITIONS, 0); }
		public TerminalNode SUM() { return getToken(MySqlParser.SUM, 0); }
		public TerminalNode SUSPEND() { return getToken(MySqlParser.SUSPEND, 0); }
		public TerminalNode SWAPS() { return getToken(MySqlParser.SWAPS, 0); }
		public TerminalNode SWITCHES() { return getToken(MySqlParser.SWITCHES, 0); }
		public TerminalNode SYSTEM_VARIABLES_ADMIN() { return getToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0); }
		public TerminalNode TABLE_NAME() { return getToken(MySqlParser.TABLE_NAME, 0); }
		public TerminalNode TABLESPACE() { return getToken(MySqlParser.TABLESPACE, 0); }
		public TerminalNode TABLE_ENCRYPTION_ADMIN() { return getToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0); }
		public TerminalNode TABLE_TYPE() { return getToken(MySqlParser.TABLE_TYPE, 0); }
		public TerminalNode TEMPORARY() { return getToken(MySqlParser.TEMPORARY, 0); }
		public TerminalNode TEMPTABLE() { return getToken(MySqlParser.TEMPTABLE, 0); }
		public TerminalNode THAN() { return getToken(MySqlParser.THAN, 0); }
		public TerminalNode TRADITIONAL() { return getToken(MySqlParser.TRADITIONAL, 0); }
		public TerminalNode TRANSACTION() { return getToken(MySqlParser.TRANSACTION, 0); }
		public TerminalNode TRANSACTIONAL() { return getToken(MySqlParser.TRANSACTIONAL, 0); }
		public TerminalNode TRIGGERS() { return getToken(MySqlParser.TRIGGERS, 0); }
		public TerminalNode TRUNCATE() { return getToken(MySqlParser.TRUNCATE, 0); }
		public TerminalNode UNDEFINED() { return getToken(MySqlParser.UNDEFINED, 0); }
		public TerminalNode UNDOFILE() { return getToken(MySqlParser.UNDOFILE, 0); }
		public TerminalNode UNDO_BUFFER_SIZE() { return getToken(MySqlParser.UNDO_BUFFER_SIZE, 0); }
		public TerminalNode UNINSTALL() { return getToken(MySqlParser.UNINSTALL, 0); }
		public TerminalNode UNKNOWN() { return getToken(MySqlParser.UNKNOWN, 0); }
		public TerminalNode UNTIL() { return getToken(MySqlParser.UNTIL, 0); }
		public TerminalNode UPGRADE() { return getToken(MySqlParser.UPGRADE, 0); }
		public TerminalNode USA() { return getToken(MySqlParser.USA, 0); }
		public TerminalNode USER() { return getToken(MySqlParser.USER, 0); }
		public TerminalNode USE_FRM() { return getToken(MySqlParser.USE_FRM, 0); }
		public TerminalNode USER_RESOURCES() { return getToken(MySqlParser.USER_RESOURCES, 0); }
		public TerminalNode VALIDATION() { return getToken(MySqlParser.VALIDATION, 0); }
		public TerminalNode VALUE() { return getToken(MySqlParser.VALUE, 0); }
		public TerminalNode VAR_POP() { return getToken(MySqlParser.VAR_POP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(MySqlParser.VAR_SAMP, 0); }
		public TerminalNode VARIABLES() { return getToken(MySqlParser.VARIABLES, 0); }
		public TerminalNode VARIANCE() { return getToken(MySqlParser.VARIANCE, 0); }
		public TerminalNode VERSION_TOKEN_ADMIN() { return getToken(MySqlParser.VERSION_TOKEN_ADMIN, 0); }
		public TerminalNode VIEW() { return getToken(MySqlParser.VIEW, 0); }
		public TerminalNode VIRTUAL() { return getToken(MySqlParser.VIRTUAL, 0); }
		public TerminalNode WAIT() { return getToken(MySqlParser.WAIT, 0); }
		public TerminalNode WARNINGS() { return getToken(MySqlParser.WARNINGS, 0); }
		public TerminalNode WITHOUT() { return getToken(MySqlParser.WITHOUT, 0); }
		public TerminalNode WORK() { return getToken(MySqlParser.WORK, 0); }
		public TerminalNode WRAPPER() { return getToken(MySqlParser.WRAPPER, 0); }
		public TerminalNode X509() { return getToken(MySqlParser.X509, 0); }
		public TerminalNode XA() { return getToken(MySqlParser.XA, 0); }
		public TerminalNode XA_RECOVER_ADMIN() { return getToken(MySqlParser.XA_RECOVER_ADMIN, 0); }
		public TerminalNode XML() { return getToken(MySqlParser.XML, 0); }
		public TerminalNode VIA() { return getToken(MySqlParser.VIA, 0); }
		public TerminalNode LASTVAL() { return getToken(MySqlParser.LASTVAL, 0); }
		public TerminalNode NEXTVAL() { return getToken(MySqlParser.NEXTVAL, 0); }
		public TerminalNode SETVAL() { return getToken(MySqlParser.SETVAL, 0); }
		public TerminalNode PREVIOUS() { return getToken(MySqlParser.PREVIOUS, 0); }
		public TerminalNode PERSISTENT() { return getToken(MySqlParser.PERSISTENT, 0); }
		public TerminalNode REPLICATION_MASTER_ADMIN() { return getToken(MySqlParser.REPLICATION_MASTER_ADMIN, 0); }
		public TerminalNode REPLICA() { return getToken(MySqlParser.REPLICA, 0); }
		public TerminalNode READ_ONLY_ADMIN() { return getToken(MySqlParser.READ_ONLY_ADMIN, 0); }
		public TerminalNode FEDERATED_ADMIN() { return getToken(MySqlParser.FEDERATED_ADMIN, 0); }
		public TerminalNode BINLOG_MONITOR() { return getToken(MySqlParser.BINLOG_MONITOR, 0); }
		public TerminalNode BINLOG_REPLAY() { return getToken(MySqlParser.BINLOG_REPLAY, 0); }
		public TerminalNode ENCRYPTED() { return getToken(MySqlParser.ENCRYPTED, 0); }
		public TerminalNode ENCRYPTION_KEY_ID() { return getToken(MySqlParser.ENCRYPTION_KEY_ID, 0); }
		public TerminalNode SKIP_() { return getToken(MySqlParser.SKIP_, 0); }
		public TerminalNode LOCKED() { return getToken(MySqlParser.LOCKED, 0); }
		public TerminalNode CYCLE() { return getToken(MySqlParser.CYCLE, 0); }
		public TerminalNode INCREMENT() { return getToken(MySqlParser.INCREMENT, 0); }
		public TerminalNode MINVALUE() { return getToken(MySqlParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(MySqlParser.MAXVALUE, 0); }
		public TerminalNode NOCACHE() { return getToken(MySqlParser.NOCACHE, 0); }
		public TerminalNode NOCYCLE() { return getToken(MySqlParser.NOCYCLE, 0); }
		public TerminalNode NOMINVALUE() { return getToken(MySqlParser.NOMINVALUE, 0); }
		public TerminalNode NOMAXVALUE() { return getToken(MySqlParser.NOMAXVALUE, 0); }
		public TerminalNode RESTART() { return getToken(MySqlParser.RESTART, 0); }
		public TerminalNode SEQUENCE() { return getToken(MySqlParser.SEQUENCE, 0); }
		public KeywordsCanBeIdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keywordsCanBeId; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterKeywordsCanBeId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitKeywordsCanBeId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitKeywordsCanBeId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final KeywordsCanBeIdContext keywordsCanBeId() throws RecognitionException {
		KeywordsCanBeIdContext _localctx = new KeywordsCanBeIdContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_keywordsCanBeId);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3323);
			_la = _input.LA(1);
			if ( !(((((_la - 17)) & ~0x3f) == 0 && ((1L << (_la - 17)) & ((1L << (BUCKETS - 17)) | (1L << (CURRENT - 17)) | (1L << (DEFAULT - 17)) | (1L << (DIAGNOSTICS - 17)) | (1L << (EXCEPT - 17)) | (1L << (GROUP - 17)) | (1L << (IGNORED - 17)))) != 0) || ((((_la - 100)) & ~0x3f) == 0 && ((1L << (_la - 100)) & ((1L << (LOCKED - 100)) | (1L << (MAXVALUE - 100)) | (1L << (MINVALUE - 100)) | (1L << (NUMBER - 100)) | (1L << (OPTIONAL - 100)) | (1L << (ORDER - 100)) | (1L << (PRIMARY - 100)) | (1L << (SKIP_ - 100)) | (1L << (STACKED - 100)))) != 0) || ((((_la - 233)) & ~0x3f) == 0 && ((1L << (_la - 233)) & ((1L << (SERIAL - 233)) | (1L << (AVG - 233)) | (1L << (BIT_AND - 233)) | (1L << (BIT_OR - 233)) | (1L << (BIT_XOR - 233)) | (1L << (COUNT - 233)) | (1L << (GROUP_CONCAT - 233)) | (1L << (MAX - 233)) | (1L << (MIN - 233)) | (1L << (STD - 233)))) != 0) || ((((_la - 297)) & ~0x3f) == 0 && ((1L << (_la - 297)) & ((1L << (STDDEV - 297)) | (1L << (STDDEV_POP - 297)) | (1L << (STDDEV_SAMP - 297)) | (1L << (SUM - 297)) | (1L << (VAR_POP - 297)) | (1L << (VAR_SAMP - 297)) | (1L << (VARIANCE - 297)) | (1L << (ACCOUNT - 297)) | (1L << (ACTION - 297)) | (1L << (AFTER - 297)) | (1L << (AGGREGATE - 297)) | (1L << (ALGORITHM - 297)) | (1L << (ANY - 297)) | (1L << (AT - 297)) | (1L << (AUTHORS - 297)) | (1L << (AUTOCOMMIT - 297)) | (1L << (AUTOEXTEND_SIZE - 297)) | (1L << (AUTO_INCREMENT - 297)) | (1L << (AVG_ROW_LENGTH - 297)) | (1L << (BEGIN - 297)) | (1L << (BINLOG - 297)) | (1L << (BIT - 297)) | (1L << (BLOCK - 297)) | (1L << (BOOL - 297)) | (1L << (BOOLEAN - 297)) | (1L << (BTREE - 297)) | (1L << (CACHE - 297)) | (1L << (CASCADED - 297)) | (1L << (CHAIN - 297)) | (1L << (CHANGED - 297)) | (1L << (CHANNEL - 297)) | (1L << (CHECKSUM - 297)) | (1L << (PAGE_CHECKSUM - 297)) | (1L << (CIPHER - 297)) | (1L << (CLASS_ORIGIN - 297)) | (1L << (CLIENT - 297)) | (1L << (CLOSE - 297)) | (1L << (CLUSTERING - 297)) | (1L << (COALESCE - 297)) | (1L << (CODE - 297)) | (1L << (COLUMNS - 297)) | (1L << (COLUMN_FORMAT - 297)) | (1L << (COLUMN_NAME - 297)) | (1L << (COMMENT - 297)) | (1L << (COMMIT - 297)))) != 0) || ((((_la - 361)) & ~0x3f) == 0 && ((1L << (_la - 361)) & ((1L << (COMPACT - 361)) | (1L << (COMPLETION - 361)) | (1L << (COMPRESSED - 361)) | (1L << (COMPRESSION - 361)) | (1L << (CONCURRENT - 361)) | (1L << (CONNECT - 361)) | (1L << (CONNECTION - 361)) | (1L << (CONSISTENT - 361)) | (1L << (CONSTRAINT_CATALOG - 361)) | (1L << (CONSTRAINT_SCHEMA - 361)) | (1L << (CONSTRAINT_NAME - 361)) | (1L << (CONTAINS - 361)) | (1L << (CONTEXT - 361)) | (1L << (CONTRIBUTORS - 361)) | (1L << (COPY - 361)) | (1L << (CPU - 361)) | (1L << (CYCLE - 361)) | (1L << (CURSOR_NAME - 361)) | (1L << (DATA - 361)) | (1L << (DATAFILE - 361)) | (1L << (DEALLOCATE - 361)) | (1L << (DEFAULT_AUTH - 361)) | (1L << (DEFINER - 361)) | (1L << (DELAY_KEY_WRITE - 361)) | (1L << (DES_KEY_FILE - 361)) | (1L << (DIRECTORY - 361)) | (1L << (DISABLE - 361)) | (1L << (DISCARD - 361)) | (1L << (DISK - 361)) | (1L << (DO - 361)) | (1L << (DUMPFILE - 361)) | (1L << (DUPLICATE - 361)) | (1L << (DYNAMIC - 361)) | (1L << (ENABLE - 361)) | (1L << (ENCRYPTION - 361)) | (1L << (END - 361)) | (1L << (ENDS - 361)) | (1L << (ENGINE - 361)) | (1L << (ENGINES - 361)) | (1L << (ERROR - 361)) | (1L << (ERRORS - 361)) | (1L << (ESCAPE - 361)) | (1L << (EVEN - 361)) | (1L << (EVENT - 361)) | (1L << (EVENTS - 361)) | (1L << (EVERY - 361)) | (1L << (EXCHANGE - 361)) | (1L << (EXCLUSIVE - 361)) | (1L << (EXPIRE - 361)) | (1L << (EXPORT - 361)) | (1L << (EXTENDED - 361)) | (1L << (EXTENT_SIZE - 361)) | (1L << (FAST - 361)) | (1L << (FAULTS - 361)) | (1L << (FIELDS - 361)) | (1L << (FILE_BLOCK_SIZE - 361)) | (1L << (FILTER - 361)) | (1L << (FIRST - 361)) | (1L << (FIXED - 361)) | (1L << (FLUSH - 361)) | (1L << (FOLLOWS - 361)) | (1L << (FOUND - 361)) | (1L << (FULL - 361)))) != 0) || ((((_la - 425)) & ~0x3f) == 0 && ((1L << (_la - 425)) & ((1L << (FUNCTION - 425)) | (1L << (GENERAL - 425)) | (1L << (GLOBAL - 425)) | (1L << (GRANTS - 425)) | (1L << (GROUP_REPLICATION - 425)) | (1L << (HANDLER - 425)) | (1L << (HASH - 425)) | (1L << (HELP - 425)) | (1L << (HOST - 425)) | (1L << (HOSTS - 425)) | (1L << (IDENTIFIED - 425)) | (1L << (IGNORE_SERVER_IDS - 425)) | (1L << (IMPORT - 425)) | (1L << (INCREMENT - 425)) | (1L << (INDEXES - 425)) | (1L << (INITIAL_SIZE - 425)) | (1L << (INPLACE - 425)) | (1L << (INSERT_METHOD - 425)) | (1L << (INSTALL - 425)) | (1L << (INSTANCE - 425)) | (1L << (INSTANT - 425)) | (1L << (INVOKER - 425)) | (1L << (IO - 425)) | (1L << (IO_THREAD - 425)) | (1L << (IPC - 425)) | (1L << (ISOLATION - 425)) | (1L << (ISSUER - 425)) | (1L << (JSON - 425)) | (1L << (KEY_BLOCK_SIZE - 425)) | (1L << (LANGUAGE - 425)) | (1L << (LAST - 425)) | (1L << (LEAVES - 425)) | (1L << (LESS - 425)) | (1L << (LEVEL - 425)) | (1L << (LIST - 425)) | (1L << (LOCAL - 425)) | (1L << (LOGFILE - 425)) | (1L << (LOGS - 425)) | (1L << (MASTER - 425)) | (1L << (MASTER_AUTO_POSITION - 425)) | (1L << (MASTER_CONNECT_RETRY - 425)) | (1L << (MASTER_DELAY - 425)) | (1L << (MASTER_HEARTBEAT_PERIOD - 425)) | (1L << (MASTER_HOST - 425)) | (1L << (MASTER_LOG_FILE - 425)) | (1L << (MASTER_LOG_POS - 425)) | (1L << (MASTER_PASSWORD - 425)) | (1L << (MASTER_PORT - 425)) | (1L << (MASTER_RETRY_COUNT - 425)) | (1L << (MASTER_SSL - 425)) | (1L << (MASTER_SSL_CA - 425)) | (1L << (MASTER_SSL_CAPATH - 425)) | (1L << (MASTER_SSL_CERT - 425)) | (1L << (MASTER_SSL_CIPHER - 425)) | (1L << (MASTER_SSL_CRL - 425)) | (1L << (MASTER_SSL_CRLPATH - 425)) | (1L << (MASTER_SSL_KEY - 425)) | (1L << (MASTER_TLS_VERSION - 425)) | (1L << (MASTER_USER - 425)) | (1L << (MAX_CONNECTIONS_PER_HOUR - 425)) | (1L << (MAX_QUERIES_PER_HOUR - 425)) | (1L << (MAX_ROWS - 425)) | (1L << (MAX_SIZE - 425)))) != 0) || ((((_la - 489)) & ~0x3f) == 0 && ((1L << (_la - 489)) & ((1L << (MAX_UPDATES_PER_HOUR - 489)) | (1L << (MAX_USER_CONNECTIONS - 489)) | (1L << (MEDIUM - 489)) | (1L << (MEMBER - 489)) | (1L << (MERGE - 489)) | (1L << (MESSAGE_TEXT - 489)) | (1L << (MID - 489)) | (1L << (MIGRATE - 489)) | (1L << (MIN_ROWS - 489)) | (1L << (MODE - 489)) | (1L << (MODIFY - 489)) | (1L << (MUTEX - 489)) | (1L << (MYSQL - 489)) | (1L << (MYSQL_ERRNO - 489)) | (1L << (NAME - 489)) | (1L << (NAMES - 489)) | (1L << (NCHAR - 489)) | (1L << (NEVER - 489)) | (1L << (NEXT - 489)) | (1L << (NO - 489)) | (1L << (NOCACHE - 489)) | (1L << (NOCOPY - 489)) | (1L << (NOCYCLE - 489)) | (1L << (NOMAXVALUE - 489)) | (1L << (NOMINVALUE - 489)) | (1L << (NOWAIT - 489)) | (1L << (NODEGROUP - 489)) | (1L << (NONE - 489)) | (1L << (ODBC - 489)) | (1L << (OFFLINE - 489)) | (1L << (OFFSET - 489)) | (1L << (OF - 489)) | (1L << (OJ - 489)) | (1L << (OLD_PASSWORD - 489)) | (1L << (ONE - 489)) | (1L << (ONLINE - 489)) | (1L << (ONLY - 489)) | (1L << (OPEN - 489)) | (1L << (OPTIMIZER_COSTS - 489)) | (1L << (OPTIONS - 489)) | (1L << (OWNER - 489)) | (1L << (PACK_KEYS - 489)) | (1L << (PAGE - 489)) | (1L << (PARSER - 489)) | (1L << (PARTIAL - 489)) | (1L << (PARTITIONING - 489)) | (1L << (PARTITIONS - 489)) | (1L << (PASSWORD - 489)) | (1L << (PHASE - 489)) | (1L << (PLUGIN - 489)) | (1L << (PLUGIN_DIR - 489)) | (1L << (PLUGINS - 489)) | (1L << (PORT - 489)) | (1L << (PRECEDES - 489)) | (1L << (PREPARE - 489)) | (1L << (PRESERVE - 489)) | (1L << (PREV - 489)) | (1L << (PROCESSLIST - 489)) | (1L << (PROFILE - 489)) | (1L << (PROFILES - 489)) | (1L << (PROXY - 489)) | (1L << (QUERY - 489)) | (1L << (QUICK - 489)))) != 0) || ((((_la - 553)) & ~0x3f) == 0 && ((1L << (_la - 553)) & ((1L << (REBUILD - 553)) | (1L << (RECOVER - 553)) | (1L << (RECURSIVE - 553)) | (1L << (REDO_BUFFER_SIZE - 553)) | (1L << (REDUNDANT - 553)) | (1L << (RELAY - 553)) | (1L << (RELAY_LOG_FILE - 553)) | (1L << (RELAY_LOG_POS - 553)) | (1L << (RELAYLOG - 553)) | (1L << (REMOVE - 553)) | (1L << (REORGANIZE - 553)) | (1L << (REPAIR - 553)) | (1L << (REPLICATE_DO_DB - 553)) | (1L << (REPLICATE_DO_TABLE - 553)) | (1L << (REPLICATE_IGNORE_DB - 553)) | (1L << (REPLICATE_IGNORE_TABLE - 553)) | (1L << (REPLICATE_REWRITE_DB - 553)) | (1L << (REPLICATE_WILD_DO_TABLE - 553)) | (1L << (REPLICATE_WILD_IGNORE_TABLE - 553)) | (1L << (REPLICATION - 553)) | (1L << (RESET - 553)) | (1L << (RESTART - 553)) | (1L << (RESUME - 553)) | (1L << (RETURNED_SQLSTATE - 553)) | (1L << (RETURNS - 553)) | (1L << (ROLE - 553)) | (1L << (ROLLBACK - 553)) | (1L << (ROLLUP - 553)) | (1L << (ROTATE - 553)) | (1L << (ROW - 553)) | (1L << (ROWS - 553)) | (1L << (ROW_FORMAT - 553)) | (1L << (RTREE - 553)) | (1L << (SAVEPOINT - 553)) | (1L << (SCHEDULE - 553)) | (1L << (SECURITY - 553)) | (1L << (SEQUENCE - 553)) | (1L << (SERVER - 553)) | (1L << (SESSION - 553)) | (1L << (SHARE - 553)) | (1L << (SHARED - 553)) | (1L << (SIGNED - 553)) | (1L << (SIMPLE - 553)) | (1L << (SLAVE - 553)) | (1L << (SLOW - 553)) | (1L << (SNAPSHOT - 553)) | (1L << (SOCKET - 553)) | (1L << (SOME - 553)) | (1L << (SONAME - 553)) | (1L << (SOUNDS - 553)) | (1L << (SOURCE - 553)) | (1L << (SQL_AFTER_GTIDS - 553)) | (1L << (SQL_AFTER_MTS_GAPS - 553)) | (1L << (SQL_BEFORE_GTIDS - 553)) | (1L << (SQL_BUFFER_RESULT - 553)) | (1L << (SQL_CACHE - 553)) | (1L << (SQL_NO_CACHE - 553)) | (1L << (SQL_THREAD - 553)) | (1L << (START - 553)) | (1L << (STARTS - 553)) | (1L << (STATS_AUTO_RECALC - 553)) | (1L << (STATS_PERSISTENT - 553)) | (1L << (STATS_SAMPLE_PAGES - 553)))) != 0) || ((((_la - 617)) & ~0x3f) == 0 && ((1L << (_la - 617)) & ((1L << (STATUS - 617)) | (1L << (STOP - 617)) | (1L << (STORAGE - 617)) | (1L << (STRING - 617)) | (1L << (SUBCLASS_ORIGIN - 617)) | (1L << (SUBJECT - 617)) | (1L << (SUBPARTITION - 617)) | (1L << (SUBPARTITIONS - 617)) | (1L << (SUSPEND - 617)) | (1L << (SWAPS - 617)) | (1L << (SWITCHES - 617)) | (1L << (TABLE_NAME - 617)) | (1L << (TABLESPACE - 617)) | (1L << (TABLE_TYPE - 617)) | (1L << (TEMPORARY - 617)) | (1L << (TEMPTABLE - 617)) | (1L << (THAN - 617)) | (1L << (TRADITIONAL - 617)) | (1L << (TRANSACTION - 617)) | (1L << (TRANSACTIONAL - 617)) | (1L << (TRIGGERS - 617)) | (1L << (TRUNCATE - 617)) | (1L << (UNDEFINED - 617)) | (1L << (UNDOFILE - 617)) | (1L << (UNDO_BUFFER_SIZE - 617)) | (1L << (UNINSTALL - 617)) | (1L << (UNKNOWN - 617)) | (1L << (UNTIL - 617)) | (1L << (UPGRADE - 617)) | (1L << (USER - 617)) | (1L << (USE_FRM - 617)) | (1L << (USER_RESOURCES - 617)) | (1L << (VALIDATION - 617)) | (1L << (VALUE - 617)) | (1L << (VARIABLES - 617)) | (1L << (VIEW - 617)) | (1L << (VIRTUAL - 617)) | (1L << (WAIT - 617)) | (1L << (WARNINGS - 617)) | (1L << (WITHOUT - 617)) | (1L << (WORK - 617)) | (1L << (WRAPPER - 617)) | (1L << (X509 - 617)) | (1L << (XA - 617)) | (1L << (XML - 617)) | (1L << (EUR - 617)) | (1L << (USA - 617)) | (1L << (JIS - 617)) | (1L << (ISO - 617)) | (1L << (INTERNAL - 617)))) != 0) || ((((_la - 690)) & ~0x3f) == 0 && ((1L << (_la - 690)) & ((1L << (AUDIT_ADMIN - 690)) | (1L << (BACKUP_ADMIN - 690)) | (1L << (BINLOG_ADMIN - 690)) | (1L << (BINLOG_ENCRYPTION_ADMIN - 690)) | (1L << (CLONE_ADMIN - 690)) | (1L << (CONNECTION_ADMIN - 690)) | (1L << (ENCRYPTION_KEY_ADMIN - 690)) | (1L << (FIREWALL_ADMIN - 690)) | (1L << (FIREWALL_USER - 690)) | (1L << (ADMIN - 690)) | (1L << (GROUP_REPLICATION_ADMIN - 690)) | (1L << (INNODB_REDO_LOG_ARCHIVE - 690)) | (1L << (INVOKE - 690)) | (1L << (LAMBDA - 690)) | (1L << (NDB_STORED_USER - 690)) | (1L << (PASSWORDLESS_USER_ADMIN - 690)) | (1L << (PERSIST_RO_VARIABLES_ADMIN - 690)) | (1L << (REPLICATION_APPLIER - 690)) | (1L << (REPLICATION_SLAVE_ADMIN - 690)) | (1L << (RESOURCE_GROUP_ADMIN - 690)) | (1L << (RESOURCE_GROUP_USER - 690)) | (1L << (ROLE_ADMIN - 690)) | (1L << (S3 - 690)) | (1L << (SESSION_VARIABLES_ADMIN - 690)) | (1L << (SET_USER_ID - 690)) | (1L << (SHOW_ROUTINE - 690)) | (1L << (SYSTEM_VARIABLES_ADMIN - 690)) | (1L << (TABLE_ENCRYPTION_ADMIN - 690)) | (1L << (VERSION_TOKEN_ADMIN - 690)) | (1L << (XA_RECOVER_ADMIN - 690)))) != 0) || _la==MEMORY || _la==CATALOG_NAME || _la==ENGINE_ATTRIBUTE || _la==SECONDARY_ENGINE_ATTRIBUTE || _la==SCHEMA_NAME || ((((_la - 1086)) & ~0x3f) == 0 && ((1L << (_la - 1086)) & ((1L << (VIA - 1086)) | (1L << (LASTVAL - 1086)) | (1L << (NEXTVAL - 1086)) | (1L << (SETVAL - 1086)) | (1L << (PREVIOUS - 1086)) | (1L << (PERSISTENT - 1086)) | (1L << (BINLOG_MONITOR - 1086)) | (1L << (BINLOG_REPLAY - 1086)) | (1L << (FEDERATED_ADMIN - 1086)) | (1L << (READ_ONLY_ADMIN - 1086)) | (1L << (REPLICA - 1086)) | (1L << (REPLICATION_MASTER_ADMIN - 1086)))) != 0) || _la==ENCRYPTED || _la==ENCRYPTION_KEY_ID) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class FunctionNameBaseContext extends ParserRuleContext {
		public TerminalNode ABS() { return getToken(MySqlParser.ABS, 0); }
		public TerminalNode ACOS() { return getToken(MySqlParser.ACOS, 0); }
		public TerminalNode ADDDATE() { return getToken(MySqlParser.ADDDATE, 0); }
		public TerminalNode ADDTIME() { return getToken(MySqlParser.ADDTIME, 0); }
		public TerminalNode AES_DECRYPT() { return getToken(MySqlParser.AES_DECRYPT, 0); }
		public TerminalNode AES_ENCRYPT() { return getToken(MySqlParser.AES_ENCRYPT, 0); }
		public TerminalNode AREA() { return getToken(MySqlParser.AREA, 0); }
		public TerminalNode ASBINARY() { return getToken(MySqlParser.ASBINARY, 0); }
		public TerminalNode ASIN() { return getToken(MySqlParser.ASIN, 0); }
		public TerminalNode ASTEXT() { return getToken(MySqlParser.ASTEXT, 0); }
		public TerminalNode ASWKB() { return getToken(MySqlParser.ASWKB, 0); }
		public TerminalNode ASWKT() { return getToken(MySqlParser.ASWKT, 0); }
		public TerminalNode ASYMMETRIC_DECRYPT() { return getToken(MySqlParser.ASYMMETRIC_DECRYPT, 0); }
		public TerminalNode ASYMMETRIC_DERIVE() { return getToken(MySqlParser.ASYMMETRIC_DERIVE, 0); }
		public TerminalNode ASYMMETRIC_ENCRYPT() { return getToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0); }
		public TerminalNode ASYMMETRIC_SIGN() { return getToken(MySqlParser.ASYMMETRIC_SIGN, 0); }
		public TerminalNode ASYMMETRIC_VERIFY() { return getToken(MySqlParser.ASYMMETRIC_VERIFY, 0); }
		public TerminalNode ATAN() { return getToken(MySqlParser.ATAN, 0); }
		public TerminalNode ATAN2() { return getToken(MySqlParser.ATAN2, 0); }
		public TerminalNode BENCHMARK() { return getToken(MySqlParser.BENCHMARK, 0); }
		public TerminalNode BIN() { return getToken(MySqlParser.BIN, 0); }
		public TerminalNode BIT_COUNT() { return getToken(MySqlParser.BIT_COUNT, 0); }
		public TerminalNode BIT_LENGTH() { return getToken(MySqlParser.BIT_LENGTH, 0); }
		public TerminalNode BUFFER() { return getToken(MySqlParser.BUFFER, 0); }
		public TerminalNode CEIL() { return getToken(MySqlParser.CEIL, 0); }
		public TerminalNode CEILING() { return getToken(MySqlParser.CEILING, 0); }
		public TerminalNode CENTROID() { return getToken(MySqlParser.CENTROID, 0); }
		public TerminalNode CHARACTER_LENGTH() { return getToken(MySqlParser.CHARACTER_LENGTH, 0); }
		public TerminalNode CHARSET() { return getToken(MySqlParser.CHARSET, 0); }
		public TerminalNode CHAR_LENGTH() { return getToken(MySqlParser.CHAR_LENGTH, 0); }
		public TerminalNode COERCIBILITY() { return getToken(MySqlParser.COERCIBILITY, 0); }
		public TerminalNode COLLATION() { return getToken(MySqlParser.COLLATION, 0); }
		public TerminalNode COMPRESS() { return getToken(MySqlParser.COMPRESS, 0); }
		public TerminalNode CONCAT() { return getToken(MySqlParser.CONCAT, 0); }
		public TerminalNode CONCAT_WS() { return getToken(MySqlParser.CONCAT_WS, 0); }
		public TerminalNode CONNECTION_ID() { return getToken(MySqlParser.CONNECTION_ID, 0); }
		public TerminalNode CONV() { return getToken(MySqlParser.CONV, 0); }
		public TerminalNode CONVERT_TZ() { return getToken(MySqlParser.CONVERT_TZ, 0); }
		public TerminalNode COS() { return getToken(MySqlParser.COS, 0); }
		public TerminalNode COT() { return getToken(MySqlParser.COT, 0); }
		public TerminalNode COUNT() { return getToken(MySqlParser.COUNT, 0); }
		public TerminalNode CRC32() { return getToken(MySqlParser.CRC32, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PRIV_KEY() { return getToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0); }
		public TerminalNode CREATE_ASYMMETRIC_PUB_KEY() { return getToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0); }
		public TerminalNode CREATE_DH_PARAMETERS() { return getToken(MySqlParser.CREATE_DH_PARAMETERS, 0); }
		public TerminalNode CREATE_DIGEST() { return getToken(MySqlParser.CREATE_DIGEST, 0); }
		public TerminalNode CROSSES() { return getToken(MySqlParser.CROSSES, 0); }
		public TerminalNode CUME_DIST() { return getToken(MySqlParser.CUME_DIST, 0); }
		public TerminalNode DATABASE() { return getToken(MySqlParser.DATABASE, 0); }
		public TerminalNode DATE() { return getToken(MySqlParser.DATE, 0); }
		public TerminalNode DATEDIFF() { return getToken(MySqlParser.DATEDIFF, 0); }
		public TerminalNode DATE_FORMAT() { return getToken(MySqlParser.DATE_FORMAT, 0); }
		public TerminalNode DAY() { return getToken(MySqlParser.DAY, 0); }
		public TerminalNode DAYNAME() { return getToken(MySqlParser.DAYNAME, 0); }
		public TerminalNode DAYOFMONTH() { return getToken(MySqlParser.DAYOFMONTH, 0); }
		public TerminalNode DAYOFWEEK() { return getToken(MySqlParser.DAYOFWEEK, 0); }
		public TerminalNode DAYOFYEAR() { return getToken(MySqlParser.DAYOFYEAR, 0); }
		public TerminalNode DECODE() { return getToken(MySqlParser.DECODE, 0); }
		public TerminalNode DEGREES() { return getToken(MySqlParser.DEGREES, 0); }
		public TerminalNode DENSE_RANK() { return getToken(MySqlParser.DENSE_RANK, 0); }
		public TerminalNode DES_DECRYPT() { return getToken(MySqlParser.DES_DECRYPT, 0); }
		public TerminalNode DES_ENCRYPT() { return getToken(MySqlParser.DES_ENCRYPT, 0); }
		public TerminalNode DIMENSION() { return getToken(MySqlParser.DIMENSION, 0); }
		public TerminalNode DISJOINT() { return getToken(MySqlParser.DISJOINT, 0); }
		public TerminalNode ELT() { return getToken(MySqlParser.ELT, 0); }
		public TerminalNode ENCODE() { return getToken(MySqlParser.ENCODE, 0); }
		public TerminalNode ENCRYPT() { return getToken(MySqlParser.ENCRYPT, 0); }
		public TerminalNode ENDPOINT() { return getToken(MySqlParser.ENDPOINT, 0); }
		public TerminalNode ENVELOPE() { return getToken(MySqlParser.ENVELOPE, 0); }
		public TerminalNode EQUALS() { return getToken(MySqlParser.EQUALS, 0); }
		public TerminalNode EXP() { return getToken(MySqlParser.EXP, 0); }
		public TerminalNode EXPORT_SET() { return getToken(MySqlParser.EXPORT_SET, 0); }
		public TerminalNode EXTERIORRING() { return getToken(MySqlParser.EXTERIORRING, 0); }
		public TerminalNode EXTRACTVALUE() { return getToken(MySqlParser.EXTRACTVALUE, 0); }
		public TerminalNode FIELD() { return getToken(MySqlParser.FIELD, 0); }
		public TerminalNode FIND_IN_SET() { return getToken(MySqlParser.FIND_IN_SET, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(MySqlParser.FIRST_VALUE, 0); }
		public TerminalNode FLOOR() { return getToken(MySqlParser.FLOOR, 0); }
		public TerminalNode FORMAT() { return getToken(MySqlParser.FORMAT, 0); }
		public TerminalNode FOUND_ROWS() { return getToken(MySqlParser.FOUND_ROWS, 0); }
		public TerminalNode FROM_BASE64() { return getToken(MySqlParser.FROM_BASE64, 0); }
		public TerminalNode FROM_DAYS() { return getToken(MySqlParser.FROM_DAYS, 0); }
		public TerminalNode FROM_UNIXTIME() { return getToken(MySqlParser.FROM_UNIXTIME, 0); }
		public TerminalNode GEOMCOLLFROMTEXT() { return getToken(MySqlParser.GEOMCOLLFROMTEXT, 0); }
		public TerminalNode GEOMCOLLFROMWKB() { return getToken(MySqlParser.GEOMCOLLFROMWKB, 0); }
		public TerminalNode GEOMETRYCOLLECTION() { return getToken(MySqlParser.GEOMETRYCOLLECTION, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMTEXT() { return getToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode GEOMETRYCOLLECTIONFROMWKB() { return getToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode GEOMETRYFROMTEXT() { return getToken(MySqlParser.GEOMETRYFROMTEXT, 0); }
		public TerminalNode GEOMETRYFROMWKB() { return getToken(MySqlParser.GEOMETRYFROMWKB, 0); }
		public TerminalNode GEOMETRYN() { return getToken(MySqlParser.GEOMETRYN, 0); }
		public TerminalNode GEOMETRYTYPE() { return getToken(MySqlParser.GEOMETRYTYPE, 0); }
		public TerminalNode GEOMFROMTEXT() { return getToken(MySqlParser.GEOMFROMTEXT, 0); }
		public TerminalNode GEOMFROMWKB() { return getToken(MySqlParser.GEOMFROMWKB, 0); }
		public TerminalNode GET_FORMAT() { return getToken(MySqlParser.GET_FORMAT, 0); }
		public TerminalNode GET_LOCK() { return getToken(MySqlParser.GET_LOCK, 0); }
		public TerminalNode GLENGTH() { return getToken(MySqlParser.GLENGTH, 0); }
		public TerminalNode GREATEST() { return getToken(MySqlParser.GREATEST, 0); }
		public TerminalNode GTID_SUBSET() { return getToken(MySqlParser.GTID_SUBSET, 0); }
		public TerminalNode GTID_SUBTRACT() { return getToken(MySqlParser.GTID_SUBTRACT, 0); }
		public TerminalNode HEX() { return getToken(MySqlParser.HEX, 0); }
		public TerminalNode HOUR() { return getToken(MySqlParser.HOUR, 0); }
		public TerminalNode IFNULL() { return getToken(MySqlParser.IFNULL, 0); }
		public TerminalNode INET6_ATON() { return getToken(MySqlParser.INET6_ATON, 0); }
		public TerminalNode INET6_NTOA() { return getToken(MySqlParser.INET6_NTOA, 0); }
		public TerminalNode INET_ATON() { return getToken(MySqlParser.INET_ATON, 0); }
		public TerminalNode INET_NTOA() { return getToken(MySqlParser.INET_NTOA, 0); }
		public TerminalNode INSTR() { return getToken(MySqlParser.INSTR, 0); }
		public TerminalNode INTERIORRINGN() { return getToken(MySqlParser.INTERIORRINGN, 0); }
		public TerminalNode INTERSECTS() { return getToken(MySqlParser.INTERSECTS, 0); }
		public TerminalNode INVISIBLE() { return getToken(MySqlParser.INVISIBLE, 0); }
		public TerminalNode ISCLOSED() { return getToken(MySqlParser.ISCLOSED, 0); }
		public TerminalNode ISEMPTY() { return getToken(MySqlParser.ISEMPTY, 0); }
		public TerminalNode ISNULL() { return getToken(MySqlParser.ISNULL, 0); }
		public TerminalNode ISSIMPLE() { return getToken(MySqlParser.ISSIMPLE, 0); }
		public TerminalNode IS_FREE_LOCK() { return getToken(MySqlParser.IS_FREE_LOCK, 0); }
		public TerminalNode IS_IPV4() { return getToken(MySqlParser.IS_IPV4, 0); }
		public TerminalNode IS_IPV4_COMPAT() { return getToken(MySqlParser.IS_IPV4_COMPAT, 0); }
		public TerminalNode IS_IPV4_MAPPED() { return getToken(MySqlParser.IS_IPV4_MAPPED, 0); }
		public TerminalNode IS_IPV6() { return getToken(MySqlParser.IS_IPV6, 0); }
		public TerminalNode IS_USED_LOCK() { return getToken(MySqlParser.IS_USED_LOCK, 0); }
		public TerminalNode LAG() { return getToken(MySqlParser.LAG, 0); }
		public TerminalNode LAST_INSERT_ID() { return getToken(MySqlParser.LAST_INSERT_ID, 0); }
		public TerminalNode LAST_VALUE() { return getToken(MySqlParser.LAST_VALUE, 0); }
		public TerminalNode LCASE() { return getToken(MySqlParser.LCASE, 0); }
		public TerminalNode LEAD() { return getToken(MySqlParser.LEAD, 0); }
		public TerminalNode LEAST() { return getToken(MySqlParser.LEAST, 0); }
		public TerminalNode LEFT() { return getToken(MySqlParser.LEFT, 0); }
		public TerminalNode LENGTH() { return getToken(MySqlParser.LENGTH, 0); }
		public TerminalNode LINEFROMTEXT() { return getToken(MySqlParser.LINEFROMTEXT, 0); }
		public TerminalNode LINEFROMWKB() { return getToken(MySqlParser.LINEFROMWKB, 0); }
		public TerminalNode LINESTRING() { return getToken(MySqlParser.LINESTRING, 0); }
		public TerminalNode LINESTRINGFROMTEXT() { return getToken(MySqlParser.LINESTRINGFROMTEXT, 0); }
		public TerminalNode LINESTRINGFROMWKB() { return getToken(MySqlParser.LINESTRINGFROMWKB, 0); }
		public TerminalNode LN() { return getToken(MySqlParser.LN, 0); }
		public TerminalNode LOAD_FILE() { return getToken(MySqlParser.LOAD_FILE, 0); }
		public TerminalNode LOCATE() { return getToken(MySqlParser.LOCATE, 0); }
		public TerminalNode LOG() { return getToken(MySqlParser.LOG, 0); }
		public TerminalNode LOG10() { return getToken(MySqlParser.LOG10, 0); }
		public TerminalNode LOG2() { return getToken(MySqlParser.LOG2, 0); }
		public TerminalNode LOWER() { return getToken(MySqlParser.LOWER, 0); }
		public TerminalNode LPAD() { return getToken(MySqlParser.LPAD, 0); }
		public TerminalNode LTRIM() { return getToken(MySqlParser.LTRIM, 0); }
		public TerminalNode MAKEDATE() { return getToken(MySqlParser.MAKEDATE, 0); }
		public TerminalNode MAKETIME() { return getToken(MySqlParser.MAKETIME, 0); }
		public TerminalNode MAKE_SET() { return getToken(MySqlParser.MAKE_SET, 0); }
		public TerminalNode MASTER_POS_WAIT() { return getToken(MySqlParser.MASTER_POS_WAIT, 0); }
		public TerminalNode MBRCONTAINS() { return getToken(MySqlParser.MBRCONTAINS, 0); }
		public TerminalNode MBRDISJOINT() { return getToken(MySqlParser.MBRDISJOINT, 0); }
		public TerminalNode MBREQUAL() { return getToken(MySqlParser.MBREQUAL, 0); }
		public TerminalNode MBRINTERSECTS() { return getToken(MySqlParser.MBRINTERSECTS, 0); }
		public TerminalNode MBROVERLAPS() { return getToken(MySqlParser.MBROVERLAPS, 0); }
		public TerminalNode MBRTOUCHES() { return getToken(MySqlParser.MBRTOUCHES, 0); }
		public TerminalNode MBRWITHIN() { return getToken(MySqlParser.MBRWITHIN, 0); }
		public TerminalNode MD5() { return getToken(MySqlParser.MD5, 0); }
		public TerminalNode MICROSECOND() { return getToken(MySqlParser.MICROSECOND, 0); }
		public TerminalNode MINUTE() { return getToken(MySqlParser.MINUTE, 0); }
		public TerminalNode MLINEFROMTEXT() { return getToken(MySqlParser.MLINEFROMTEXT, 0); }
		public TerminalNode MLINEFROMWKB() { return getToken(MySqlParser.MLINEFROMWKB, 0); }
		public TerminalNode MOD() { return getToken(MySqlParser.MOD, 0); }
		public TerminalNode MONTH() { return getToken(MySqlParser.MONTH, 0); }
		public TerminalNode MONTHNAME() { return getToken(MySqlParser.MONTHNAME, 0); }
		public TerminalNode MPOINTFROMTEXT() { return getToken(MySqlParser.MPOINTFROMTEXT, 0); }
		public TerminalNode MPOINTFROMWKB() { return getToken(MySqlParser.MPOINTFROMWKB, 0); }
		public TerminalNode MPOLYFROMTEXT() { return getToken(MySqlParser.MPOLYFROMTEXT, 0); }
		public TerminalNode MPOLYFROMWKB() { return getToken(MySqlParser.MPOLYFROMWKB, 0); }
		public TerminalNode MULTILINESTRING() { return getToken(MySqlParser.MULTILINESTRING, 0); }
		public TerminalNode MULTILINESTRINGFROMTEXT() { return getToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0); }
		public TerminalNode MULTILINESTRINGFROMWKB() { return getToken(MySqlParser.MULTILINESTRINGFROMWKB, 0); }
		public TerminalNode MULTIPOINT() { return getToken(MySqlParser.MULTIPOINT, 0); }
		public TerminalNode MULTIPOINTFROMTEXT() { return getToken(MySqlParser.MULTIPOINTFROMTEXT, 0); }
		public TerminalNode MULTIPOINTFROMWKB() { return getToken(MySqlParser.MULTIPOINTFROMWKB, 0); }
		public TerminalNode MULTIPOLYGON() { return getToken(MySqlParser.MULTIPOLYGON, 0); }
		public TerminalNode MULTIPOLYGONFROMTEXT() { return getToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0); }
		public TerminalNode MULTIPOLYGONFROMWKB() { return getToken(MySqlParser.MULTIPOLYGONFROMWKB, 0); }
		public TerminalNode NAME_CONST() { return getToken(MySqlParser.NAME_CONST, 0); }
		public TerminalNode NTH_VALUE() { return getToken(MySqlParser.NTH_VALUE, 0); }
		public TerminalNode NTILE() { return getToken(MySqlParser.NTILE, 0); }
		public TerminalNode NULLIF() { return getToken(MySqlParser.NULLIF, 0); }
		public TerminalNode NUMGEOMETRIES() { return getToken(MySqlParser.NUMGEOMETRIES, 0); }
		public TerminalNode NUMINTERIORRINGS() { return getToken(MySqlParser.NUMINTERIORRINGS, 0); }
		public TerminalNode NUMPOINTS() { return getToken(MySqlParser.NUMPOINTS, 0); }
		public TerminalNode OCT() { return getToken(MySqlParser.OCT, 0); }
		public TerminalNode OCTET_LENGTH() { return getToken(MySqlParser.OCTET_LENGTH, 0); }
		public TerminalNode ORD() { return getToken(MySqlParser.ORD, 0); }
		public TerminalNode OVERLAPS() { return getToken(MySqlParser.OVERLAPS, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(MySqlParser.PERCENT_RANK, 0); }
		public TerminalNode PERIOD_ADD() { return getToken(MySqlParser.PERIOD_ADD, 0); }
		public TerminalNode PERIOD_DIFF() { return getToken(MySqlParser.PERIOD_DIFF, 0); }
		public TerminalNode PI() { return getToken(MySqlParser.PI, 0); }
		public TerminalNode POINT() { return getToken(MySqlParser.POINT, 0); }
		public TerminalNode POINTFROMTEXT() { return getToken(MySqlParser.POINTFROMTEXT, 0); }
		public TerminalNode POINTFROMWKB() { return getToken(MySqlParser.POINTFROMWKB, 0); }
		public TerminalNode POINTN() { return getToken(MySqlParser.POINTN, 0); }
		public TerminalNode POLYFROMTEXT() { return getToken(MySqlParser.POLYFROMTEXT, 0); }
		public TerminalNode POLYFROMWKB() { return getToken(MySqlParser.POLYFROMWKB, 0); }
		public TerminalNode POLYGON() { return getToken(MySqlParser.POLYGON, 0); }
		public TerminalNode POLYGONFROMTEXT() { return getToken(MySqlParser.POLYGONFROMTEXT, 0); }
		public TerminalNode POLYGONFROMWKB() { return getToken(MySqlParser.POLYGONFROMWKB, 0); }
		public TerminalNode POSITION() { return getToken(MySqlParser.POSITION, 0); }
		public TerminalNode POW() { return getToken(MySqlParser.POW, 0); }
		public TerminalNode POWER() { return getToken(MySqlParser.POWER, 0); }
		public TerminalNode QUARTER() { return getToken(MySqlParser.QUARTER, 0); }
		public TerminalNode QUOTE() { return getToken(MySqlParser.QUOTE, 0); }
		public TerminalNode RADIANS() { return getToken(MySqlParser.RADIANS, 0); }
		public TerminalNode RAND() { return getToken(MySqlParser.RAND, 0); }
		public TerminalNode RANK() { return getToken(MySqlParser.RANK, 0); }
		public TerminalNode RANDOM_BYTES() { return getToken(MySqlParser.RANDOM_BYTES, 0); }
		public TerminalNode RELEASE_LOCK() { return getToken(MySqlParser.RELEASE_LOCK, 0); }
		public TerminalNode REVERSE() { return getToken(MySqlParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(MySqlParser.RIGHT, 0); }
		public TerminalNode ROUND() { return getToken(MySqlParser.ROUND, 0); }
		public TerminalNode ROW_COUNT() { return getToken(MySqlParser.ROW_COUNT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(MySqlParser.ROW_NUMBER, 0); }
		public TerminalNode RPAD() { return getToken(MySqlParser.RPAD, 0); }
		public TerminalNode RTRIM() { return getToken(MySqlParser.RTRIM, 0); }
		public TerminalNode SECOND() { return getToken(MySqlParser.SECOND, 0); }
		public TerminalNode SEC_TO_TIME() { return getToken(MySqlParser.SEC_TO_TIME, 0); }
		public TerminalNode SCHEMA() { return getToken(MySqlParser.SCHEMA, 0); }
		public TerminalNode SESSION_USER() { return getToken(MySqlParser.SESSION_USER, 0); }
		public TerminalNode SESSION_VARIABLES_ADMIN() { return getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0); }
		public TerminalNode SHA() { return getToken(MySqlParser.SHA, 0); }
		public TerminalNode SHA1() { return getToken(MySqlParser.SHA1, 0); }
		public TerminalNode SHA2() { return getToken(MySqlParser.SHA2, 0); }
		public TerminalNode SIGN() { return getToken(MySqlParser.SIGN, 0); }
		public TerminalNode SIN() { return getToken(MySqlParser.SIN, 0); }
		public TerminalNode SLEEP() { return getToken(MySqlParser.SLEEP, 0); }
		public TerminalNode SOUNDEX() { return getToken(MySqlParser.SOUNDEX, 0); }
		public TerminalNode SQL_THREAD_WAIT_AFTER_GTIDS() { return getToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0); }
		public TerminalNode SQRT() { return getToken(MySqlParser.SQRT, 0); }
		public TerminalNode SRID() { return getToken(MySqlParser.SRID, 0); }
		public TerminalNode STARTPOINT() { return getToken(MySqlParser.STARTPOINT, 0); }
		public TerminalNode STRCMP() { return getToken(MySqlParser.STRCMP, 0); }
		public TerminalNode STR_TO_DATE() { return getToken(MySqlParser.STR_TO_DATE, 0); }
		public TerminalNode ST_AREA() { return getToken(MySqlParser.ST_AREA, 0); }
		public TerminalNode ST_ASBINARY() { return getToken(MySqlParser.ST_ASBINARY, 0); }
		public TerminalNode ST_ASTEXT() { return getToken(MySqlParser.ST_ASTEXT, 0); }
		public TerminalNode ST_ASWKB() { return getToken(MySqlParser.ST_ASWKB, 0); }
		public TerminalNode ST_ASWKT() { return getToken(MySqlParser.ST_ASWKT, 0); }
		public TerminalNode ST_BUFFER() { return getToken(MySqlParser.ST_BUFFER, 0); }
		public TerminalNode ST_CENTROID() { return getToken(MySqlParser.ST_CENTROID, 0); }
		public TerminalNode ST_CONTAINS() { return getToken(MySqlParser.ST_CONTAINS, 0); }
		public TerminalNode ST_CROSSES() { return getToken(MySqlParser.ST_CROSSES, 0); }
		public TerminalNode ST_DIFFERENCE() { return getToken(MySqlParser.ST_DIFFERENCE, 0); }
		public TerminalNode ST_DIMENSION() { return getToken(MySqlParser.ST_DIMENSION, 0); }
		public TerminalNode ST_DISJOINT() { return getToken(MySqlParser.ST_DISJOINT, 0); }
		public TerminalNode ST_DISTANCE() { return getToken(MySqlParser.ST_DISTANCE, 0); }
		public TerminalNode ST_ENDPOINT() { return getToken(MySqlParser.ST_ENDPOINT, 0); }
		public TerminalNode ST_ENVELOPE() { return getToken(MySqlParser.ST_ENVELOPE, 0); }
		public TerminalNode ST_EQUALS() { return getToken(MySqlParser.ST_EQUALS, 0); }
		public TerminalNode ST_EXTERIORRING() { return getToken(MySqlParser.ST_EXTERIORRING, 0); }
		public TerminalNode ST_GEOMCOLLFROMTEXT() { return getToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMTXT() { return getToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0); }
		public TerminalNode ST_GEOMCOLLFROMWKB() { return getToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMTEXT() { return getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYCOLLECTIONFROMWKB() { return getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYFROMTEXT() { return getToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0); }
		public TerminalNode ST_GEOMETRYFROMWKB() { return getToken(MySqlParser.ST_GEOMETRYFROMWKB, 0); }
		public TerminalNode ST_GEOMETRYN() { return getToken(MySqlParser.ST_GEOMETRYN, 0); }
		public TerminalNode ST_GEOMETRYTYPE() { return getToken(MySqlParser.ST_GEOMETRYTYPE, 0); }
		public TerminalNode ST_GEOMFROMTEXT() { return getToken(MySqlParser.ST_GEOMFROMTEXT, 0); }
		public TerminalNode ST_GEOMFROMWKB() { return getToken(MySqlParser.ST_GEOMFROMWKB, 0); }
		public TerminalNode ST_INTERIORRINGN() { return getToken(MySqlParser.ST_INTERIORRINGN, 0); }
		public TerminalNode ST_INTERSECTION() { return getToken(MySqlParser.ST_INTERSECTION, 0); }
		public TerminalNode ST_INTERSECTS() { return getToken(MySqlParser.ST_INTERSECTS, 0); }
		public TerminalNode ST_ISCLOSED() { return getToken(MySqlParser.ST_ISCLOSED, 0); }
		public TerminalNode ST_ISEMPTY() { return getToken(MySqlParser.ST_ISEMPTY, 0); }
		public TerminalNode ST_ISSIMPLE() { return getToken(MySqlParser.ST_ISSIMPLE, 0); }
		public TerminalNode ST_LINEFROMTEXT() { return getToken(MySqlParser.ST_LINEFROMTEXT, 0); }
		public TerminalNode ST_LINEFROMWKB() { return getToken(MySqlParser.ST_LINEFROMWKB, 0); }
		public TerminalNode ST_LINESTRINGFROMTEXT() { return getToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0); }
		public TerminalNode ST_LINESTRINGFROMWKB() { return getToken(MySqlParser.ST_LINESTRINGFROMWKB, 0); }
		public TerminalNode ST_NUMGEOMETRIES() { return getToken(MySqlParser.ST_NUMGEOMETRIES, 0); }
		public TerminalNode ST_NUMINTERIORRING() { return getToken(MySqlParser.ST_NUMINTERIORRING, 0); }
		public TerminalNode ST_NUMINTERIORRINGS() { return getToken(MySqlParser.ST_NUMINTERIORRINGS, 0); }
		public TerminalNode ST_NUMPOINTS() { return getToken(MySqlParser.ST_NUMPOINTS, 0); }
		public TerminalNode ST_OVERLAPS() { return getToken(MySqlParser.ST_OVERLAPS, 0); }
		public TerminalNode ST_POINTFROMTEXT() { return getToken(MySqlParser.ST_POINTFROMTEXT, 0); }
		public TerminalNode ST_POINTFROMWKB() { return getToken(MySqlParser.ST_POINTFROMWKB, 0); }
		public TerminalNode ST_POINTN() { return getToken(MySqlParser.ST_POINTN, 0); }
		public TerminalNode ST_POLYFROMTEXT() { return getToken(MySqlParser.ST_POLYFROMTEXT, 0); }
		public TerminalNode ST_POLYFROMWKB() { return getToken(MySqlParser.ST_POLYFROMWKB, 0); }
		public TerminalNode ST_POLYGONFROMTEXT() { return getToken(MySqlParser.ST_POLYGONFROMTEXT, 0); }
		public TerminalNode ST_POLYGONFROMWKB() { return getToken(MySqlParser.ST_POLYGONFROMWKB, 0); }
		public TerminalNode ST_SRID() { return getToken(MySqlParser.ST_SRID, 0); }
		public TerminalNode ST_STARTPOINT() { return getToken(MySqlParser.ST_STARTPOINT, 0); }
		public TerminalNode ST_SYMDIFFERENCE() { return getToken(MySqlParser.ST_SYMDIFFERENCE, 0); }
		public TerminalNode ST_TOUCHES() { return getToken(MySqlParser.ST_TOUCHES, 0); }
		public TerminalNode ST_UNION() { return getToken(MySqlParser.ST_UNION, 0); }
		public TerminalNode ST_WITHIN() { return getToken(MySqlParser.ST_WITHIN, 0); }
		public TerminalNode ST_X() { return getToken(MySqlParser.ST_X, 0); }
		public TerminalNode ST_Y() { return getToken(MySqlParser.ST_Y, 0); }
		public TerminalNode SUBDATE() { return getToken(MySqlParser.SUBDATE, 0); }
		public TerminalNode SUBSTRING_INDEX() { return getToken(MySqlParser.SUBSTRING_INDEX, 0); }
		public TerminalNode SUBTIME() { return getToken(MySqlParser.SUBTIME, 0); }
		public TerminalNode SYSTEM_USER() { return getToken(MySqlParser.SYSTEM_USER, 0); }
		public TerminalNode TAN() { return getToken(MySqlParser.TAN, 0); }
		public TerminalNode TIME() { return getToken(MySqlParser.TIME, 0); }
		public TerminalNode TIMEDIFF() { return getToken(MySqlParser.TIMEDIFF, 0); }
		public TerminalNode TIMESTAMP() { return getToken(MySqlParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMPADD() { return getToken(MySqlParser.TIMESTAMPADD, 0); }
		public TerminalNode TIMESTAMPDIFF() { return getToken(MySqlParser.TIMESTAMPDIFF, 0); }
		public TerminalNode TIME_FORMAT() { return getToken(MySqlParser.TIME_FORMAT, 0); }
		public TerminalNode TIME_TO_SEC() { return getToken(MySqlParser.TIME_TO_SEC, 0); }
		public TerminalNode TOUCHES() { return getToken(MySqlParser.TOUCHES, 0); }
		public TerminalNode TO_BASE64() { return getToken(MySqlParser.TO_BASE64, 0); }
		public TerminalNode TO_DAYS() { return getToken(MySqlParser.TO_DAYS, 0); }
		public TerminalNode TO_SECONDS() { return getToken(MySqlParser.TO_SECONDS, 0); }
		public TerminalNode UCASE() { return getToken(MySqlParser.UCASE, 0); }
		public TerminalNode UNCOMPRESS() { return getToken(MySqlParser.UNCOMPRESS, 0); }
		public TerminalNode UNCOMPRESSED_LENGTH() { return getToken(MySqlParser.UNCOMPRESSED_LENGTH, 0); }
		public TerminalNode UNHEX() { return getToken(MySqlParser.UNHEX, 0); }
		public TerminalNode UNIX_TIMESTAMP() { return getToken(MySqlParser.UNIX_TIMESTAMP, 0); }
		public TerminalNode UPDATEXML() { return getToken(MySqlParser.UPDATEXML, 0); }
		public TerminalNode UPPER() { return getToken(MySqlParser.UPPER, 0); }
		public TerminalNode UUID() { return getToken(MySqlParser.UUID, 0); }
		public TerminalNode UUID_SHORT() { return getToken(MySqlParser.UUID_SHORT, 0); }
		public TerminalNode VALIDATE_PASSWORD_STRENGTH() { return getToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0); }
		public TerminalNode VERSION() { return getToken(MySqlParser.VERSION, 0); }
		public TerminalNode VISIBLE() { return getToken(MySqlParser.VISIBLE, 0); }
		public TerminalNode WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS() { return getToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0); }
		public TerminalNode WEEK() { return getToken(MySqlParser.WEEK, 0); }
		public TerminalNode WEEKDAY() { return getToken(MySqlParser.WEEKDAY, 0); }
		public TerminalNode WEEKOFYEAR() { return getToken(MySqlParser.WEEKOFYEAR, 0); }
		public TerminalNode WEIGHT_STRING() { return getToken(MySqlParser.WEIGHT_STRING, 0); }
		public TerminalNode WITHIN() { return getToken(MySqlParser.WITHIN, 0); }
		public TerminalNode YEAR() { return getToken(MySqlParser.YEAR, 0); }
		public TerminalNode YEARWEEK() { return getToken(MySqlParser.YEARWEEK, 0); }
		public TerminalNode Y_FUNCTION() { return getToken(MySqlParser.Y_FUNCTION, 0); }
		public TerminalNode X_FUNCTION() { return getToken(MySqlParser.X_FUNCTION, 0); }
		public TerminalNode JSON_ARRAY() { return getToken(MySqlParser.JSON_ARRAY, 0); }
		public TerminalNode JSON_OBJECT() { return getToken(MySqlParser.JSON_OBJECT, 0); }
		public TerminalNode JSON_QUOTE() { return getToken(MySqlParser.JSON_QUOTE, 0); }
		public TerminalNode JSON_CONTAINS() { return getToken(MySqlParser.JSON_CONTAINS, 0); }
		public TerminalNode JSON_CONTAINS_PATH() { return getToken(MySqlParser.JSON_CONTAINS_PATH, 0); }
		public TerminalNode JSON_EXTRACT() { return getToken(MySqlParser.JSON_EXTRACT, 0); }
		public TerminalNode JSON_KEYS() { return getToken(MySqlParser.JSON_KEYS, 0); }
		public TerminalNode JSON_OVERLAPS() { return getToken(MySqlParser.JSON_OVERLAPS, 0); }
		public TerminalNode JSON_SEARCH() { return getToken(MySqlParser.JSON_SEARCH, 0); }
		public TerminalNode JSON_VALUE() { return getToken(MySqlParser.JSON_VALUE, 0); }
		public TerminalNode JSON_ARRAY_APPEND() { return getToken(MySqlParser.JSON_ARRAY_APPEND, 0); }
		public TerminalNode JSON_ARRAY_INSERT() { return getToken(MySqlParser.JSON_ARRAY_INSERT, 0); }
		public TerminalNode JSON_INSERT() { return getToken(MySqlParser.JSON_INSERT, 0); }
		public TerminalNode JSON_MERGE() { return getToken(MySqlParser.JSON_MERGE, 0); }
		public TerminalNode JSON_MERGE_PATCH() { return getToken(MySqlParser.JSON_MERGE_PATCH, 0); }
		public TerminalNode JSON_MERGE_PRESERVE() { return getToken(MySqlParser.JSON_MERGE_PRESERVE, 0); }
		public TerminalNode JSON_REMOVE() { return getToken(MySqlParser.JSON_REMOVE, 0); }
		public TerminalNode JSON_REPLACE() { return getToken(MySqlParser.JSON_REPLACE, 0); }
		public TerminalNode JSON_SET() { return getToken(MySqlParser.JSON_SET, 0); }
		public TerminalNode JSON_UNQUOTE() { return getToken(MySqlParser.JSON_UNQUOTE, 0); }
		public TerminalNode JSON_DEPTH() { return getToken(MySqlParser.JSON_DEPTH, 0); }
		public TerminalNode JSON_LENGTH() { return getToken(MySqlParser.JSON_LENGTH, 0); }
		public TerminalNode JSON_TYPE() { return getToken(MySqlParser.JSON_TYPE, 0); }
		public TerminalNode JSON_VALID() { return getToken(MySqlParser.JSON_VALID, 0); }
		public TerminalNode JSON_TABLE() { return getToken(MySqlParser.JSON_TABLE, 0); }
		public TerminalNode JSON_SCHEMA_VALID() { return getToken(MySqlParser.JSON_SCHEMA_VALID, 0); }
		public TerminalNode JSON_SCHEMA_VALIDATION_REPORT() { return getToken(MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, 0); }
		public TerminalNode JSON_PRETTY() { return getToken(MySqlParser.JSON_PRETTY, 0); }
		public TerminalNode JSON_STORAGE_FREE() { return getToken(MySqlParser.JSON_STORAGE_FREE, 0); }
		public TerminalNode JSON_STORAGE_SIZE() { return getToken(MySqlParser.JSON_STORAGE_SIZE, 0); }
		public TerminalNode JSON_ARRAYAGG() { return getToken(MySqlParser.JSON_ARRAYAGG, 0); }
		public TerminalNode JSON_OBJECTAGG() { return getToken(MySqlParser.JSON_OBJECTAGG, 0); }
		public TerminalNode LASTVAL() { return getToken(MySqlParser.LASTVAL, 0); }
		public TerminalNode NEXTVAL() { return getToken(MySqlParser.NEXTVAL, 0); }
		public TerminalNode SETVAL() { return getToken(MySqlParser.SETVAL, 0); }
		public FunctionNameBaseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_functionNameBase; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).enterFunctionNameBase(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof MySqlParserListener ) ((MySqlParserListener)listener).exitFunctionNameBase(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof MySqlParserVisitor ) return ((MySqlParserVisitor<? extends T>)visitor).visitFunctionNameBase(this);
			else return visitor.visitChildren(this);
		}
	}

	public final FunctionNameBaseContext functionNameBase() throws RecognitionException {
		FunctionNameBaseContext _localctx = new FunctionNameBaseContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_functionNameBase);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3325);
			_la = _input.LA(1);
			if ( !(_la==DATABASE || ((((_la - 93)) & ~0x3f) == 0 && ((1L << (_la - 93)) & ((1L << (LEFT - 93)) | (1L << (RIGHT - 93)) | (1L << (SCHEMA - 93)))) != 0) || ((((_la - 211)) & ~0x3f) == 0 && ((1L << (_la - 211)) & ((1L << (DATE - 211)) | (1L << (TIME - 211)) | (1L << (TIMESTAMP - 211)) | (1L << (YEAR - 211)) | (1L << (JSON_ARRAY - 211)) | (1L << (JSON_OBJECT - 211)) | (1L << (JSON_QUOTE - 211)) | (1L << (JSON_CONTAINS - 211)) | (1L << (JSON_CONTAINS_PATH - 211)) | (1L << (JSON_EXTRACT - 211)) | (1L << (JSON_KEYS - 211)) | (1L << (JSON_OVERLAPS - 211)) | (1L << (JSON_SEARCH - 211)) | (1L << (JSON_VALUE - 211)) | (1L << (JSON_ARRAY_APPEND - 211)) | (1L << (JSON_ARRAY_INSERT - 211)) | (1L << (JSON_INSERT - 211)) | (1L << (JSON_MERGE - 211)) | (1L << (JSON_MERGE_PATCH - 211)) | (1L << (JSON_MERGE_PRESERVE - 211)) | (1L << (JSON_REMOVE - 211)) | (1L << (JSON_REPLACE - 211)) | (1L << (JSON_SET - 211)) | (1L << (JSON_UNQUOTE - 211)) | (1L << (JSON_DEPTH - 211)) | (1L << (JSON_LENGTH - 211)) | (1L << (JSON_TYPE - 211)) | (1L << (JSON_VALID - 211)) | (1L << (JSON_TABLE - 211)) | (1L << (JSON_SCHEMA_VALID - 211)) | (1L << (JSON_SCHEMA_VALIDATION_REPORT - 211)) | (1L << (JSON_PRETTY - 211)) | (1L << (JSON_STORAGE_FREE - 211)) | (1L << (JSON_STORAGE_SIZE - 211)))) != 0) || ((((_la - 275)) & ~0x3f) == 0 && ((1L << (_la - 275)) & ((1L << (JSON_ARRAYAGG - 275)) | (1L << (JSON_OBJECTAGG - 275)) | (1L << (COUNT - 275)) | (1L << (CUME_DIST - 275)) | (1L << (DENSE_RANK - 275)) | (1L << (FIRST_VALUE - 275)) | (1L << (LAG - 275)) | (1L << (LAST_VALUE - 275)) | (1L << (LEAD - 275)) | (1L << (NTILE - 275)) | (1L << (NTH_VALUE - 275)) | (1L << (PERCENT_RANK - 275)) | (1L << (RANK - 275)) | (1L << (ROW_NUMBER - 275)) | (1L << (POSITION - 275)))) != 0) || _la==INVISIBLE || ((((_la - 656)) & ~0x3f) == 0 && ((1L << (_la - 656)) & ((1L << (VISIBLE - 656)) | (1L << (QUARTER - 656)) | (1L << (MONTH - 656)) | (1L << (DAY - 656)) | (1L << (HOUR - 656)) | (1L << (MINUTE - 656)) | (1L << (WEEK - 656)) | (1L << (SECOND - 656)) | (1L << (MICROSECOND - 656)) | (1L << (SESSION_VARIABLES_ADMIN - 656)))) != 0) || ((((_la - 783)) & ~0x3f) == 0 && ((1L << (_la - 783)) & ((1L << (GEOMETRYCOLLECTION - 783)) | (1L << (LINESTRING - 783)) | (1L << (MULTILINESTRING - 783)) | (1L << (MULTIPOINT - 783)) | (1L << (MULTIPOLYGON - 783)) | (1L << (POINT - 783)) | (1L << (POLYGON - 783)) | (1L << (ABS - 783)) | (1L << (ACOS - 783)) | (1L << (ADDDATE - 783)) | (1L << (ADDTIME - 783)) | (1L << (AES_DECRYPT - 783)) | (1L << (AES_ENCRYPT - 783)) | (1L << (AREA - 783)) | (1L << (ASBINARY - 783)) | (1L << (ASIN - 783)) | (1L << (ASTEXT - 783)) | (1L << (ASWKB - 783)) | (1L << (ASWKT - 783)) | (1L << (ASYMMETRIC_DECRYPT - 783)) | (1L << (ASYMMETRIC_DERIVE - 783)) | (1L << (ASYMMETRIC_ENCRYPT - 783)) | (1L << (ASYMMETRIC_SIGN - 783)) | (1L << (ASYMMETRIC_VERIFY - 783)) | (1L << (ATAN - 783)) | (1L << (ATAN2 - 783)) | (1L << (BENCHMARK - 783)) | (1L << (BIN - 783)) | (1L << (BIT_COUNT - 783)) | (1L << (BIT_LENGTH - 783)) | (1L << (BUFFER - 783)) | (1L << (CEIL - 783)) | (1L << (CEILING - 783)) | (1L << (CENTROID - 783)) | (1L << (CHARACTER_LENGTH - 783)) | (1L << (CHARSET - 783)) | (1L << (CHAR_LENGTH - 783)) | (1L << (COERCIBILITY - 783)) | (1L << (COLLATION - 783)) | (1L << (COMPRESS - 783)) | (1L << (CONCAT - 783)) | (1L << (CONCAT_WS - 783)) | (1L << (CONNECTION_ID - 783)) | (1L << (CONV - 783)) | (1L << (CONVERT_TZ - 783)) | (1L << (COS - 783)) | (1L << (COT - 783)) | (1L << (CRC32 - 783)) | (1L << (CREATE_ASYMMETRIC_PRIV_KEY - 783)) | (1L << (CREATE_ASYMMETRIC_PUB_KEY - 783)) | (1L << (CREATE_DH_PARAMETERS - 783)) | (1L << (CREATE_DIGEST - 783)) | (1L << (CROSSES - 783)) | (1L << (DATEDIFF - 783)) | (1L << (DATE_FORMAT - 783)) | (1L << (DAYNAME - 783)) | (1L << (DAYOFMONTH - 783)) | (1L << (DAYOFWEEK - 783)) | (1L << (DAYOFYEAR - 783)) | (1L << (DECODE - 783)) | (1L << (DEGREES - 783)))) != 0) || ((((_la - 847)) & ~0x3f) == 0 && ((1L << (_la - 847)) & ((1L << (DES_DECRYPT - 847)) | (1L << (DES_ENCRYPT - 847)) | (1L << (DIMENSION - 847)) | (1L << (DISJOINT - 847)) | (1L << (ELT - 847)) | (1L << (ENCODE - 847)) | (1L << (ENCRYPT - 847)) | (1L << (ENDPOINT - 847)) | (1L << (ENVELOPE - 847)) | (1L << (EQUALS - 847)) | (1L << (EXP - 847)) | (1L << (EXPORT_SET - 847)) | (1L << (EXTERIORRING - 847)) | (1L << (EXTRACTVALUE - 847)) | (1L << (FIELD - 847)) | (1L << (FIND_IN_SET - 847)) | (1L << (FLOOR - 847)) | (1L << (FORMAT - 847)) | (1L << (FOUND_ROWS - 847)) | (1L << (FROM_BASE64 - 847)) | (1L << (FROM_DAYS - 847)) | (1L << (FROM_UNIXTIME - 847)) | (1L << (GEOMCOLLFROMTEXT - 847)) | (1L << (GEOMCOLLFROMWKB - 847)) | (1L << (GEOMETRYCOLLECTIONFROMTEXT - 847)) | (1L << (GEOMETRYCOLLECTIONFROMWKB - 847)) | (1L << (GEOMETRYFROMTEXT - 847)) | (1L << (GEOMETRYFROMWKB - 847)) | (1L << (GEOMETRYN - 847)) | (1L << (GEOMETRYTYPE - 847)) | (1L << (GEOMFROMTEXT - 847)) | (1L << (GEOMFROMWKB - 847)) | (1L << (GET_FORMAT - 847)) | (1L << (GET_LOCK - 847)) | (1L << (GLENGTH - 847)) | (1L << (GREATEST - 847)) | (1L << (GTID_SUBSET - 847)) | (1L << (GTID_SUBTRACT - 847)) | (1L << (HEX - 847)) | (1L << (IFNULL - 847)) | (1L << (INET6_ATON - 847)) | (1L << (INET6_NTOA - 847)) | (1L << (INET_ATON - 847)) | (1L << (INET_NTOA - 847)) | (1L << (INSTR - 847)) | (1L << (INTERIORRINGN - 847)) | (1L << (INTERSECTS - 847)) | (1L << (ISCLOSED - 847)) | (1L << (ISEMPTY - 847)) | (1L << (ISNULL - 847)) | (1L << (ISSIMPLE - 847)) | (1L << (IS_FREE_LOCK - 847)) | (1L << (IS_IPV4 - 847)) | (1L << (IS_IPV4_COMPAT - 847)) | (1L << (IS_IPV4_MAPPED - 847)) | (1L << (IS_IPV6 - 847)) | (1L << (IS_USED_LOCK - 847)) | (1L << (LAST_INSERT_ID - 847)) | (1L << (LCASE - 847)) | (1L << (LEAST - 847)) | (1L << (LENGTH - 847)) | (1L << (LINEFROMTEXT - 847)) | (1L << (LINEFROMWKB - 847)))) != 0) || ((((_la - 911)) & ~0x3f) == 0 && ((1L << (_la - 911)) & ((1L << (LINESTRINGFROMTEXT - 911)) | (1L << (LINESTRINGFROMWKB - 911)) | (1L << (LN - 911)) | (1L << (LOAD_FILE - 911)) | (1L << (LOCATE - 911)) | (1L << (LOG - 911)) | (1L << (LOG10 - 911)) | (1L << (LOG2 - 911)) | (1L << (LOWER - 911)) | (1L << (LPAD - 911)) | (1L << (LTRIM - 911)) | (1L << (MAKEDATE - 911)) | (1L << (MAKETIME - 911)) | (1L << (MAKE_SET - 911)) | (1L << (MASTER_POS_WAIT - 911)) | (1L << (MBRCONTAINS - 911)) | (1L << (MBRDISJOINT - 911)) | (1L << (MBREQUAL - 911)) | (1L << (MBRINTERSECTS - 911)) | (1L << (MBROVERLAPS - 911)) | (1L << (MBRTOUCHES - 911)) | (1L << (MBRWITHIN - 911)) | (1L << (MD5 - 911)) | (1L << (MLINEFROMTEXT - 911)) | (1L << (MLINEFROMWKB - 911)) | (1L << (MONTHNAME - 911)) | (1L << (MPOINTFROMTEXT - 911)) | (1L << (MPOINTFROMWKB - 911)) | (1L << (MPOLYFROMTEXT - 911)) | (1L << (MPOLYFROMWKB - 911)) | (1L << (MULTILINESTRINGFROMTEXT - 911)) | (1L << (MULTILINESTRINGFROMWKB - 911)) | (1L << (MULTIPOINTFROMTEXT - 911)) | (1L << (MULTIPOINTFROMWKB - 911)) | (1L << (MULTIPOLYGONFROMTEXT - 911)) | (1L << (MULTIPOLYGONFROMWKB - 911)) | (1L << (NAME_CONST - 911)) | (1L << (NULLIF - 911)) | (1L << (NUMGEOMETRIES - 911)) | (1L << (NUMINTERIORRINGS - 911)) | (1L << (NUMPOINTS - 911)) | (1L << (OCT - 911)) | (1L << (OCTET_LENGTH - 911)) | (1L << (ORD - 911)) | (1L << (OVERLAPS - 911)) | (1L << (PERIOD_ADD - 911)) | (1L << (PERIOD_DIFF - 911)) | (1L << (PI - 911)) | (1L << (POINTFROMTEXT - 911)) | (1L << (POINTFROMWKB - 911)) | (1L << (POINTN - 911)) | (1L << (POLYFROMTEXT - 911)) | (1L << (POLYFROMWKB - 911)) | (1L << (POLYGONFROMTEXT - 911)) | (1L << (POLYGONFROMWKB - 911)) | (1L << (POW - 911)) | (1L << (POWER - 911)) | (1L << (QUOTE - 911)) | (1L << (RADIANS - 911)) | (1L << (RAND - 911)) | (1L << (RANDOM_BYTES - 911)) | (1L << (RELEASE_LOCK - 911)) | (1L << (REVERSE - 911)) | (1L << (ROUND - 911)))) != 0) || ((((_la - 975)) & ~0x3f) == 0 && ((1L << (_la - 975)) & ((1L << (ROW_COUNT - 975)) | (1L << (RPAD - 975)) | (1L << (RTRIM - 975)) | (1L << (SEC_TO_TIME - 975)) | (1L << (SESSION_USER - 975)) | (1L << (SHA - 975)) | (1L << (SHA1 - 975)) | (1L << (SHA2 - 975)) | (1L << (SIGN - 975)) | (1L << (SIN - 975)) | (1L << (SLEEP - 975)) | (1L << (SOUNDEX - 975)) | (1L << (SQL_THREAD_WAIT_AFTER_GTIDS - 975)) | (1L << (SQRT - 975)) | (1L << (SRID - 975)) | (1L << (STARTPOINT - 975)) | (1L << (STRCMP - 975)) | (1L << (STR_TO_DATE - 975)) | (1L << (ST_AREA - 975)) | (1L << (ST_ASBINARY - 975)) | (1L << (ST_ASTEXT - 975)) | (1L << (ST_ASWKB - 975)) | (1L << (ST_ASWKT - 975)) | (1L << (ST_BUFFER - 975)) | (1L << (ST_CENTROID - 975)) | (1L << (ST_CONTAINS - 975)) | (1L << (ST_CROSSES - 975)) | (1L << (ST_DIFFERENCE - 975)) | (1L << (ST_DIMENSION - 975)) | (1L << (ST_DISJOINT - 975)) | (1L << (ST_DISTANCE - 975)) | (1L << (ST_ENDPOINT - 975)) | (1L << (ST_ENVELOPE - 975)) | (1L << (ST_EQUALS - 975)) | (1L << (ST_EXTERIORRING - 975)) | (1L << (ST_GEOMCOLLFROMTEXT - 975)) | (1L << (ST_GEOMCOLLFROMTXT - 975)) | (1L << (ST_GEOMCOLLFROMWKB - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMTEXT - 975)) | (1L << (ST_GEOMETRYCOLLECTIONFROMWKB - 975)) | (1L << (ST_GEOMETRYFROMTEXT - 975)) | (1L << (ST_GEOMETRYFROMWKB - 975)) | (1L << (ST_GEOMETRYN - 975)) | (1L << (ST_GEOMETRYTYPE - 975)) | (1L << (ST_GEOMFROMTEXT - 975)) | (1L << (ST_GEOMFROMWKB - 975)) | (1L << (ST_INTERIORRINGN - 975)) | (1L << (ST_INTERSECTION - 975)) | (1L << (ST_INTERSECTS - 975)) | (1L << (ST_ISCLOSED - 975)) | (1L << (ST_ISEMPTY - 975)) | (1L << (ST_ISSIMPLE - 975)) | (1L << (ST_LINEFROMTEXT - 975)) | (1L << (ST_LINEFROMWKB - 975)) | (1L << (ST_LINESTRINGFROMTEXT - 975)) | (1L << (ST_LINESTRINGFROMWKB - 975)) | (1L << (ST_NUMGEOMETRIES - 975)) | (1L << (ST_NUMINTERIORRING - 975)) | (1L << (ST_NUMINTERIORRINGS - 975)) | (1L << (ST_NUMPOINTS - 975)) | (1L << (ST_OVERLAPS - 975)) | (1L << (ST_POINTFROMTEXT - 975)))) != 0) || ((((_la - 1039)) & ~0x3f) == 0 && ((1L << (_la - 1039)) & ((1L << (ST_POINTFROMWKB - 1039)) | (1L << (ST_POINTN - 1039)) | (1L << (ST_POLYFROMTEXT - 1039)) | (1L << (ST_POLYFROMWKB - 1039)) | (1L << (ST_POLYGONFROMTEXT - 1039)) | (1L << (ST_POLYGONFROMWKB - 1039)) | (1L << (ST_SRID - 1039)) | (1L << (ST_STARTPOINT - 1039)) | (1L << (ST_SYMDIFFERENCE - 1039)) | (1L << (ST_TOUCHES - 1039)) | (1L << (ST_UNION - 1039)) | (1L << (ST_WITHIN - 1039)) | (1L << (ST_X - 1039)) | (1L << (ST_Y - 1039)) | (1L << (SUBDATE - 1039)) | (1L << (SUBSTRING_INDEX - 1039)) | (1L << (SUBTIME - 1039)) | (1L << (SYSTEM_USER - 1039)) | (1L << (TAN - 1039)) | (1L << (TIMEDIFF - 1039)) | (1L << (TIMESTAMPADD - 1039)) | (1L << (TIMESTAMPDIFF - 1039)) | (1L << (TIME_FORMAT - 1039)) | (1L << (TIME_TO_SEC - 1039)) | (1L << (TOUCHES - 1039)) | (1L << (TO_BASE64 - 1039)) | (1L << (TO_DAYS - 1039)) | (1L << (TO_SECONDS - 1039)) | (1L << (UCASE - 1039)) | (1L << (UNCOMPRESS - 1039)) | (1L << (UNCOMPRESSED_LENGTH - 1039)) | (1L << (UNHEX - 1039)) | (1L << (UNIX_TIMESTAMP - 1039)) | (1L << (UPDATEXML - 1039)) | (1L << (UPPER - 1039)) | (1L << (UUID - 1039)) | (1L << (UUID_SHORT - 1039)) | (1L << (VALIDATE_PASSWORD_STRENGTH - 1039)) | (1L << (VERSION - 1039)) | (1L << (WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 1039)) | (1L << (WEEKDAY - 1039)) | (1L << (WEEKOFYEAR - 1039)) | (1L << (WEIGHT_STRING - 1039)) | (1L << (WITHIN - 1039)) | (1L << (YEARWEEK - 1039)) | (1L << (Y_FUNCTION - 1039)) | (1L << (X_FUNCTION - 1039)) | (1L << (LASTVAL - 1039)) | (1L << (NEXTVAL - 1039)) | (1L << (SETVAL - 1039)))) != 0) || _la==MOD) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 165:
			return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 166:
			return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 167:
			return expressionAtom_sempred((ExpressionAtomContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 3);
		}
		return true;
	}
	private boolean predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1:
			return precpred(_ctx, 8);
		case 2:
			return precpred(_ctx, 6);
		case 3:
			return precpred(_ctx, 5);
		case 4:
			return precpred(_ctx, 3);
		case 5:
			return precpred(_ctx, 10);
		case 6:
			return precpred(_ctx, 9);
		case 7:
			return precpred(_ctx, 7);
		case 8:
			return precpred(_ctx, 4);
		case 9:
			return precpred(_ctx, 1);
		}
		return true;
	}
	private boolean expressionAtom_sempred(ExpressionAtomContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10:
			return precpred(_ctx, 3);
		case 11:
			return precpred(_ctx, 2);
		case 12:
			return precpred(_ctx, 1);
		case 13:
			return precpred(_ctx, 12);
		}
		return true;
	}

	private static final String _serializedATNSegment0 =
		"\u0004\u0001\u0483\u0d00\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"+
		"\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"+
		"\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"+
		"\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"+
		"\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"+
		"\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"+
		",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"+
		"1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"+
		"6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"+
		";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"+
		"@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"+
		"E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"+
		"J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"+
		"O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"+
		"T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"+
		"Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"+
		"^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"+
		"c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"+
		"h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"+
		"m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"+
		"r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"+
		"w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"+
		"|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"+
		"\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"+
		"\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"+
		"\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"+
		"\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"+
		"\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"+
		"\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"+
		"\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"+
		"\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"+
		"\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"+
		"\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"+
		"\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007"+
		"\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007"+
		"\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007"+
		"\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007"+
		"\u00aa\u0002\u00ab\u0007\u00ab\u0002\u00ac\u0007\u00ac\u0002\u00ad\u0007"+
		"\u00ad\u0002\u00ae\u0007\u00ae\u0002\u00af\u0007\u00af\u0002\u00b0\u0007"+
		"\u00b0\u0002\u00b1\u0007\u00b1\u0002\u00b2\u0007\u00b2\u0002\u00b3\u0007"+
		"\u00b3\u0002\u00b4\u0007\u00b4\u0001\u0000\u0001\u0000\u0001\u0000\u0003"+
		"\u0000\u016e\b\u0000\u0001\u0000\u0003\u0000\u0171\b\u0000\u0001\u0000"+
		"\u0005\u0000\u0174\b\u0000\n\u0000\f\u0000\u0177\t\u0000\u0001\u0000\u0001"+
		"\u0000\u0001\u0000\u0003\u0000\u017c\b\u0000\u0001\u0000\u0003\u0000\u017f"+
		"\b\u0000\u0001\u0000\u0003\u0000\u0182\b\u0000\u0001\u0001\u0001\u0001"+
		"\u0003\u0001\u0186\b\u0001\u0001\u0002\u0001\u0002\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0001\u0003\u0001\u0003\u0003\u0003\u018f\b\u0003\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0004\u0003\u0004\u019b\b\u0004\u0001\u0005"+
		"\u0001\u0005\u0001\u0005\u0003\u0005\u01a0\b\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0006\u0001\u0006\u0003\u0006\u01a6\b\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0005\u0007"+
		"\u01af\b\u0007\n\u0007\f\u0007\u01b2\t\u0007\u0001\u0007\u0001\u0007\u0003"+
		"\u0007\u01b6\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0003\u0007\u01be\b\u0007\u0001\b\u0001\b\u0001\t\u0001"+
		"\t\u0001\n\u0001\n\u0003\n\u01c6\b\n\u0001\n\u0001\n\u0001\n\u0003\n\u01cb"+
		"\b\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0003\n\u01d3\b\n"+
		"\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0003\n\u01db\b\n\u0001"+
		"\n\u0001\n\u0001\n\u0003\n\u01e0\b\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001"+
		"\n\u0001\n\u0003\n\u01e8\b\n\u0001\n\u0003\n\u01eb\b\n\u0001\u000b\u0001"+
		"\u000b\u0001\u000b\u0001\u000b\u0003\u000b\u01f1\b\u000b\u0001\f\u0001"+
		"\f\u0001\f\u0001\f\u0003\f\u01f7\b\f\u0001\f\u0001\f\u0001\r\u0001\r\u0001"+
		"\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001\r\u0001"+
		"\r\u0001\r\u0003\r\u0208\b\r\u0001\u000e\u0001\u000e\u0001\u000e\u0001"+
		"\u000e\u0001\u000e\u0003\u000e\u020f\b\u000e\u0001\u000f\u0001\u000f\u0001"+
		"\u000f\u0001\u0010\u0001\u0010\u0003\u0010\u0216\b\u0010\u0001\u0010\u0001"+
		"\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001"+
		"\u0010\u0001\u0010\u0001\u0010\u0003\u0010\u0222\b\u0010\u0001\u0010\u0001"+
		"\u0010\u0001\u0010\u0003\u0010\u0227\b\u0010\u0001\u0010\u0001\u0010\u0001"+
		"\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0003\u0010\u0230"+
		"\b\u0010\u0003\u0010\u0232\b\u0010\u0001\u0011\u0003\u0011\u0235\b\u0011"+
		"\u0001\u0011\u0001\u0011\u0001\u0011\u0001\u0012\u0001\u0012\u0001\u0012"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013"+
		"\u0242\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0001\u0013"+
		"\u0003\u0013\u024f\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013"+
		"\u0254\b\u0013\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014"+
		"\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014\u0001\u0014"+
		"\u0001\u0014\u0001\u0014\u0001\u0014\u0003\u0014\u0264\b\u0014\u0001\u0015"+
		"\u0001\u0015\u0001\u0015\u0001\u0015\u0005\u0015\u026a\b\u0015\n\u0015"+
		"\f\u0015\u026d\t\u0015\u0001\u0015\u0001\u0015\u0001\u0016\u0001\u0016"+
		"\u0001\u0016\u0001\u0016\u0001\u0016\u0003\u0016\u0276\b\u0016\u0001\u0017"+
		"\u0001\u0017\u0005\u0017\u027a\b\u0017\n\u0017\f\u0017\u027d\t\u0017\u0001"+
		"\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001"+
		"\u0018\u0001\u0018\u0001\u0018\u0003\u0018\u0288\b\u0018\u0001\u0018\u0003"+
		"\u0018\u028b\b\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0003\u0018\u0290"+
		"\b\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001"+
		"\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0003"+
		"\u0018\u029d\b\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001"+
		"\u0018\u0003\u0018\u02a4\b\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001"+
		"\u0018\u0001\u0018\u0003\u0018\u02ab\b\u0018\u0003\u0018\u02ad\b\u0018"+
		"\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0003\u0018"+
		"\u02b4\b\u0018\u0001\u0019\u0001\u0019\u0003\u0019\u02b8\b\u0019\u0003"+
		"\u0019\u02ba\b\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u02bf"+
		"\b\u0019\u0001\u0019\u0003\u0019\u02c2\b\u0019\u0001\u0019\u0001\u0019"+
		"\u0005\u0019\u02c6\b\u0019\n\u0019\f\u0019\u02c9\t\u0019\u0001\u0019\u0001"+
		"\u0019\u0003\u0019\u02cd\b\u0019\u0003\u0019\u02cf\b\u0019\u0001\u0019"+
		"\u0001\u0019\u0003\u0019\u02d3\b\u0019\u0001\u0019\u0003\u0019\u02d6\b"+
		"\u0019\u0001\u0019\u0003\u0019\u02d9\b\u0019\u0001\u0019\u0001\u0019\u0005"+
		"\u0019\u02dd\b\u0019\n\u0019\f\u0019\u02e0\t\u0019\u0001\u0019\u0001\u0019"+
		"\u0003\u0019\u02e4\b\u0019\u0003\u0019\u02e6\b\u0019\u0001\u0019\u0001"+
		"\u0019\u0001\u0019\u0003\u0019\u02eb\b\u0019\u0001\u0019\u0001\u0019\u0001"+
		"\u0019\u0001\u0019\u0001\u0019\u0003\u0019\u02f2\b\u0019\u0003\u0019\u02f4"+
		"\b\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0001\u0019\u0003"+
		"\u0019\u02fb\b\u0019\u0001\u001a\u0001\u001a\u0001\u001a\u0003\u001a\u0300"+
		"\b\u001a\u0001\u001a\u0001\u001a\u0003\u001a\u0304\b\u001a\u0001\u001a"+
		"\u0003\u001a\u0307\b\u001a\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b"+
		"\u0001\u001b\u0001\u001b\u0003\u001b\u030f\b\u001b\u0001\u001b\u0001\u001b"+
		"\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0003\u001b\u0317\b\u001b"+
		"\u0003\u001b\u0319\b\u001b\u0001\u001c\u0001\u001c\u0001\u001c\u0001\u001c"+
		"\u0001\u001c\u0001\u001c\u0003\u001c\u0321\b\u001c\u0001\u001d\u0001\u001d"+
		"\u0003\u001d\u0325\b\u001d\u0001\u001d\u0003\u001d\u0328\b\u001d\u0001"+
		"\u001d\u0001\u001d\u0005\u001d\u032c\b\u001d\n\u001d\f\u001d\u032f\t\u001d"+
		"\u0001\u001d\u0001\u001d\u0003\u001d\u0333\b\u001d\u0001\u001d\u0003\u001d"+
		"\u0336\b\u001d\u0001\u001d\u0001\u001d\u0005\u001d\u033a\b\u001d\n\u001d"+
		"\f\u001d\u033d\t\u001d\u0003\u001d\u033f\b\u001d\u0001\u001e\u0001\u001e"+
		"\u0001\u001f\u0001\u001f\u0001\u001f\u0001 \u0001 \u0001 \u0003 \u0349"+
		"\b \u0001 \u0001 \u0001!\u0001!\u0003!\u034f\b!\u0001!\u0001!\u0003!\u0353"+
		"\b!\u0001!\u0001!\u0003!\u0357\b!\u0001!\u0003!\u035a\b!\u0001\"\u0001"+
		"\"\u0001\"\u0001\"\u0001\"\u0005\"\u0361\b\"\n\"\f\"\u0364\t\"\u0001#"+
		"\u0001#\u0003#\u0368\b#\u0001#\u0001#\u0001#\u0001$\u0001$\u0003$\u036f"+
		"\b$\u0001$\u0001$\u0003$\u0373\b$\u0001%\u0001%\u0001%\u0001%\u0001%\u0003"+
		"%\u037a\b%\u0001%\u0003%\u037d\b%\u0001&\u0001&\u0003&\u0381\b&\u0001"+
		"\'\u0001\'\u0001\'\u0001(\u0001(\u0001(\u0001(\u0003(\u038a\b(\u0001)"+
		"\u0001)\u0003)\u038e\b)\u0001)\u0003)\u0391\b)\u0001)\u0003)\u0394\b)"+
		"\u0001)\u0001)\u0001)\u0001)\u0003)\u039a\b)\u0001)\u0003)\u039d\b)\u0001"+
		")\u0001)\u0001)\u0001)\u0003)\u03a3\b)\u0001)\u0001)\u0001)\u0001)\u0001"+
		")\u0005)\u03aa\b)\n)\f)\u03ad\t)\u0003)\u03af\b)\u0001)\u0001)\u0001)"+
		"\u0001)\u0001)\u0001)\u0001)\u0005)\u03b8\b)\n)\f)\u03bb\t)\u0003)\u03bd"+
		"\b)\u0001*\u0001*\u0001*\u0003*\u03c2\b*\u0001*\u0003*\u03c5\b*\u0001"+
		"*\u0001*\u0001*\u0003*\u03ca\b*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001"+
		"*\u0001*\u0001*\u0003*\u03d4\b*\u0001*\u0001*\u0001*\u0003*\u03d9\b*\u0001"+
		"*\u0001*\u0004*\u03dd\b*\u000b*\f*\u03de\u0003*\u03e1\b*\u0001*\u0001"+
		"*\u0004*\u03e5\b*\u000b*\f*\u03e6\u0003*\u03e9\b*\u0001*\u0001*\u0001"+
		"*\u0001*\u0003*\u03ef\b*\u0001*\u0001*\u0001*\u0001*\u0005*\u03f5\b*\n"+
		"*\f*\u03f8\t*\u0001*\u0001*\u0003*\u03fc\b*\u0001*\u0001*\u0001*\u0001"+
		"*\u0005*\u0402\b*\n*\f*\u0405\t*\u0003*\u0407\b*\u0001+\u0001+\u0001+"+
		"\u0003+\u040c\b+\u0001+\u0003+\u040f\b+\u0001+\u0001+\u0001+\u0003+\u0414"+
		"\b+\u0001+\u0001+\u0001+\u0001+\u0001+\u0001+\u0003+\u041c\b+\u0001+\u0001"+
		"+\u0001+\u0001+\u0001+\u0001+\u0003+\u0424\b+\u0001+\u0001+\u0001+\u0001"+
		"+\u0003+\u042a\b+\u0001+\u0001+\u0001+\u0001+\u0005+\u0430\b+\n+\f+\u0433"+
		"\t+\u0001+\u0001+\u0003+\u0437\b+\u0001+\u0001+\u0001+\u0001+\u0005+\u043d"+
		"\b+\n+\f+\u0440\t+\u0003+\u0442\b+\u0001,\u0001,\u0003,\u0446\b,\u0001"+
		",\u0003,\u0449\b,\u0001,\u0001,\u0001,\u0001,\u0001,\u0001,\u0003,\u0451"+
		"\b,\u0001,\u0001,\u0001,\u0001,\u0003,\u0457\b,\u0001,\u0001,\u0001,\u0001"+
		",\u0001,\u0005,\u045e\b,\n,\f,\u0461\t,\u0003,\u0463\b,\u0001-\u0001-"+
		"\u0001-\u0001-\u0004-\u0469\b-\u000b-\f-\u046a\u0001-\u0001-\u0003-\u046f"+
		"\b-\u0001-\u0001-\u0003-\u0473\b-\u0003-\u0475\b-\u0001-\u0003-\u0478"+
		"\b-\u0001-\u0003-\u047b\b-\u0001-\u0001-\u0004-\u047f\b-\u000b-\f-\u0480"+
		"\u0001-\u0001-\u0003-\u0485\b-\u0001-\u0003-\u0488\b-\u0001-\u0003-\u048b"+
		"\b-\u0001-\u0003-\u048e\b-\u0003-\u0490\b-\u0001.\u0001.\u0003.\u0494"+
		"\b.\u0001/\u0001/\u0001/\u0001/\u0003/\u049a\b/\u0001/\u0001/\u0001/\u0001"+
		"/\u0003/\u04a0\b/\u0001/\u0005/\u04a3\b/\n/\f/\u04a6\t/\u0003/\u04a8\b"+
		"/\u00010\u00010\u00010\u00010\u00030\u04ae\b0\u00011\u00011\u00031\u04b2"+
		"\b1\u00012\u00012\u00032\u04b6\b2\u00012\u00032\u04b9\b2\u00012\u0003"+
		"2\u04bc\b2\u00012\u00012\u00012\u00012\u00012\u00012\u00012\u00032\u04c5"+
		"\b2\u00012\u00012\u00032\u04c9\b2\u00012\u00032\u04cc\b2\u00012\u0001"+
		"2\u00032\u04d0\b2\u00013\u00013\u00033\u04d4\b3\u00013\u00033\u04d7\b"+
		"3\u00013\u00033\u04da\b3\u00013\u00013\u00013\u00033\u04df\b3\u00013\u0001"+
		"3\u00013\u00013\u00033\u04e5\b3\u00053\u04e7\b3\n3\f3\u04ea\t3\u00013"+
		"\u00013\u00013\u00013\u00013\u00013\u00013\u00033\u04f3\b3\u00013\u0001"+
		"3\u00013\u00013\u00033\u04f9\b3\u00053\u04fb\b3\n3\f3\u04fe\t3\u00013"+
		"\u00013\u00013\u00033\u0503\b3\u00013\u00013\u00033\u0507\b3\u00014\u0001"+
		"4\u00014\u00014\u00034\u050d\b4\u00014\u00034\u0510\b4\u00015\u00015\u0001"+
		"5\u00015\u00015\u00015\u00015\u00015\u00015\u00015\u00035\u051c\b5\u0001"+
		"5\u00015\u00035\u0520\b5\u00015\u00015\u00035\u0524\b5\u00016\u00016\u0001"+
		"6\u00016\u00016\u00016\u00036\u052c\b6\u00016\u00016\u00036\u0530\b6\u0001"+
		"7\u00017\u00017\u00017\u00018\u00018\u00038\u0538\b8\u00018\u00038\u053b"+
		"\b8\u00018\u00018\u00038\u053f\b8\u00018\u00038\u0542\b8\u00018\u0001"+
		"8\u00018\u00018\u00058\u0548\b8\n8\f8\u054b\t8\u00018\u00018\u00038\u054f"+
		"\b8\u00018\u00038\u0552\b8\u00018\u00038\u0555\b8\u00019\u00019\u0003"+
		"9\u0559\b9\u00019\u00039\u055c\b9\u00019\u00019\u00019\u00019\u00019\u0005"+
		"9\u0563\b9\n9\f9\u0566\t9\u00019\u00019\u00039\u056a\b9\u0001:\u0001:"+
		"\u0001:\u0001:\u0001:\u0005:\u0571\b:\n:\f:\u0574\t:\u0001;\u0001;\u0003"+
		";\u0578\b;\u0001<\u0001<\u0001<\u0005<\u057d\b<\n<\f<\u0580\t<\u0001="+
		"\u0001=\u0005=\u0584\b=\n=\f=\u0587\t=\u0001=\u0001=\u0001=\u0005=\u058c"+
		"\b=\n=\f=\u058f\t=\u0001=\u0001=\u0003=\u0593\b=\u0001>\u0001>\u0001>"+
		"\u0001>\u0001>\u0001>\u0003>\u059b\b>\u0001>\u0003>\u059e\b>\u0001>\u0003"+
		">\u05a1\b>\u0001>\u0001>\u0001>\u0005>\u05a6\b>\n>\f>\u05a9\t>\u0003>"+
		"\u05ab\b>\u0001>\u0001>\u0001>\u0001>\u0001>\u0003>\u05b2\b>\u0001>\u0003"+
		">\u05b5\b>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0003>\u05bd\b>\u0001"+
		"?\u0001?\u0001?\u0001?\u0003?\u05c3\b?\u0001?\u0001?\u0001?\u0001?\u0001"+
		"@\u0001@\u0001@\u0001@\u0001@\u0003@\u05ce\b@\u0001A\u0003A\u05d1\bA\u0001"+
		"A\u0001A\u0001A\u0001A\u0001A\u0001A\u0001A\u0001A\u0001A\u0003A\u05dc"+
		"\bA\u0001A\u0001A\u0001A\u0001A\u0003A\u05e2\bA\u0001A\u0001A\u0003A\u05e6"+
		"\bA\u0001A\u0001A\u0001A\u0001A\u0001A\u0001A\u0001A\u0001A\u0001A\u0003"+
		"A\u05f1\bA\u0001A\u0001A\u0001A\u0003A\u05f6\bA\u0003A\u05f8\bA\u0001"+
		"A\u0001A\u0003A\u05fc\bA\u0001B\u0001B\u0001B\u0001B\u0001B\u0001B\u0001"+
		"B\u0001B\u0003B\u0606\bB\u0001C\u0001C\u0001C\u0001C\u0001C\u0001C\u0001"+
		"C\u0001C\u0003C\u0610\bC\u0001D\u0001D\u0005D\u0614\bD\nD\fD\u0617\tD"+
		"\u0001D\u0001D\u0003D\u061b\bD\u0001D\u0003D\u061e\bD\u0001D\u0003D\u0621"+
		"\bD\u0001D\u0003D\u0624\bD\u0001D\u0003D\u0627\bD\u0001D\u0003D\u062a"+
		"\bD\u0001D\u0003D\u062d\bD\u0001D\u0001D\u0005D\u0631\bD\nD\fD\u0634\t"+
		"D\u0001D\u0001D\u0003D\u0638\bD\u0001D\u0003D\u063b\bD\u0001D\u0003D\u063e"+
		"\bD\u0001D\u0003D\u0641\bD\u0001D\u0003D\u0644\bD\u0001D\u0003D\u0647"+
		"\bD\u0001D\u0003D\u064a\bD\u0003D\u064c\bD\u0001E\u0001E\u0005E\u0650"+
		"\bE\nE\fE\u0653\tE\u0001E\u0001E\u0003E\u0657\bE\u0001E\u0003E\u065a\b"+
		"E\u0001E\u0003E\u065d\bE\u0001E\u0003E\u0660\bE\u0001E\u0003E\u0663\b"+
		"E\u0001E\u0003E\u0666\bE\u0001F\u0001F\u0003F\u066a\bF\u0001F\u0001F\u0001"+
		"G\u0001G\u0003G\u0670\bG\u0001G\u0001G\u0003G\u0674\bG\u0001H\u0001H\u0001"+
		"H\u0001H\u0001H\u0001H\u0001H\u0001H\u0003H\u067e\bH\u0001I\u0001I\u0003"+
		"I\u0682\bI\u0001I\u0001I\u0005I\u0686\bI\nI\fI\u0689\tI\u0001J\u0001J"+
		"\u0001J\u0001J\u0001J\u0001J\u0003J\u0691\bJ\u0001J\u0003J\u0694\bJ\u0001"+
		"J\u0001J\u0003J\u0698\bJ\u0001J\u0003J\u069b\bJ\u0001J\u0001J\u0003J\u069f"+
		"\bJ\u0001J\u0001J\u0003J\u06a3\bJ\u0001J\u0003J\u06a6\bJ\u0003J\u06a8"+
		"\bJ\u0001K\u0001K\u0001K\u0001K\u0005K\u06ae\bK\nK\fK\u06b1\tK\u0001K"+
		"\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0001K\u0003K\u06bc"+
		"\bK\u0001K\u0001K\u0004K\u06c0\bK\u000bK\fK\u06c1\u0003K\u06c4\bK\u0001"+
		"K\u0001K\u0004K\u06c8\bK\u000bK\fK\u06c9\u0003K\u06cc\bK\u0003K\u06ce"+
		"\bK\u0001L\u0001L\u0001L\u0001L\u0003L\u06d4\bL\u0001L\u0001L\u0001L\u0001"+
		"L\u0001L\u0001L\u0003L\u06dc\bL\u0001M\u0001M\u0001M\u0001M\u0001M\u0001"+
		"M\u0003M\u06e4\bM\u0001N\u0001N\u0003N\u06e8\bN\u0001N\u0001N\u0003N\u06ec"+
		"\bN\u0001O\u0001O\u0001O\u0001O\u0001O\u0005O\u06f3\bO\nO\fO\u06f6\tO"+
		"\u0001O\u0001O\u0003O\u06fa\bO\u0001P\u0001P\u0001P\u0001Q\u0001Q\u0001"+
		"Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001Q\u0001"+
		"Q\u0005Q\u070c\bQ\nQ\fQ\u070f\tQ\u0001R\u0001R\u0003R\u0713\bR\u0001S"+
		"\u0001S\u0001S\u0001S\u0003S\u0719\bS\u0001S\u0001S\u0001S\u0001S\u0001"+
		"S\u0003S\u0720\bS\u0001T\u0001T\u0001T\u0003T\u0725\bT\u0001U\u0001U\u0001"+
		"U\u0001U\u0001U\u0001U\u0001U\u0001U\u0003U\u072f\bU\u0001U\u0001U\u0003"+
		"U\u0733\bU\u0001U\u0001U\u0001U\u0001U\u0003U\u0739\bU\u0001U\u0003U\u073c"+
		"\bU\u0001U\u0001U\u0001U\u0003U\u0741\bU\u0001U\u0001U\u0003U\u0745\b"+
		"U\u0001U\u0001U\u0001U\u0001U\u0001U\u0003U\u074c\bU\u0001U\u0003U\u074f"+
		"\bU\u0001U\u0001U\u0001U\u0001U\u0003U\u0755\bU\u0001U\u0001U\u0001U\u0001"+
		"U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001"+
		"U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0003U\u076d"+
		"\bU\u0001U\u0003U\u0770\bU\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001"+
		"U\u0001U\u0001U\u0001U\u0003U\u077c\bU\u0001U\u0003U\u077f\bU\u0001U\u0001"+
		"U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0003U\u0789\bU\u0001U\u0001"+
		"U\u0001U\u0001U\u0001U\u0001U\u0003U\u0791\bU\u0001U\u0001U\u0003U\u0795"+
		"\bU\u0001U\u0001U\u0001U\u0001U\u0001U\u0003U\u079c\bU\u0001U\u0003U\u079f"+
		"\bU\u0001U\u0001U\u0001U\u0001U\u0001U\u0005U\u07a6\bU\nU\fU\u07a9\tU"+
		"\u0001U\u0001U\u0001U\u0003U\u07ae\bU\u0001U\u0001U\u0001U\u0001U\u0003"+
		"U\u07b4\bU\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0001U\u0003"+
		"U\u07be\bU\u0003U\u07c0\bU\u0001V\u0001V\u0001V\u0001V\u0003V\u07c6\b"+
		"V\u0001V\u0003V\u07c9\bV\u0001V\u0003V\u07cc\bV\u0001W\u0001W\u0001W\u0001"+
		"W\u0001W\u0001W\u0001W\u0001W\u0001W\u0001W\u0003W\u07d8\bW\u0001W\u0003"+
		"W\u07db\bW\u0001X\u0001X\u0001X\u0001X\u0003X\u07e1\bX\u0001Y\u0003Y\u07e4"+
		"\bY\u0001Y\u0001Y\u0001Y\u0001Y\u0001Y\u0001Y\u0003Y\u07ec\bY\u0001Y\u0001"+
		"Y\u0001Y\u0001Y\u0001Y\u0001Y\u0003Y\u07f4\bY\u0001Z\u0001Z\u0001Z\u0001"+
		"Z\u0003Z\u07fa\bZ\u0001Z\u0001Z\u0003Z\u07fe\bZ\u0001[\u0001[\u0001[\u0001"+
		"[\u0001[\u0001[\u0001[\u0001[\u0001[\u0001[\u0001[\u0001[\u0003[\u080c"+
		"\b[\u0001\\\u0001\\\u0001\\\u0001\\\u0003\\\u0812\b\\\u0001]\u0001]\u0001"+
		"]\u0001]\u0003]\u0818\b]\u0001]\u0001]\u0001^\u0001^\u0001^\u0001_\u0001"+
		"_\u0001_\u0001`\u0001`\u0001`\u0003`\u0825\b`\u0001`\u0001`\u0001`\u0003"+
		"`\u082a\b`\u0001`\u0001`\u0001`\u0001`\u0005`\u0830\b`\n`\f`\u0833\t`"+
		"\u0003`\u0835\b`\u0001a\u0001a\u0001a\u0003a\u083a\ba\u0001a\u0001a\u0001"+
		"a\u0003a\u083f\ba\u0001a\u0001a\u0001a\u0001a\u0005a\u0845\ba\na\fa\u0848"+
		"\ta\u0003a\u084a\ba\u0001b\u0001b\u0001b\u0001b\u0001b\u0001b\u0003b\u0852"+
		"\bb\u0001c\u0001c\u0003c\u0856\bc\u0001c\u0001c\u0001c\u0001c\u0001c\u0001"+
		"c\u0001c\u0001c\u0001c\u0005c\u0861\bc\nc\fc\u0864\tc\u0001c\u0001c\u0001"+
		"c\u0003c\u0869\bc\u0001c\u0001c\u0001c\u0001c\u0001c\u0001c\u0001c\u0001"+
		"c\u0005c\u0873\bc\nc\fc\u0876\tc\u0003c\u0878\bc\u0001d\u0001d\u0001e"+
		"\u0001e\u0001e\u0001e\u0001e\u0003e\u0881\be\u0001e\u0001e\u0001e\u0003"+
		"e\u0886\be\u0001f\u0001f\u0001f\u0001f\u0003f\u088c\bf\u0001g\u0001g\u0001"+
		"h\u0001h\u0003h\u0892\bh\u0001i\u0001i\u0001i\u0003i\u0897\bi\u0003i\u0899"+
		"\bi\u0001i\u0001i\u0001i\u0003i\u089e\bi\u0003i\u08a0\bi\u0001j\u0001"+
		"j\u0003j\u08a4\bj\u0001j\u0001j\u0001j\u0001j\u0003j\u08aa\bj\u0001j\u0003"+
		"j\u08ad\bj\u0001j\u0003j\u08b0\bj\u0001k\u0001k\u0001k\u0001k\u0001k\u0001"+
		"k\u0003k\u08b8\bk\u0001l\u0001l\u0001m\u0001m\u0001m\u0001m\u0003m\u08c0"+
		"\bm\u0001n\u0001n\u0003n\u08c4\bn\u0001o\u0001o\u0001p\u0001p\u0001p\u0001"+
		"p\u0001p\u0001p\u0001p\u0001p\u0001p\u0001p\u0001p\u0001p\u0001p\u0001"+
		"p\u0004p\u08d6\bp\u000bp\fp\u08d7\u0001q\u0001q\u0001q\u0001q\u0001q\u0003"+
		"q\u08df\bq\u0003q\u08e1\bq\u0001r\u0001r\u0001r\u0004r\u08e6\br\u000b"+
		"r\fr\u08e7\u0003r\u08ea\br\u0001s\u0001s\u0003s\u08ee\bs\u0001t\u0001"+
		"t\u0001t\u0003t\u08f3\bt\u0001u\u0001u\u0001u\u0001u\u0001u\u0001u\u0001"+
		"u\u0001u\u0001u\u0003u\u08fe\bu\u0001v\u0001v\u0001v\u0003v\u0903\bv\u0001"+
		"w\u0001w\u0001x\u0001x\u0003x\u0909\bx\u0001y\u0003y\u090c\by\u0001y\u0001"+
		"y\u0003y\u0910\by\u0001y\u0004y\u0913\by\u000by\fy\u0914\u0001y\u0003"+
		"y\u0918\by\u0001y\u0001y\u0003y\u091c\by\u0001y\u0001y\u0003y\u0920\b"+
		"y\u0003y\u0922\by\u0001z\u0001z\u0001{\u0003{\u0927\b{\u0001{\u0001{\u0001"+
		"|\u0003|\u092c\b|\u0001|\u0001|\u0001}\u0001}\u0001}\u0001}\u0001}\u0001"+
		"}\u0001}\u0001}\u0001}\u0003}\u0939\b}\u0001}\u0003}\u093c\b}\u0001~\u0001"+
		"~\u0003~\u0940\b~\u0001~\u0003~\u0943\b~\u0001~\u0003~\u0946\b~\u0001"+
		"~\u0001~\u0001~\u0003~\u094b\b~\u0001~\u0001~\u0001~\u0003~\u0950\b~\u0001"+
		"~\u0003~\u0953\b~\u0001~\u0001~\u0001~\u0003~\u0958\b~\u0001~\u0003~\u095b"+
		"\b~\u0001~\u0001~\u0001~\u0001~\u0003~\u0961\b~\u0001~\u0003~\u0964\b"+
		"~\u0001~\u0001~\u0003~\u0968\b~\u0001~\u0005~\u096b\b~\n~\f~\u096e\t~"+
		"\u0001~\u0001~\u0003~\u0972\b~\u0001~\u0005~\u0975\b~\n~\f~\u0978\t~\u0001"+
		"~\u0001~\u0003~\u097c\b~\u0001~\u0003~\u097f\b~\u0001~\u0005~\u0982\b"+
		"~\n~\f~\u0985\t~\u0001~\u0001~\u0003~\u0989\b~\u0001~\u0005~\u098c\b~"+
		"\n~\f~\u098f\t~\u0001~\u0001~\u0001~\u0003~\u0994\b~\u0001~\u0001~\u0001"+
		"~\u0003~\u0999\b~\u0001~\u0001~\u0001~\u0003~\u099e\b~\u0001~\u0003~\u09a1"+
		"\b~\u0001~\u0001~\u0003~\u09a5\b~\u0001~\u0001~\u0003~\u09a9\b~\u0001"+
		"\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0005\u007f\u09af\b\u007f\n"+
		"\u007f\f\u007f\u09b2\t\u007f\u0001\u007f\u0001\u007f\u0001\u0080\u0001"+
		"\u0080\u0003\u0080\u09b8\b\u0080\u0001\u0080\u0001\u0080\u0003\u0080\u09bc"+
		"\b\u0080\u0001\u0080\u0001\u0080\u0001\u0080\u0003\u0080\u09c1\b\u0080"+
		"\u0001\u0080\u0001\u0080\u0003\u0080\u09c5\b\u0080\u0003\u0080\u09c7\b"+
		"\u0080\u0001\u0080\u0003\u0080\u09ca\b\u0080\u0001\u0081\u0001\u0081\u0001"+
		"\u0081\u0001\u0081\u0001\u0082\u0001\u0082\u0001\u0082\u0001\u0082\u0001"+
		"\u0082\u0001\u0082\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0003"+
		"\u0083\u09da\b\u0083\u0001\u0083\u0001\u0083\u0001\u0084\u0001\u0084\u0001"+
		"\u0084\u0005\u0084\u09e1\b\u0084\n\u0084\f\u0084\u09e4\t\u0084\u0001\u0085"+
		"\u0001\u0085\u0001\u0085\u0005\u0085\u09e9\b\u0085\n\u0085\f\u0085\u09ec"+
		"\t\u0085\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0086\u0005\u0086\u09f2"+
		"\b\u0086\n\u0086\f\u0086\u09f5\t\u0086\u0001\u0086\u0001\u0086\u0001\u0087"+
		"\u0001\u0087\u0001\u0087\u0005\u0087\u09fc\b\u0087\n\u0087\f\u0087\u09ff"+
		"\t\u0087\u0001\u0088\u0001\u0088\u0001\u0088\u0005\u0088\u0a04\b\u0088"+
		"\n\u0088\f\u0088\u0a07\t\u0088\u0001\u0089\u0001\u0089\u0001\u0089\u0005"+
		"\u0089\u0a0c\b\u0089\n\u0089\f\u0089\u0a0f\t\u0089\u0001\u008a\u0001\u008a"+
		"\u0001\u008a\u0005\u008a\u0a14\b\u008a\n\u008a\f\u008a\u0a17\t\u008a\u0001"+
		"\u008b\u0001\u008b\u0001\u008b\u0005\u008b\u0a1c\b\u008b\n\u008b\f\u008b"+
		"\u0a1f\t\u008b\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c"+
		"\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0003\u008c\u0a2a\b\u008c"+
		"\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0003\u008c"+
		"\u0a31\b\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c"+
		"\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c"+
		"\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c\u0001\u008c"+
		"\u0003\u008c\u0a44\b\u008c\u0001\u008d\u0001\u008d\u0001\u008d\u0003\u008d"+
		"\u0a49\b\u008d\u0001\u008d\u0003\u008d\u0a4c\b\u008d\u0001\u008d\u0001"+
		"\u008d\u0001\u008d\u0003\u008d\u0a51\b\u008d\u0001\u008d\u0003\u008d\u0a54"+
		"\b\u008d\u0001\u008e\u0001\u008e\u0003\u008e\u0a58\b\u008e\u0001\u008f"+
		"\u0001\u008f\u0001\u008f\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0090"+
		"\u0001\u0091\u0001\u0091\u0001\u0091\u0003\u0091\u0a64\b\u0091\u0001\u0092"+
		"\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0003\u0092"+
		"\u0a6c\b\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092"+
		"\u0003\u0092\u0a73\b\u0092\u0001\u0092\u0001\u0092\u0003\u0092\u0a77\b"+
		"\u0092\u0001\u0093\u0001\u0093\u0001\u0093\u0003\u0093\u0a7c\b\u0093\u0001"+
		"\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001"+
		"\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001"+
		"\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001"+
		"\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001"+
		"\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0004\u0093\u0a9b"+
		"\b\u0093\u000b\u0093\f\u0093\u0a9c\u0001\u0093\u0001\u0093\u0003\u0093"+
		"\u0aa1\b\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0004\u0093"+
		"\u0aa7\b\u0093\u000b\u0093\f\u0093\u0aa8\u0001\u0093\u0001\u0093\u0003"+
		"\u0093\u0aad\b\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001"+
		"\u0093\u0001\u0093\u0001\u0093\u0003\u0093\u0ab6\b\u0093\u0001\u0093\u0001"+
		"\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0003\u0093\u0abe"+
		"\b\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0003\u0093\u0ac3\b\u0093"+
		"\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093"+
		"\u0003\u0093\u0acb\b\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0003\u0093"+
		"\u0ad0\b\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0003\u0093\u0ad5\b"+
		"\u0093\u0003\u0093\u0ad7\b\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001"+
		"\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0003\u0093\u0ae0\b\u0093\u0001"+
		"\u0093\u0001\u0093\u0001\u0093\u0003\u0093\u0ae5\b\u0093\u0001\u0093\u0001"+
		"\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0003\u0093\u0aed"+
		"\b\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0003\u0093\u0af2\b\u0093"+
		"\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093"+
		"\u0003\u0093\u0afa\b\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093"+
		"\u0001\u0093\u0001\u0093\u0003\u0093\u0b02\b\u0093\u0001\u0093\u0003\u0093"+
		"\u0b05\b\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093"+
		"\u0001\u0093\u0001\u0093\u0001\u0093\u0003\u0093\u0b0f\b\u0093\u0001\u0093"+
		"\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093"+
		"\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093"+
		"\u0001\u0093\u0001\u0093\u0001\u0093\u0003\u0093\u0b21\b\u0093\u0001\u0093"+
		"\u0001\u0093\u0001\u0093\u0001\u0093\u0003\u0093\u0b27\b\u0093\u0001\u0093"+
		"\u0001\u0093\u0003\u0093\u0b2b\b\u0093\u0001\u0093\u0001\u0093\u0001\u0093"+
		"\u0001\u0093\u0003\u0093\u0b31\b\u0093\u0001\u0093\u0001\u0093\u0003\u0093"+
		"\u0b35\b\u0093\u0001\u0093\u0001\u0093\u0003\u0093\u0b39\b\u0093\u0001"+
		"\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0095\u0001"+
		"\u0095\u0001\u0095\u0001\u0095\u0005\u0095\u0b44\b\u0095\n\u0095\f\u0095"+
		"\u0b47\t\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095"+
		"\u0003\u0095\u0b4e\b\u0095\u0001\u0096\u0001\u0096\u0003\u0096\u0b52\b"+
		"\u0096\u0001\u0097\u0001\u0097\u0001\u0097\u0003\u0097\u0b57\b\u0097\u0001"+
		"\u0097\u0001\u0097\u0001\u0097\u0003\u0097\u0b5c\b\u0097\u0001\u0097\u0001"+
		"\u0097\u0001\u0097\u0001\u0097\u0003\u0097\u0b62\b\u0097\u0001\u0097\u0001"+
		"\u0097\u0001\u0097\u0003\u0097\u0b67\b\u0097\u0001\u0097\u0001\u0097\u0003"+
		"\u0097\u0b6b\b\u0097\u0001\u0097\u0001\u0097\u0001\u0097\u0003\u0097\u0b70"+
		"\b\u0097\u0001\u0097\u0001\u0097\u0001\u0097\u0003\u0097\u0b75\b\u0097"+
		"\u0001\u0097\u0001\u0097\u0001\u0097\u0003\u0097\u0b7a\b\u0097\u0001\u0097"+
		"\u0001\u0097\u0001\u0097\u0001\u0097\u0001\u0097\u0001\u0097\u0005\u0097"+
		"\u0b82\b\u0097\n\u0097\f\u0097\u0b85\t\u0097\u0003\u0097\u0b87\b\u0097"+
		"\u0001\u0097\u0001\u0097\u0003\u0097\u0b8b\b\u0097\u0001\u0097\u0001\u0097"+
		"\u0003\u0097\u0b8f\b\u0097\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098"+
		"\u0001\u0098\u0003\u0098\u0b96\b\u0098\u0001\u0098\u0001\u0098\u0003\u0098"+
		"\u0b9a\b\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098"+
		"\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098"+
		"\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098"+
		"\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098"+
		"\u0001\u0098\u0001\u0098\u0001\u0098\u0001\u0098\u0003\u0098\u0bb7\b\u0098"+
		"\u0001\u0099\u0001\u0099\u0001\u0099\u0003\u0099\u0bbc\b\u0099\u0001\u0099"+
		"\u0001\u0099\u0003\u0099\u0bc0\b\u0099\u0001\u009a\u0003\u009a\u0bc3\b"+
		"\u009a\u0001\u009a\u0003\u009a\u0bc6\b\u009a\u0001\u009a\u0003\u009a\u0bc9"+
		"\b\u009a\u0001\u009a\u0003\u009a\u0bcc\b\u009a\u0001\u009b\u0001\u009b"+
		"\u0001\u009c\u0001\u009c\u0001\u009c\u0001\u009d\u0001\u009d\u0001\u009e"+
		"\u0001\u009e\u0003\u009e\u0bd7\b\u009e\u0001\u009f\u0001\u009f\u0001\u009f"+
		"\u0001\u009f\u0001\u009f\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0001\u00a0"+
		"\u0001\u00a0\u0001\u00a0\u0001\u00a0\u0003\u00a0\u0be5\b\u00a0\u0001\u00a1"+
		"\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0005\u00a1\u0bec\b\u00a1"+
		"\n\u00a1\f\u00a1\u0bef\t\u00a1\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001"+
		"\u00a2\u0001\u00a2\u0003\u00a2\u0c08\b\u00a2\u0001\u00a3\u0001\u00a3\u0001"+
		"\u00a3\u0001\u00a3\u0003\u00a3\u0c0e\b\u00a3\u0001\u00a3\u0001\u00a3\u0001"+
		"\u00a3\u0001\u00a3\u0001\u00a3\u0003\u00a3\u0c15\b\u00a3\u0005\u00a3\u0c17"+
		"\b\u00a3\n\u00a3\f\u00a3\u0c1a\t\u00a3\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0003\u00a4\u0c20\b\u00a4\u0001\u00a5\u0001\u00a5\u0001\u00a5"+
		"\u0001\u00a5\u0001\u00a5\u0001\u00a5\u0003\u00a5\u0c28\b\u00a5\u0001\u00a5"+
		"\u0001\u00a5\u0001\u00a5\u0003\u00a5\u0c2d\b\u00a5\u0001\u00a5\u0001\u00a5"+
		"\u0001\u00a5\u0001\u00a5\u0005\u00a5\u0c33\b\u00a5\n\u00a5\f\u00a5\u0c36"+
		"\t\u00a5\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0003\u00a6\u0c3b\b\u00a6"+
		"\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6"+
		"\u0001\u00a6\u0001\u00a6\u0003\u00a6\u0c45\b\u00a6\u0001\u00a6\u0001\u00a6"+
		"\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6"+
		"\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0003\u00a6\u0c52\b\u00a6\u0001\u00a6"+
		"\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0003\u00a6\u0c58\b\u00a6\u0001\u00a6"+
		"\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0003\u00a6\u0c5e\b\u00a6\u0001\u00a6"+
		"\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6"+
		"\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6"+
		"\u0001\u00a6\u0003\u00a6\u0c6e\b\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6"+
		"\u0001\u00a6\u0003\u00a6\u0c74\b\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6"+
		"\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0001\u00a6\u0005\u00a6\u0c7d\b\u00a6"+
		"\n\u00a6\f\u00a6\u0c80\t\u00a6\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001"+
		"\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001"+
		"\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0005\u00a7\u0c90"+
		"\b\u00a7\n\u00a7\f\u00a7\u0c93\t\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7"+
		"\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0004\u00a7\u0c9c\b\u00a7"+
		"\u000b\u00a7\f\u00a7\u0c9d\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7"+
		"\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7"+
		"\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0003\u00a7"+
		"\u0caf\b\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7"+
		"\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7"+
		"\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0005\u00a7\u0cc0\b\u00a7"+
		"\n\u00a7\f\u00a7\u0cc3\t\u00a7\u0001\u00a8\u0001\u00a8\u0001\u00a9\u0001"+
		"\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001"+
		"\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0001"+
		"\u00a9\u0003\u00a9\u0cd5\b\u00a9\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0003\u00aa\u0cde\b\u00aa\u0001"+
		"\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001"+
		"\u00ab\u0003\u00ab\u0ce7\b\u00ab\u0001\u00ac\u0001\u00ac\u0001\u00ad\u0001"+
		"\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0003\u00ad\u0cf0\b\u00ad\u0001"+
		"\u00ae\u0001\u00ae\u0001\u00af\u0001\u00af\u0001\u00b0\u0001\u00b0\u0001"+
		"\u00b1\u0001\u00b1\u0001\u00b2\u0001\u00b2\u0001\u00b3\u0001\u00b3\u0001"+
		"\u00b4\u0001\u00b4\u0001\u00b4\u0001\u047a\u0003\u014a\u014c\u014e\u00b5"+
		"\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a"+
		"\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082"+
		"\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a"+
		"\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2"+
		"\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca"+
		"\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2"+
		"\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa"+
		"\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112"+
		"\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a"+
		"\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140\u0142"+
		"\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158\u015a"+
		"\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u0000a\u0002\u0000%%\u0092"+
		"\u0092\u0002\u0000\u0012\u0012\u045a\u045a\u0002\u0000\u00ba\u00ba\u045a"+
		"\u045a\u0003\u0000\u0155\u0155\u01af\u01af\u024a\u024a\u0002\u0000\u01be"+
		"\u01be\u0290\u0290\u0002\u0000\u01fc\u01fc\u029a\u029a\u0003\u0000MMQ"+
		"Qyy\u0002\u0000\u017f\u017f\u01bf\u01bf\u0003\u0000((\u0189\u0189\u01a3"+
		"\u01a3\u0003\u0000((\u0185\u0185\u0304\u0304\u0002\u0000\u026c\u026c\u028f"+
		"\u028f\u0002\u0000NNXX\u0003\u0000\u01a8\u01a8\u0215\u0215\u0254\u0254"+
		"\u0002\u0000BB\u009a\u009a\u0002\u0000\u01f5\u01f5\u0205\u0205\u0002\u0000"+
		"\u0014\u0014\u008c\u008c\u0003\u0000))HHff\u0002\u0000ff\u016d\u016d\u0002"+
		"\u0000KK\u0089\u0089\u0002\u0000\u0164\u0164\u019f\u019f\u0002\u0000a"+
		"a\u0248\u0248\u0002\u0000))ff\u0002\u0000\u0006\u0006//\u0002\u0000\u00b6"+
		"\u00b6\u028c\u028c\u0004\u0000\u01a2\u01a2\u01c8\u01c8\u01fb\u01fb\u0222"+
		"\u0222\u0002\u0000\u01a2\u01a2\u01fb\u01fb\u0002\u0000\r\r++\u0003\u0000"+
		"??KK\u00b4\u00b4\u0002\u0000!!PP\u0002\u0000]]\u0090\u0090\u0002\u0000"+
		"\u0006\u0006/0\u0001\u0000\u0261\u0262\u0002\u0000\u00dc\u00dc\u01d0\u01d0"+
		"\u0002\u0000\u0150\u0150\u0231\u0231\u0002\u0000AAMM\u0006\u0000\u007f"+
		"\u007f\u00a6\u00a6\u00ab\u00ab\u0194\u0194\u01a9\u01a9\u028e\u028e\u0002"+
		"\u0000\u01f4\u01f4\u0269\u0269\u0002\u0000\u0191\u0191\u0292\u0292\u0002"+
		"\u0000\u007f\u007f\u01a9\u01a9\u0003\u0000NNYY\u01b7\u01b7\u0003\u0000"+
		"\u01ab\u01ab\u01cd\u01cd\u0250\u0250\u0002\u0000\u01ab\u01ab\u0250\u0250"+
		"\u0002\u0000\u0269\u0269\u028d\u028d\u0002\u0000+,;;\u0003\u0000\u019b"+
		"\u019b\u0217\u0217\u0361\u0361\u0002\u0000\u01c5\u01c5\u027b\u027b\n\u0000"+
		"\u015e\u015e\u0166\u0166\u0171\u0173\u017a\u017a\u01ee\u01ee\u01f6\u01f6"+
		"\u026e\u026e\u0275\u0275\u0330\u0330\u03d8\u03d8\u0002\u0000\"\"\u00a3"+
		"\u00a3\u0002\u0000qq\u03cf\u03cf\u000b\u0000\u015e\u015e\u0166\u0166\u0171"+
		"\u0173\u017a\u017a\u01ee\u01ee\u01f6\u01f6\u0240\u0240\u026e\u026e\u0275"+
		"\u0275\u0330\u0330\u03d8\u03d8\u0001\u0000\u047f\u0480\u0004\u0000\u016e"+
		"\u016e\u02ff\u030a\u0472\u0472\u047a\u047b\u0003\u0000\u0468\u046a\u0473"+
		"\u0473\u0475\u0475\u0002\u0000<<\u00ac\u00ac\u0002\u0000pp\u0476\u0476"+
		"\u0005\u0000\u0018\u0018\u00d8\u00da\u00e1\u00e1\u00e3\u00e6\u01f9\u01f9"+
		"\u0002\u0000\u0018\u0018\u00d9\u00d9\u0002\u0000\u0018\u0018\u00d8\u00d8"+
		"\u0001\u0000\u00be\u00c9\u0003\u0000\u00b1\u00b1\u00bd\u00bd\u0253\u0253"+
		"\u0002\u0000\u00cd\u00d2\u01a3\u01a3\u0006\u0000\u00d3\u00d3\u00de\u00de"+
		"\u00e0\u00e0\u00e2\u00e2\u00e9\u00e9\u0153\u0154\u0004\u0000\u00d4\u00d7"+
		"\u00dc\u00dd\u00df\u00df\u0151\u0151\u0002\u0000\u0095\u0095\u00e7\u00e7"+
		"\u0002\u0000\u01c5\u01c5\u030f\u0317\u0002\u0000\u00dc\u00dc\u01f9\u01f9"+
		"\u0005\u0000\u00c2\u00c2\u00c8\u00c8\u00d3\u00d4\u00d6\u00d6\u01c5\u01c5"+
		"\u0002\u0000\u00b1\u00b1\u0253\u0253\u0001\u0000\u043f\u0440\u0002\u0000"+
		"\u01fb\u01fb\u0442\u0442\u0002\u0000\u0132\u0135\u0139\u0139\u0002\u0000"+
		"##\u0130\u0133\u0001\u0000\u013c\u013d\u0003\u0000\u0010\u0010[[\u00aa"+
		"\u00aa\u0002\u0000\u00d8\u00d8\u00dc\u00dc\u0002\u0000\u00d3\u00d4\u00d6"+
		"\u00d6\u0003\u0000\r\r++\u03cd\u03cd\u0003\u0000\u0115\u0115\u0121\u0122"+
		"\u012c\u012c\u0003\u0000\u0116\u0118\u0128\u012b\u012d\u012f\u0002\u0000"+
		"\u011e\u011e\u0120\u0120\u0002\u0000\u011c\u011c\u011f\u011f\u0002\u0000"+
		"\u011a\u011b\u0125\u0127\u0002\u0000\u0081\u0081\u0248\u0248\u0002\u0000"+
		"\u01a5\u01a5\u021f\u021f\u0002\u0000nn\u045d\u045d\u0003\u0000<<\u00ac"+
		"\u00ac\u0285\u0285\u0002\u0000\u0085\u0085\u0091\u0091\u0003\u0000\u0006"+
		"\u0006\u0148\u0148\u0259\u0259\u0003\u0000nn\u0456\u0457\u045d\u045e\u0001"+
		"\u0000\u0453\u0459\u0002\u0000\u00dc\u00dc\u02d6\u02fe\u0001\u0000\u030b"+
		"\u030e\u0001\u0000\u02a8\u02b0\u0001\u0000\u02a0\u02a7\u0003\u0000\u00d3"+
		"\u00d7\u00e4\u00e4\u00e7\u00e7)\u0000\u0011\u0011\"\"((..88FFLLddjkqq"+
		"uuxx~~\u0099\u0099\u00a3\u00a3\u00e9\u00e9\u0115\u0119\u011d\u011d\u0121"+
		"\u0122\u0128\u012f\u0143\u01a4\u01a6\u01bd\u01bf\u021e\u0220\u0240\u0242"+
		"\u026b\u026d\u027f\u0281\u028f\u0291\u0292\u0294\u0299\u029b\u029f\u02b2"+
		"\u02ba\u02bf\u02c1\u02c3\u02cd\u02cf\u02d5\u0304\u0304\u0330\u0330\u0357"+
		"\u0357\u03d3\u03d3\u03d8\u03d8\u043e\u0449\u0482\u0483\u0017\u0000%%]"+
		"]\u0090\u0090\u0092\u0092\u00d3\u00d5\u00d7\u00d7\u00f5\u0114\u0119\u011c"+
		"\u011e\u0120\u0123\u0127\u013b\u013b\u01be\u01be\u0290\u0290\u02a0\u02a7"+
		"\u02cf\u02cf\u030f\u030f\u0312\u032f\u0331\u0356\u0358\u03d2\u03d4\u03d7"+
		"\u03d9\u043d\u043f\u0441\u0459\u0459\u0f3f\u0000\u0175\u0001\u0000\u0000"+
		"\u0000\u0002\u0185\u0001\u0000\u0000\u0000\u0004\u0187\u0001\u0000\u0000"+
		"\u0000\u0006\u018e\u0001\u0000\u0000\u0000\b\u019a\u0001\u0000\u0000\u0000"+
		"\n\u019c\u0001\u0000\u0000\u0000\f\u01a3\u0001\u0000\u0000\u0000\u000e"+
		"\u01a9\u0001\u0000\u0000\u0000\u0010\u01bf\u0001\u0000\u0000\u0000\u0012"+
		"\u01c1\u0001\u0000\u0000\u0000\u0014\u01ea\u0001\u0000\u0000\u0000\u0016"+
		"\u01f0\u0001\u0000\u0000\u0000\u0018\u01f2\u0001\u0000\u0000\u0000\u001a"+
		"\u0207\u0001\u0000\u0000\u0000\u001c\u020e\u0001\u0000\u0000\u0000\u001e"+
		"\u0210\u0001\u0000\u0000\u0000 \u0231\u0001\u0000\u0000\u0000\"\u0234"+
		"\u0001\u0000\u0000\u0000$\u0239\u0001\u0000\u0000\u0000&\u0253\u0001\u0000"+
		"\u0000\u0000(\u0263\u0001\u0000\u0000\u0000*\u0265\u0001\u0000\u0000\u0000"+
		",\u0275\u0001\u0000\u0000\u0000.\u0277\u0001\u0000\u0000\u00000\u02b3"+
		"\u0001\u0000\u0000\u00002\u02fa\u0001\u0000\u0000\u00004\u02fc\u0001\u0000"+
		"\u0000\u00006\u0318\u0001\u0000\u0000\u00008\u0320\u0001\u0000\u0000\u0000"+
		":\u033e\u0001\u0000\u0000\u0000<\u0340\u0001\u0000\u0000\u0000>\u0342"+
		"\u0001\u0000\u0000\u0000@\u0345\u0001\u0000\u0000\u0000B\u034c\u0001\u0000"+
		"\u0000\u0000D\u035b\u0001\u0000\u0000\u0000F\u0365\u0001\u0000\u0000\u0000"+
		"H\u036c\u0001\u0000\u0000\u0000J\u0374\u0001\u0000\u0000\u0000L\u0380"+
		"\u0001\u0000\u0000\u0000N\u0382\u0001\u0000\u0000\u0000P\u0389\u0001\u0000"+
		"\u0000\u0000R\u038b\u0001\u0000\u0000\u0000T\u03be\u0001\u0000\u0000\u0000"+
		"V\u0408\u0001\u0000\u0000\u0000X\u0443\u0001\u0000\u0000\u0000Z\u048f"+
		"\u0001\u0000\u0000\u0000\\\u0493\u0001\u0000\u0000\u0000^\u04a7\u0001"+
		"\u0000\u0000\u0000`\u04a9\u0001\u0000\u0000\u0000b\u04b1\u0001\u0000\u0000"+
		"\u0000d\u04b3\u0001\u0000\u0000\u0000f\u04d1\u0001\u0000\u0000\u0000h"+
		"\u0508\u0001\u0000\u0000\u0000j\u0511\u0001\u0000\u0000\u0000l\u0525\u0001"+
		"\u0000\u0000\u0000n\u0531\u0001\u0000\u0000\u0000p\u0535\u0001\u0000\u0000"+
		"\u0000r\u0556\u0001\u0000\u0000\u0000t\u056b\u0001\u0000\u0000\u0000v"+
		"\u0575\u0001\u0000\u0000\u0000x\u0579\u0001\u0000\u0000\u0000z\u0592\u0001"+
		"\u0000\u0000\u0000|\u05bc\u0001\u0000\u0000\u0000~\u05be\u0001\u0000\u0000"+
		"\u0000\u0080\u05cd\u0001\u0000\u0000\u0000\u0082\u05fb\u0001\u0000\u0000"+
		"\u0000\u0084\u0605\u0001\u0000\u0000\u0000\u0086\u060f\u0001\u0000\u0000"+
		"\u0000\u0088\u064b\u0001\u0000\u0000\u0000\u008a\u064d\u0001\u0000\u0000"+
		"\u0000\u008c\u0667\u0001\u0000\u0000\u0000\u008e\u066d\u0001\u0000\u0000"+
		"\u0000\u0090\u067d\u0001\u0000\u0000\u0000\u0092\u0681\u0001\u0000\u0000"+
		"\u0000\u0094\u06a7\u0001\u0000\u0000\u0000\u0096\u06cd\u0001\u0000\u0000"+
		"\u0000\u0098\u06db\u0001\u0000\u0000\u0000\u009a\u06e3\u0001\u0000\u0000"+
		"\u0000\u009c\u06e7\u0001\u0000\u0000\u0000\u009e\u06ed\u0001\u0000\u0000"+
		"\u0000\u00a0\u06fb\u0001\u0000\u0000\u0000\u00a2\u06fe\u0001\u0000\u0000"+
		"\u0000\u00a4\u0710\u0001\u0000\u0000\u0000\u00a6\u0714\u0001\u0000\u0000"+
		"\u0000\u00a8\u0724\u0001\u0000\u0000\u0000\u00aa\u07bf\u0001\u0000\u0000"+
		"\u0000\u00ac\u07cb\u0001\u0000\u0000\u0000\u00ae\u07da\u0001\u0000\u0000"+
		"\u0000\u00b0\u07e0\u0001\u0000\u0000\u0000\u00b2\u07f3\u0001\u0000\u0000"+
		"\u0000\u00b4\u07fd\u0001\u0000\u0000\u0000\u00b6\u080b\u0001\u0000\u0000"+
		"\u0000\u00b8\u080d\u0001\u0000\u0000\u0000\u00ba\u0813\u0001\u0000\u0000"+
		"\u0000\u00bc\u081b\u0001\u0000\u0000\u0000\u00be\u081e\u0001\u0000\u0000"+
		"\u0000\u00c0\u0821\u0001\u0000\u0000\u0000\u00c2\u0836\u0001\u0000\u0000"+
		"\u0000\u00c4\u084b\u0001\u0000\u0000\u0000\u00c6\u0853\u0001\u0000\u0000"+
		"\u0000\u00c8\u0879\u0001\u0000\u0000\u0000\u00ca\u0885\u0001\u0000\u0000"+
		"\u0000\u00cc\u0887\u0001\u0000\u0000\u0000\u00ce\u088d\u0001\u0000\u0000"+
		"\u0000\u00d0\u0891\u0001\u0000\u0000\u0000\u00d2\u089f\u0001\u0000\u0000"+
		"\u0000\u00d4\u08ac\u0001\u0000\u0000\u0000\u00d6\u08b7\u0001\u0000\u0000"+
		"\u0000\u00d8\u08b9\u0001\u0000\u0000\u0000\u00da\u08bf\u0001\u0000\u0000"+
		"\u0000\u00dc\u08c3\u0001\u0000\u0000\u0000\u00de\u08c5\u0001\u0000\u0000"+
		"\u0000\u00e0\u08c7\u0001\u0000\u0000\u0000\u00e2\u08d9\u0001\u0000\u0000"+
		"\u0000\u00e4\u08e9\u0001\u0000\u0000\u0000\u00e6\u08ed\u0001\u0000\u0000"+
		"\u0000\u00e8\u08f2\u0001\u0000\u0000\u0000\u00ea\u08fd\u0001\u0000\u0000"+
		"\u0000\u00ec\u0902\u0001\u0000\u0000\u0000\u00ee\u0904\u0001\u0000\u0000"+
		"\u0000\u00f0\u0908\u0001\u0000\u0000\u0000\u00f2\u0921\u0001\u0000\u0000"+
		"\u0000\u00f4\u0923\u0001\u0000\u0000\u0000\u00f6\u0926\u0001\u0000\u0000"+
		"\u0000\u00f8\u092b\u0001\u0000\u0000\u0000\u00fa\u093b\u0001\u0000\u0000"+
		"\u0000\u00fc\u09a8\u0001\u0000\u0000\u0000\u00fe\u09aa\u0001\u0000\u0000"+
		"\u0000\u0100\u09c6\u0001\u0000\u0000\u0000\u0102\u09cb\u0001\u0000\u0000"+
		"\u0000\u0104\u09cf\u0001\u0000\u0000\u0000\u0106\u09d5\u0001\u0000\u0000"+
		"\u0000\u0108\u09dd\u0001\u0000\u0000\u0000\u010a\u09e5\u0001\u0000\u0000"+
		"\u0000\u010c\u09ed\u0001\u0000\u0000\u0000\u010e\u09f8\u0001\u0000\u0000"+
		"\u0000\u0110\u0a00\u0001\u0000\u0000\u0000\u0112\u0a08\u0001\u0000\u0000"+
		"\u0000\u0114\u0a10\u0001\u0000\u0000\u0000\u0116\u0a18\u0001\u0000\u0000"+
		"\u0000\u0118\u0a43\u0001\u0000\u0000\u0000\u011a\u0a53\u0001\u0000\u0000"+
		"\u0000\u011c\u0a57\u0001\u0000\u0000\u0000\u011e\u0a59\u0001\u0000\u0000"+
		"\u0000\u0120\u0a5c\u0001\u0000\u0000\u0000\u0122\u0a63\u0001\u0000\u0000"+
		"\u0000\u0124\u0a76\u0001\u0000\u0000\u0000\u0126\u0b38\u0001\u0000\u0000"+
		"\u0000\u0128\u0b3a\u0001\u0000\u0000\u0000\u012a\u0b4d\u0001\u0000\u0000"+
		"\u0000\u012c\u0b4f\u0001\u0000\u0000\u0000\u012e\u0b8e\u0001\u0000\u0000"+
		"\u0000\u0130\u0bb6\u0001\u0000\u0000\u0000\u0132\u0bb8\u0001\u0000\u0000"+
		"\u0000\u0134\u0bc2\u0001\u0000\u0000\u0000\u0136\u0bcd\u0001\u0000\u0000"+
		"\u0000\u0138\u0bcf\u0001\u0000\u0000\u0000\u013a\u0bd2\u0001\u0000\u0000"+
		"\u0000\u013c\u0bd6\u0001\u0000\u0000\u0000\u013e\u0bd8\u0001\u0000\u0000"+
		"\u0000\u0140\u0be4\u0001\u0000\u0000\u0000\u0142\u0be6\u0001\u0000\u0000"+
		"\u0000\u0144\u0c07\u0001\u0000\u0000\u0000\u0146\u0c0d\u0001\u0000\u0000"+
		"\u0000\u0148\u0c1f\u0001\u0000\u0000\u0000\u014a\u0c2c\u0001\u0000\u0000"+
		"\u0000\u014c\u0c37\u0001\u0000\u0000\u0000\u014e\u0cae\u0001\u0000\u0000"+
		"\u0000\u0150\u0cc4\u0001\u0000\u0000\u0000\u0152\u0cd4\u0001\u0000\u0000"+
		"\u0000\u0154\u0cdd\u0001\u0000\u0000\u0000\u0156\u0ce6\u0001\u0000\u0000"+
		"\u0000\u0158\u0ce8\u0001\u0000\u0000\u0000\u015a\u0cef\u0001\u0000\u0000"+
		"\u0000\u015c\u0cf1\u0001\u0000\u0000\u0000\u015e\u0cf3\u0001\u0000\u0000"+
		"\u0000\u0160\u0cf5\u0001\u0000\u0000\u0000\u0162\u0cf7\u0001\u0000\u0000"+
		"\u0000\u0164\u0cf9\u0001\u0000\u0000\u0000\u0166\u0cfb\u0001\u0000\u0000"+
		"\u0000\u0168\u0cfd\u0001\u0000\u0000\u0000\u016a\u016d\u0003\u0002\u0001"+
		"\u0000\u016b\u016c\u0005\u0457\u0000\u0000\u016c\u016e\u0005\u0457\u0000"+
		"\u0000\u016d\u016b\u0001\u0000\u0000\u0000\u016d\u016e\u0001\u0000\u0000"+
		"\u0000\u016e\u0170\u0001\u0000\u0000\u0000\u016f\u0171\u0005\u0466\u0000"+
		"\u0000\u0170\u016f\u0001\u0000\u0000\u0000\u0170\u0171\u0001\u0000\u0000"+
		"\u0000\u0171\u0174\u0001\u0000\u0000\u0000\u0172\u0174\u0003\u0004\u0002"+
		"\u0000\u0173\u016a\u0001\u0000\u0000\u0000\u0173\u0172\u0001\u0000\u0000"+
		"\u0000\u0174\u0177\u0001\u0000\u0000\u0000\u0175\u0173\u0001\u0000\u0000"+
		"\u0000\u0175\u0176\u0001\u0000\u0000\u0000\u0176\u0181\u0001\u0000\u0000"+
		"\u0000\u0177\u0175\u0001\u0000\u0000\u0000\u0178\u017e\u0003\u0002\u0001"+
		"\u0000\u0179\u017a\u0005\u0457\u0000\u0000\u017a\u017c\u0005\u0457\u0000"+
		"\u0000\u017b\u0179\u0001\u0000\u0000\u0000\u017b\u017c\u0001\u0000\u0000"+
		"\u0000\u017c\u017d\u0001\u0000\u0000\u0000\u017d\u017f\u0005\u0466\u0000"+
		"\u0000\u017e\u017b\u0001\u0000\u0000\u0000\u017e\u017f\u0001\u0000\u0000"+
		"\u0000\u017f\u0182\u0001\u0000\u0000\u0000\u0180\u0182\u0003\u0004\u0002"+
		"\u0000\u0181\u0178\u0001\u0000\u0000\u0000\u0181\u0180\u0001\u0000\u0000"+
		"\u0000\u0182\u0001\u0001\u0000\u0000\u0000\u0183\u0186\u0003\u0006\u0003"+
		"\u0000\u0184\u0186\u0003\b\u0004\u0000\u0185\u0183\u0001\u0000\u0000\u0000"+
		"\u0185\u0184\u0001\u0000\u0000\u0000\u0186\u0003\u0001\u0000\u0000\u0000"+
		"\u0187\u0188\u0005\u0466\u0000\u0000\u0188\u0005\u0001\u0000\u0000\u0000"+
		"\u0189\u018f\u0003\n\u0005\u0000\u018a\u018f\u0003@ \u0000\u018b\u018f"+
		"\u0003B!\u0000\u018c\u018f\u0003D\"\u0000\u018d\u018f\u0003H$\u0000\u018e"+
		"\u0189\u0001\u0000\u0000\u0000\u018e\u018a\u0001\u0000\u0000\u0000\u018e"+
		"\u018b\u0001\u0000\u0000\u0000\u018e\u018c\u0001\u0000\u0000\u0000\u018e"+
		"\u018d\u0001\u0000\u0000\u0000\u018f\u0007\u0001\u0000\u0000\u0000\u0190"+
		"\u019b\u0003Z-\u0000\u0191\u019b\u0003R)\u0000\u0192\u019b\u0003\\.\u0000"+
		"\u0193\u019b\u0003L&\u0000\u0194\u019b\u0003X,\u0000\u0195\u019b\u0003"+
		"J%\u0000\u0196\u019b\u0003T*\u0000\u0197\u019b\u0003V+\u0000\u0198\u019b"+
		"\u0003N\'\u0000\u0199\u019b\u0003P(\u0000\u019a\u0190\u0001\u0000\u0000"+
		"\u0000\u019a\u0191\u0001\u0000\u0000\u0000\u019a\u0192\u0001\u0000\u0000"+
		"\u0000\u019a\u0193\u0001\u0000\u0000\u0000\u019a\u0194\u0001\u0000\u0000"+
		"\u0000\u019a\u0195\u0001\u0000\u0000\u0000\u019a\u0196\u0001\u0000\u0000"+
		"\u0000\u019a\u0197\u0001\u0000\u0000\u0000\u019a\u0198\u0001\u0000\u0000"+
		"\u0000\u019a\u0199\u0001\u0000\u0000\u0000\u019b\t\u0001\u0000\u0000\u0000"+
		"\u019c\u019d\u0005 \u0000\u0000\u019d\u019f\u0007\u0000\u0000\u0000\u019e"+
		"\u01a0\u0003\u0120\u0090\u0000\u019f\u019e\u0001\u0000\u0000\u0000\u019f"+
		"\u01a0\u0001\u0000\u0000\u0000\u01a0\u01a1\u0001\u0000\u0000\u0000\u01a1"+
		"\u01a2\u0003\u00e8t\u0000\u01a2\u000b\u0001\u0000\u0000\u0000\u01a3\u01a5"+
		"\u0005\u00ba\u0000\u0000\u01a4\u01a6\u0005\u022b\u0000\u0000\u01a5\u01a4"+
		"\u0001\u0000\u0000\u0000\u01a5\u01a6\u0001\u0000\u0000\u0000\u01a6\u01a7"+
		"\u0001\u0000\u0000\u0000\u01a7\u01a8\u0003\u000e\u0007\u0000\u01a8\r\u0001"+
		"\u0000\u0000\u0000\u01a9\u01b5\u0003\u0010\b\u0000\u01aa\u01ab\u0005\u0463"+
		"\u0000\u0000\u01ab\u01b0\u0003\u0012\t\u0000\u01ac\u01ad\u0005\u0465\u0000"+
		"\u0000\u01ad\u01af\u0003\u0012\t\u0000\u01ae\u01ac\u0001\u0000\u0000\u0000"+
		"\u01af\u01b2\u0001\u0000\u0000\u0000\u01b0\u01ae\u0001\u0000\u0000\u0000"+
		"\u01b0\u01b1\u0001\u0000\u0000\u0000\u01b1\u01b3\u0001\u0000\u0000\u0000"+
		"\u01b2\u01b0\u0001\u0000\u0000\u0000\u01b3\u01b4\u0005\u0464\u0000\u0000"+
		"\u01b4\u01b6\u0001\u0000\u0000\u0000\u01b5\u01aa\u0001\u0000\u0000\u0000"+
		"\u01b5\u01b6\u0001\u0000\u0000\u0000\u01b6\u01b7\u0001\u0000\u0000\u0000"+
		"\u01b7\u01b8\u0005\f\u0000\u0000\u01b8\u01b9\u0005\u0463\u0000\u0000\u01b9"+
		"\u01ba\u0003\b\u0004\u0000\u01ba\u01bd\u0005\u0464\u0000\u0000\u01bb\u01bc"+
		"\u0005\u0465\u0000\u0000\u01bc\u01be\u0003\u000e\u0007\u0000\u01bd\u01bb"+
		"\u0001\u0000\u0000\u0000\u01bd\u01be\u0001\u0000\u0000\u0000\u01be\u000f"+
		"\u0001\u0000\u0000\u0000\u01bf\u01c0\u0003\u00e8t\u0000\u01c0\u0011\u0001"+
		"\u0000\u0000\u0000\u01c1\u01c2\u0003\u00e8t\u0000\u01c2\u0013\u0001\u0000"+
		"\u0000\u0000\u01c3\u01c5\u0005\u01b6\u0000\u0000\u01c4\u01c6\u0007\u0001"+
		"\u0000\u0000\u01c5\u01c4\u0001\u0000\u0000\u0000\u01c5\u01c6\u0001\u0000"+
		"\u0000\u0000\u01c6\u01c7\u0001\u0000\u0000\u0000\u01c7\u01eb\u0003\u00ee"+
		"w\u0000\u01c8\u01ca\u0005k\u0000\u0000\u01c9\u01cb\u0005\u045a\u0000\u0000"+
		"\u01ca\u01c9\u0001\u0000\u0000\u0000\u01ca\u01cb\u0001\u0000\u0000\u0000"+
		"\u01cb\u01cc\u0001\u0000\u0000\u0000\u01cc\u01eb\u0003\u00eew\u0000\u01cd"+
		"\u01ce\u0005\u01fc\u0000\u0000\u01ce\u01eb\u0005k\u0000\u0000\u01cf\u01eb"+
		"\u0005\u0201\u0000\u0000\u01d0\u01d2\u0005j\u0000\u0000\u01d1\u01d3\u0005"+
		"\u045a\u0000\u0000\u01d2\u01d1\u0001\u0000\u0000\u0000\u01d2\u01d3\u0001"+
		"\u0000\u0000\u0000\u01d3\u01d4\u0001\u0000\u0000\u0000\u01d4\u01eb\u0003"+
		"\u00eew\u0000\u01d5\u01d6\u0005\u01fc\u0000\u0000\u01d6\u01eb\u0005j\u0000"+
		"\u0000\u01d7\u01eb\u0005\u0200\u0000\u0000\u01d8\u01da\u0005\u0264\u0000"+
		"\u0000\u01d9\u01db\u0007\u0002\u0000\u0000\u01da\u01d9\u0001\u0000\u0000"+
		"\u0000\u01da\u01db\u0001\u0000\u0000\u0000\u01db\u01dc\u0001\u0000\u0000"+
		"\u0000\u01dc\u01eb\u0003\u00eew\u0000\u01dd\u01df\u0005\u0156\u0000\u0000"+
		"\u01de\u01e0\u0005\u045a\u0000\u0000\u01df\u01de\u0001\u0000\u0000\u0000"+
		"\u01df\u01e0\u0001\u0000\u0000\u0000\u01e0\u01e1\u0001\u0000\u0000\u0000"+
		"\u01e1\u01eb\u0003\u00eew\u0000\u01e2\u01eb\u0005\u01fd\u0000\u0000\u01e3"+
		"\u01eb\u0005\u0179\u0000\u0000\u01e4\u01eb\u0005\u01ff\u0000\u0000\u01e5"+
		"\u01e7\u0005\u023e\u0000\u0000\u01e6\u01e8\u0007\u0002\u0000\u0000\u01e7"+
		"\u01e6\u0001\u0000\u0000\u0000\u01e7\u01e8\u0001\u0000\u0000\u0000\u01e8"+
		"\u01e9\u0001\u0000\u0000\u0000\u01e9\u01eb\u0003\u00eew\u0000\u01ea\u01c3"+
		"\u0001\u0000\u0000\u0000\u01ea\u01c8\u0001\u0000\u0000\u0000\u01ea\u01cd"+
		"\u0001\u0000\u0000\u0000\u01ea\u01cf\u0001\u0000\u0000\u0000\u01ea\u01d0"+
		"\u0001\u0000\u0000\u0000\u01ea\u01d5\u0001\u0000\u0000\u0000\u01ea\u01d7"+
		"\u0001\u0000\u0000\u0000\u01ea\u01d8\u0001\u0000\u0000\u0000\u01ea\u01dd"+
		"\u0001\u0000\u0000\u0000\u01ea\u01e2\u0001\u0000\u0000\u0000\u01ea\u01e3"+
		"\u0001\u0000\u0000\u0000\u01ea\u01e4\u0001\u0000\u0000\u0000\u01ea\u01e5"+
		"\u0001\u0000\u0000\u0000\u01eb\u0015\u0001\u0000\u0000\u0000\u01ec\u01f1"+
		"\u0005\u0132\u0000\u0000\u01ed\u01f1\u0003\u00f2y\u0000\u01ee\u01f1\u0003"+
		"\u00eew\u0000\u01ef\u01f1\u0003\u014a\u00a5\u0000\u01f0\u01ec\u0001\u0000"+
		"\u0000\u0000\u01f0\u01ed\u0001\u0000\u0000\u0000\u01f0\u01ee\u0001\u0000"+
		"\u0000\u0000\u01f0\u01ef\u0001\u0000\u0000\u0000\u01f1\u0017\u0001\u0000"+
		"\u0000\u0000\u01f2\u01f3\u0005\u0456\u0000\u0000\u01f3\u01f6\u0005S\u0000"+
		"\u0000\u01f4\u01f7\u0003\u00eew\u0000\u01f5\u01f7\u0003\u014a\u00a5\u0000"+
		"\u01f6\u01f4\u0001\u0000\u0000\u0000\u01f6\u01f5\u0001\u0000\u0000\u0000"+
		"\u01f7\u01f8\u0001\u0000\u0000\u0000\u01f8\u01f9\u0003\u001a\r\u0000\u01f9"+
		"\u0019\u0001\u0000\u0000\u0000\u01fa\u0208\u0003\u0162\u00b1\u0000\u01fb"+
		"\u0208\u0005\u00d7\u0000\u0000\u01fc\u0208\u0005\u00ea\u0000\u0000\u01fd"+
		"\u0208\u0005\u00eb\u0000\u0000\u01fe\u0208\u0005\u00ec\u0000\u0000\u01ff"+
		"\u0208\u0005\u00ed\u0000\u0000\u0200\u0208\u0005\u00ee\u0000\u0000\u0201"+
		"\u0208\u0005\u00ef\u0000\u0000\u0202\u0208\u0005\u00f0\u0000\u0000\u0203"+
		"\u0208\u0005\u00f1\u0000\u0000\u0204\u0208\u0005\u00f2\u0000\u0000\u0205"+
		"\u0208\u0005\u00f3\u0000\u0000\u0206\u0208\u0005\u00f4\u0000\u0000\u0207"+
		"\u01fa\u0001\u0000\u0000\u0000\u0207\u01fb\u0001\u0000\u0000\u0000\u0207"+
		"\u01fc\u0001\u0000\u0000\u0000\u0207\u01fd\u0001\u0000\u0000\u0000\u0207"+
		"\u01fe\u0001\u0000\u0000\u0000\u0207\u01ff\u0001\u0000\u0000\u0000\u0207"+
		"\u0200\u0001\u0000\u0000\u0000\u0207\u0201\u0001\u0000\u0000\u0000\u0207"+
		"\u0202\u0001\u0000\u0000\u0000\u0207\u0203\u0001\u0000\u0000\u0000\u0207"+
		"\u0204\u0001\u0000\u0000\u0000\u0207\u0205\u0001\u0000\u0000\u0000\u0207"+
		"\u0206\u0001\u0000\u0000\u0000\u0208\u001b\u0001\u0000\u0000\u0000\u0209"+
		"\u020f\u0005\u018a\u0000\u0000\u020a\u020f\u0005\u0183\u0000\u0000\u020b"+
		"\u020c\u0005\u0183\u0000\u0000\u020c\u020d\u0005r\u0000\u0000\u020d\u020f"+
		"\u0005\u0255\u0000\u0000\u020e\u0209\u0001\u0000\u0000\u0000\u020e\u020a"+
		"\u0001\u0000\u0000\u0000\u020e\u020b\u0001\u0000\u0000\u0000\u020f\u001d"+
		"\u0001\u0000\u0000\u0000\u0210\u0211\u0005\u00b5\u0000\u0000\u0211\u0212"+
		"\u0007\u0003\u0000\u0000\u0212\u001f\u0001\u0000\u0000\u0000\u0213\u0215"+
		"\u0005\u01c6\u0000\u0000\u0214\u0216\u0005\u045a\u0000\u0000\u0215\u0214"+
		"\u0001\u0000\u0000\u0000\u0215\u0216\u0001\u0000\u0000\u0000\u0216\u0217"+
		"\u0001\u0000\u0000\u0000\u0217\u0232\u0003\u00f0x\u0000\u0218\u0232\u0003"+
		"\u001e\u000f\u0000\u0219\u021a\u0005\u00ba\u0000\u0000\u021a\u021b\u0005"+
		"\u0214\u0000\u0000\u021b\u0232\u0003\u00e8t\u0000\u021c\u021d\u0005\u0167"+
		"\u0000\u0000\u021d\u0232\u0005\u0472\u0000\u0000\u021e\u0232\u0007\u0004"+
		"\u0000\u0000\u021f\u0221\u0005\u0357\u0000\u0000\u0220\u0222\u0005\u045a"+
		"\u0000\u0000\u0221\u0220\u0001\u0000\u0000\u0000\u0221\u0222\u0001\u0000"+
		"\u0000\u0000\u0222\u0223\u0001\u0000\u0000\u0000\u0223\u0232\u0005\u0472"+
		"\u0000\u0000\u0224\u0226\u0005\u03d3\u0000\u0000\u0225\u0227\u0005\u045a"+
		"\u0000\u0000\u0226\u0225\u0001\u0000\u0000\u0000\u0226\u0227\u0001\u0000"+
		"\u0000\u0000\u0227\u0228\u0001\u0000\u0000\u0000\u0228\u0232\u0005\u0472"+
		"\u0000\u0000\u0229\u022a\u0005\u0161\u0000\u0000\u022a\u022b\u0005\u045a"+
		"\u0000\u0000\u022b\u0232\u0007\u0005\u0000\u0000\u022c\u0230\u0005L\u0000"+
		"\u0000\u022d\u022e\u0005n\u0000\u0000\u022e\u0230\u0005L\u0000\u0000\u022f"+
		"\u022c\u0001\u0000\u0000\u0000\u022f\u022d\u0001\u0000\u0000\u0000\u0230"+
		"\u0232\u0001\u0000\u0000\u0000\u0231\u0213\u0001\u0000\u0000\u0000\u0231"+
		"\u0218\u0001\u0000\u0000\u0000\u0231\u0219\u0001\u0000\u0000\u0000\u0231"+
		"\u021c\u0001\u0000\u0000\u0000\u0231\u021e\u0001\u0000\u0000\u0000\u0231"+
		"\u021f\u0001\u0000\u0000\u0000\u0231\u0224\u0001\u0000\u0000\u0000\u0231"+
		"\u0229\u0001\u0000\u0000\u0000\u0231\u022f\u0001\u0000\u0000\u0000\u0232"+
		"!\u0001\u0000\u0000\u0000\u0233\u0235\u0007\u0006\u0000\u0000\u0234\u0233"+
		"\u0001\u0000\u0000\u0000\u0234\u0235\u0001\u0000\u0000\u0000\u0235\u0236"+
		"\u0001\u0000\u0000\u0000\u0236\u0237\u0003\u00e8t\u0000\u0237\u0238\u0003"+
		"\u00fc~\u0000\u0238#\u0001\u0000\u0000\u0000\u0239\u023a\u0003\u00e8t"+
		"\u0000\u023a\u023b\u0003\u00fc~\u0000\u023b%\u0001\u0000\u0000\u0000\u023c"+
		"\u023d\u0005\u0167\u0000\u0000\u023d\u0254\u0005\u0472\u0000\u0000\u023e"+
		"\u023f\u0005\u01c7\u0000\u0000\u023f\u0254\u0005\u009b\u0000\u0000\u0240"+
		"\u0242\u0005n\u0000\u0000\u0241\u0240\u0001\u0000\u0000\u0000\u0241\u0242"+
		"\u0001\u0000\u0000\u0000\u0242\u0243\u0001\u0000\u0000\u0000\u0243\u0254"+
		"\u0005-\u0000\u0000\u0244\u0245\u0005\u0174\u0000\u0000\u0245\u024f\u0005"+
		"\u009b\u0000\u0000\u0246\u0247\u0005\u01fc\u0000\u0000\u0247\u024f\u0005"+
		"\u009b\u0000\u0000\u0248\u0249\u0005\u0083\u0000\u0000\u0249\u024a\u0005"+
		"\u009b\u0000\u0000\u024a\u024f\u0005\u017b\u0000\u0000\u024b\u024c\u0005"+
		"l\u0000\u0000\u024c\u024d\u0005\u009b\u0000\u0000\u024d\u024f\u0005\u017b"+
		"\u0000\u0000\u024e\u0244\u0001\u0000\u0000\u0000\u024e\u0246\u0001\u0000"+
		"\u0000\u0000\u024e\u0248\u0001\u0000\u0000\u0000\u024e\u024b\u0001\u0000"+
		"\u0000\u0000\u024f\u0254\u0001\u0000\u0000\u0000\u0250\u0251\u0005\u009b"+
		"\u0000\u0000\u0251\u0252\u0005\u024d\u0000\u0000\u0252\u0254\u0007\u0007"+
		"\u0000\u0000\u0253\u023c\u0001\u0000\u0000\u0000\u0253\u023e\u0001\u0000"+
		"\u0000\u0000\u0253\u0241\u0001\u0000\u0000\u0000\u0253\u024e\u0001\u0000"+
		"\u0000\u0000\u0253\u0250\u0001\u0000\u0000\u0000\u0254\'\u0001\u0000\u0000"+
		"\u0000\u0255\u0256\u0005\u01b1\u0000\u0000\u0256\u0264\u0005\u0472\u0000"+
		"\u0000\u0257\u0258\u0005%\u0000\u0000\u0258\u0264\u0005\u0472\u0000\u0000"+
		"\u0259\u025a\u0005\u0288\u0000\u0000\u025a\u0264\u0005\u0472\u0000\u0000"+
		"\u025b\u025c\u0005\u0218\u0000\u0000\u025c\u0264\u0005\u0472\u0000\u0000"+
		"\u025d\u025e\u0005\u0258\u0000\u0000\u025e\u0264\u0005\u0472\u0000\u0000"+
		"\u025f\u0260\u0005\u0211\u0000\u0000\u0260\u0264\u0005\u0472\u0000\u0000"+
		"\u0261\u0262\u0005\u021d\u0000\u0000\u0262\u0264\u0003\u00eew\u0000\u0263"+
		"\u0255\u0001\u0000\u0000\u0000\u0263\u0257\u0001\u0000\u0000\u0000\u0263"+
		"\u0259\u0001\u0000\u0000\u0000\u0263\u025b\u0001\u0000\u0000\u0000\u0263"+
		"\u025d\u0001\u0000\u0000\u0000\u0263\u025f\u0001\u0000\u0000\u0000\u0263"+
		"\u0261\u0001\u0000\u0000\u0000\u0264)\u0001\u0000\u0000\u0000\u0265\u0266"+
		"\u0005\u0463\u0000\u0000\u0266\u026b\u0003,\u0016\u0000\u0267\u0268\u0005"+
		"\u0465\u0000\u0000\u0268\u026a\u0003,\u0016\u0000\u0269\u0267\u0001\u0000"+
		"\u0000\u0000\u026a\u026d\u0001\u0000\u0000\u0000\u026b\u0269\u0001\u0000"+
		"\u0000\u0000\u026b\u026c\u0001\u0000\u0000\u0000\u026c\u026e\u0001\u0000"+
		"\u0000\u0000\u026d\u026b\u0001\u0000\u0000\u0000\u026e\u026f\u0005\u0464"+
		"\u0000\u0000\u026f+\u0001\u0000\u0000\u0000\u0270\u0271\u0003\u00e8t\u0000"+
		"\u0271\u0272\u0003.\u0017\u0000\u0272\u0276\u0001\u0000\u0000\u0000\u0273"+
		"\u0276\u00032\u0019\u0000\u0274\u0276\u0003:\u001d\u0000\u0275\u0270\u0001"+
		"\u0000\u0000\u0000\u0275\u0273\u0001\u0000\u0000\u0000\u0275\u0274\u0001"+
		"\u0000\u0000\u0000\u0276-\u0001\u0000\u0000\u0000\u0277\u027b\u0003\u00fc"+
		"~\u0000\u0278\u027a\u00030\u0018\u0000\u0279\u0278\u0001\u0000\u0000\u0000"+
		"\u027a\u027d\u0001\u0000\u0000\u0000\u027b\u0279\u0001\u0000\u0000\u0000"+
		"\u027b\u027c\u0001\u0000\u0000\u0000\u027c/\u0001\u0000\u0000\u0000\u027d"+
		"\u027b\u0001\u0000\u0000\u0000\u027e\u02b4\u0003\u00f8|\u0000\u027f\u0280"+
		"\u0005(\u0000\u0000\u0280\u02b4\u0003\u0118\u008c\u0000\u0281\u02b4\u0005"+
		"\u0290\u0000\u0000\u0282\u02b4\u0005\u01be\u0000\u0000\u0283\u0288\u0005"+
		"\u014d\u0000\u0000\u0284\u0285\u0005r\u0000\u0000\u0285\u0286\u0005\u00b2"+
		"\u0000\u0000\u0286\u0288\u0003\u011a\u008d\u0000\u0287\u0283\u0001\u0000"+
		"\u0000\u0000\u0287\u0284\u0001\u0000\u0000\u0000\u0288\u02b4\u0001\u0000"+
		"\u0000\u0000\u0289\u028b\u0005~\u0000\u0000\u028a\u0289\u0001\u0000\u0000"+
		"\u0000\u028a\u028b\u0001\u0000\u0000\u0000\u028b\u028c\u0001\u0000\u0000"+
		"\u0000\u028c\u02b4\u0005X\u0000\u0000\u028d\u028f\u0005\u00af\u0000\u0000"+
		"\u028e\u0290\u0005X\u0000\u0000\u028f\u028e\u0001\u0000\u0000\u0000\u028f"+
		"\u0290\u0001\u0000\u0000\u0000\u0290\u02b4\u0001\u0000\u0000\u0000\u0291"+
		"\u0292\u0005\u0167\u0000\u0000\u0292\u02b4\u0005\u0472\u0000\u0000\u0293"+
		"\u0294\u0005\u0165\u0000\u0000\u0294\u02b4\u0007\b\u0000\u0000\u0295\u0296"+
		"\u0005\u026b\u0000\u0000\u0296\u02b4\u0007\t\u0000\u0000\u0297\u02b4\u0003"+
		"4\u001a\u0000\u0298\u0299\u0005\u001a\u0000\u0000\u0299\u02b4\u0003\u00dc"+
		"n\u0000\u029a\u029b\u0005C\u0000\u0000\u029b\u029d\u0005\b\u0000\u0000"+
		"\u029c\u029a\u0001\u0000\u0000\u0000\u029c\u029d\u0001\u0000\u0000\u0000"+
		"\u029d\u029e\u0001\u0000\u0000\u0000\u029e\u029f\u0005\f\u0000\u0000\u029f"+
		"\u02a0\u0005\u0463\u0000\u0000\u02a0\u02a1\u0003\u014a\u00a5\u0000\u02a1"+
		"\u02a3\u0005\u0464\u0000\u0000\u02a2\u02a4\u0007\n\u0000\u0000\u02a3\u02a2"+
		"\u0001\u0000\u0000\u0000\u02a3\u02a4\u0001\u0000\u0000\u0000\u02a4\u02b4"+
		"\u0001\u0000\u0000\u0000\u02a5\u02a6\u0005\u00e9\u0000\u0000\u02a6\u02a7"+
		"\u0005(\u0000\u0000\u02a7\u02b4\u0005\u028c\u0000\u0000\u02a8\u02aa\u0005"+
		"\u001d\u0000\u0000\u02a9\u02ab\u0003\u00e8t\u0000\u02aa\u02a9\u0001\u0000"+
		"\u0000\u0000\u02aa\u02ab\u0001\u0000\u0000\u0000\u02ab\u02ad\u0001\u0000"+
		"\u0000\u0000\u02ac\u02a8\u0001\u0000\u0000\u0000\u02ac\u02ad\u0001\u0000"+
		"\u0000\u0000\u02ad\u02ae\u0001\u0000\u0000\u0000\u02ae\u02af\u0005\u0019"+
		"\u0000\u0000\u02af\u02b0\u0005\u0463\u0000\u0000\u02b0\u02b1\u0003\u014a"+
		"\u00a5\u0000\u02b1\u02b2\u0005\u0464\u0000\u0000\u02b2\u02b4\u0001\u0000"+
		"\u0000\u0000\u02b3\u027e\u0001\u0000\u0000\u0000\u02b3\u027f\u0001\u0000"+
		"\u0000\u0000\u02b3\u0281\u0001\u0000\u0000\u0000\u02b3\u0282\u0001\u0000"+
		"\u0000\u0000\u02b3\u0287\u0001\u0000\u0000\u0000\u02b3\u028a\u0001\u0000"+
		"\u0000\u0000\u02b3\u028d\u0001\u0000\u0000\u0000\u02b3\u0291\u0001\u0000"+
		"\u0000\u0000\u02b3\u0293\u0001\u0000\u0000\u0000\u02b3\u0295\u0001\u0000"+
		"\u0000\u0000\u02b3\u0297\u0001\u0000\u0000\u0000\u02b3\u0298\u0001\u0000"+
		"\u0000\u0000\u02b3\u029c\u0001\u0000\u0000\u0000\u02b3\u02a5\u0001\u0000"+
		"\u0000\u0000\u02b3\u02ac\u0001\u0000\u0000\u0000\u02b41\u0001\u0000\u0000"+
		"\u0000\u02b5\u02b7\u0005\u001d\u0000\u0000\u02b6\u02b8\u0003\u00e8t\u0000"+
		"\u02b7\u02b6\u0001\u0000\u0000\u0000\u02b7\u02b8\u0001\u0000\u0000\u0000"+
		"\u02b8\u02ba\u0001\u0000\u0000\u0000\u02b9\u02b5\u0001\u0000\u0000\u0000"+
		"\u02b9\u02ba\u0001\u0000\u0000\u0000\u02ba\u02bb\u0001\u0000\u0000\u0000"+
		"\u02bb\u02bc\u0005~\u0000\u0000\u02bc\u02be\u0005X\u0000\u0000\u02bd\u02bf"+
		"\u0003\u00e8t\u0000\u02be\u02bd\u0001\u0000\u0000\u0000\u02be\u02bf\u0001"+
		"\u0000\u0000\u0000\u02bf\u02c1\u0001\u0000\u0000\u0000\u02c0\u02c2\u0003"+
		"\u001e\u000f\u0000\u02c1\u02c0\u0001\u0000\u0000\u0000\u02c1\u02c2\u0001"+
		"\u0000\u0000\u0000\u02c2\u02c3\u0001\u0000\u0000\u0000\u02c3\u02c7\u0003"+
		"\u010c\u0086\u0000\u02c4\u02c6\u0003 \u0010\u0000\u02c5\u02c4\u0001\u0000"+
		"\u0000\u0000\u02c6\u02c9\u0001\u0000\u0000\u0000\u02c7\u02c5\u0001\u0000"+
		"\u0000\u0000\u02c7\u02c8\u0001\u0000\u0000\u0000\u02c8\u02fb\u0001\u0000"+
		"\u0000\u0000\u02c9\u02c7\u0001\u0000\u0000\u0000\u02ca\u02cc\u0005\u001d"+
		"\u0000\u0000\u02cb\u02cd\u0003\u00e8t\u0000\u02cc\u02cb\u0001\u0000\u0000"+
		"\u0000\u02cc\u02cd\u0001\u0000\u0000\u0000\u02cd\u02cf\u0001\u0000\u0000"+
		"\u0000\u02ce\u02ca\u0001\u0000\u0000\u0000\u02ce\u02cf\u0001\u0000\u0000"+
		"\u0000\u02cf\u02d0\u0001\u0000\u0000\u0000\u02d0\u02d2\u0005\u00af\u0000"+
		"\u0000\u02d1\u02d3\u0007\u000b\u0000\u0000\u02d2\u02d1\u0001\u0000\u0000"+
		"\u0000\u02d2\u02d3\u0001\u0000\u0000\u0000\u02d3\u02d5\u0001\u0000\u0000"+
		"\u0000\u02d4\u02d6\u0003\u00e8t\u0000\u02d5\u02d4\u0001\u0000\u0000\u0000"+
		"\u02d5\u02d6\u0001\u0000\u0000\u0000\u02d6\u02d8\u0001\u0000\u0000\u0000"+
		"\u02d7\u02d9\u0003\u001e\u000f\u0000\u02d8\u02d7\u0001\u0000\u0000\u0000"+
		"\u02d8\u02d9\u0001\u0000\u0000\u0000\u02d9\u02da\u0001\u0000\u0000\u0000"+
		"\u02da\u02de\u0003\u010c\u0086\u0000\u02db\u02dd\u0003 \u0010\u0000\u02dc"+
		"\u02db\u0001\u0000\u0000\u0000\u02dd\u02e0\u0001\u0000\u0000\u0000\u02de"+
		"\u02dc\u0001\u0000\u0000\u0000\u02de\u02df\u0001\u0000\u0000\u0000\u02df"+
		"\u02fb\u0001\u0000\u0000\u0000\u02e0\u02de\u0001\u0000\u0000\u0000\u02e1"+
		"\u02e3\u0005\u001d\u0000\u0000\u02e2\u02e4\u0003\u00e8t\u0000\u02e3\u02e2"+
		"\u0001\u0000\u0000\u0000\u02e3\u02e4\u0001\u0000\u0000\u0000\u02e4\u02e6"+
		"\u0001\u0000\u0000\u0000\u02e5\u02e1\u0001\u0000\u0000\u0000\u02e5\u02e6"+
		"\u0001\u0000\u0000\u0000\u02e6\u02e7\u0001\u0000\u0000\u0000\u02e7\u02e8"+
		"\u0005@\u0000\u0000\u02e8\u02ea\u0005X\u0000\u0000\u02e9\u02eb\u0003\u00e8"+
		"t\u0000\u02ea\u02e9\u0001\u0000\u0000\u0000\u02ea\u02eb\u0001\u0000\u0000"+
		"\u0000\u02eb\u02ec\u0001\u0000\u0000\u0000\u02ec\u02ed\u0003\u010c\u0086"+
		"\u0000\u02ed\u02ee\u00034\u001a\u0000\u02ee\u02fb\u0001\u0000\u0000\u0000"+
		"\u02ef\u02f1\u0005\u001d\u0000\u0000\u02f0\u02f2\u0003\u00e8t\u0000\u02f1"+
		"\u02f0\u0001\u0000\u0000\u0000\u02f1\u02f2\u0001\u0000\u0000\u0000\u02f2"+
		"\u02f4\u0001\u0000\u0000\u0000\u02f3\u02ef\u0001\u0000\u0000\u0000\u02f3"+
		"\u02f4\u0001\u0000\u0000\u0000\u02f4\u02f5\u0001\u0000\u0000\u0000\u02f5"+
		"\u02f6\u0005\u0019\u0000\u0000\u02f6\u02f7\u0005\u0463\u0000\u0000\u02f7"+
		"\u02f8\u0003\u014a\u00a5\u0000\u02f8\u02f9\u0005\u0464\u0000\u0000\u02f9"+
		"\u02fb\u0001\u0000\u0000\u0000\u02fa\u02b9\u0001\u0000\u0000\u0000\u02fa"+
		"\u02ce\u0001\u0000\u0000\u0000\u02fa\u02e5\u0001\u0000\u0000\u0000\u02fa"+
		"\u02f3\u0001\u0000\u0000\u0000\u02fb3\u0001\u0000\u0000\u0000\u02fc\u02fd"+
		"\u0005\u0084\u0000\u0000\u02fd\u02ff\u0003\u00ceg\u0000\u02fe\u0300\u0003"+
		"\u010c\u0086\u0000\u02ff\u02fe\u0001\u0000\u0000\u0000\u02ff\u0300\u0001"+
		"\u0000\u0000\u0000\u0300\u0303\u0001\u0000\u0000\u0000\u0301\u0302\u0005"+
		"i\u0000\u0000\u0302\u0304\u0007\f\u0000\u0000\u0303\u0301\u0001\u0000"+
		"\u0000\u0000\u0303\u0304\u0001\u0000\u0000\u0000\u0304\u0306\u0001\u0000"+
		"\u0000\u0000\u0305\u0307\u00036\u001b\u0000\u0306\u0305\u0001\u0000\u0000"+
		"\u0000\u0306\u0307\u0001\u0000\u0000\u0000\u03075\u0001\u0000\u0000\u0000"+
		"\u0308\u0309\u0005r\u0000\u0000\u0309\u030a\u0005*\u0000\u0000\u030a\u030e"+
		"\u00038\u001c\u0000\u030b\u030c\u0005r\u0000\u0000\u030c\u030d\u0005\u00b2"+
		"\u0000\u0000\u030d\u030f\u00038\u001c\u0000\u030e\u030b\u0001\u0000\u0000"+
		"\u0000\u030e\u030f\u0001\u0000\u0000\u0000\u030f\u0319\u0001\u0000\u0000"+
		"\u0000\u0310\u0311\u0005r\u0000\u0000\u0311\u0312\u0005\u00b2\u0000\u0000"+
		"\u0312\u0316\u00038\u001c\u0000\u0313\u0314\u0005r\u0000\u0000\u0314\u0315"+
		"\u0005*\u0000\u0000\u0315\u0317\u00038\u001c\u0000\u0316\u0313\u0001\u0000"+
		"\u0000\u0000\u0316\u0317\u0001\u0000\u0000\u0000\u0317\u0319\u0001\u0000"+
		"\u0000\u0000\u0318\u0308\u0001\u0000\u0000\u0000\u0318\u0310\u0001\u0000"+
		"\u0000\u0000\u03197\u0001\u0000\u0000\u0000\u031a\u0321\u0005\u008c\u0000"+
		"\u0000\u031b\u0321\u0005\u0014\u0000\u0000\u031c\u031d\u0005\u0095\u0000"+
		"\u0000\u031d\u0321\u0005p\u0000\u0000\u031e\u031f\u0005\u01fc\u0000\u0000"+
		"\u031f\u0321\u0005\u0144\u0000\u0000\u0320\u031a\u0001\u0000\u0000\u0000"+
		"\u0320\u031b\u0001\u0000\u0000\u0000\u0320\u031c\u0001\u0000\u0000\u0000"+
		"\u0320\u031e\u0001\u0000\u0000\u0000\u03219\u0001\u0000\u0000\u0000\u0322"+
		"\u0324\u0007\u000b\u0000\u0000\u0323\u0325\u0003\u00e8t\u0000\u0324\u0323"+
		"\u0001\u0000\u0000\u0000\u0324\u0325\u0001\u0000\u0000\u0000\u0325\u0327"+
		"\u0001\u0000\u0000\u0000\u0326\u0328\u0003\u001e\u000f\u0000\u0327\u0326"+
		"\u0001\u0000\u0000\u0000\u0327\u0328\u0001\u0000\u0000\u0000\u0328\u0329"+
		"\u0001\u0000\u0000\u0000\u0329\u032d\u0003\u010c\u0086\u0000\u032a\u032c"+
		"\u0003 \u0010\u0000\u032b\u032a\u0001\u0000\u0000\u0000\u032c\u032f\u0001"+
		"\u0000\u0000\u0000\u032d\u032b\u0001\u0000\u0000\u0000\u032d\u032e\u0001"+
		"\u0000\u0000\u0000\u032e\u033f\u0001\u0000\u0000\u0000\u032f\u032d\u0001"+
		"\u0000\u0000\u0000\u0330\u0332\u0007\r\u0000\u0000\u0331\u0333\u0007\u000b"+
		"\u0000\u0000\u0332\u0331\u0001\u0000\u0000\u0000\u0332\u0333\u0001\u0000"+
		"\u0000\u0000\u0333\u0335\u0001\u0000\u0000\u0000\u0334\u0336\u0003\u00e8"+
		"t\u0000\u0335\u0334\u0001\u0000\u0000\u0000\u0335\u0336\u0001\u0000\u0000"+
		"\u0000\u0336\u0337\u0001\u0000\u0000\u0000\u0337\u033b\u0003\u010c\u0086"+
		"\u0000\u0338\u033a\u0003 \u0010\u0000\u0339\u0338\u0001\u0000\u0000\u0000"+
		"\u033a\u033d\u0001\u0000\u0000\u0000\u033b\u0339\u0001\u0000\u0000\u0000"+
		"\u033b\u033c\u0001\u0000\u0000\u0000\u033c\u033f\u0001\u0000\u0000\u0000"+
		"\u033d\u033b\u0001\u0000\u0000\u0000\u033e\u0322\u0001\u0000\u0000\u0000"+
		"\u033e\u0330\u0001\u0000\u0000\u0000\u033f;\u0001\u0000\u0000\u0000\u0340"+
		"\u0341\u0007\u000e\u0000\u0000\u0341=\u0001\u0000\u0000\u0000\u0342\u0343"+
		"\u0005\u026b\u0000\u0000\u0343\u0344\u0007\t\u0000\u0000\u0344?\u0001"+
		"\u0000\u0000\u0000\u0345\u0346\u00051\u0000\u0000\u0346\u0348\u0007\u0000"+
		"\u0000\u0000\u0347\u0349\u0003\u011e\u008f\u0000\u0348\u0347\u0001\u0000"+
		"\u0000\u0000\u0348\u0349\u0001\u0000\u0000\u0000\u0349\u034a\u0001\u0000"+
		"\u0000\u0000\u034a\u034b\u0003\u00e8t\u0000\u034bA\u0001\u0000\u0000\u0000"+
		"\u034c\u034e\u00051\u0000\u0000\u034d\u034f\u0005\u0278\u0000\u0000\u034e"+
		"\u034d\u0001\u0000\u0000\u0000\u034e\u034f\u0001\u0000\u0000\u0000\u034f"+
		"\u0350\u0001\u0000\u0000\u0000\u0350\u0352\u0005\u00a6\u0000\u0000\u0351"+
		"\u0353\u0003\u011e\u008f\u0000\u0352\u0351\u0001\u0000\u0000\u0000\u0352"+
		"\u0353\u0001\u0000\u0000\u0000\u0353\u0354\u0001\u0000\u0000\u0000\u0354"+
		"\u0356\u0003\u010a\u0085\u0000\u0355\u0357\u0003\u0122\u0091\u0000\u0356"+
		"\u0355\u0001\u0000\u0000\u0000\u0356\u0357\u0001\u0000\u0000\u0000\u0357"+
		"\u0359\u0001\u0000\u0000\u0000\u0358\u035a\u0007\u000f\u0000\u0000\u0359"+
		"\u0358\u0001\u0000\u0000\u0000\u0359\u035a\u0001\u0000\u0000\u0000\u035a"+
		"C\u0001\u0000\u0000\u0000\u035b\u035c\u0005\u0087\u0000\u0000\u035c\u035d"+
		"\u0005\u00a6\u0000\u0000\u035d\u0362\u0003F#\u0000\u035e\u035f\u0005\u0465"+
		"\u0000\u0000\u035f\u0361\u0003F#\u0000\u0360\u035e\u0001\u0000\u0000\u0000"+
		"\u0361\u0364\u0001\u0000\u0000\u0000\u0362\u0360\u0001\u0000\u0000\u0000"+
		"\u0362\u0363\u0001\u0000\u0000\u0000\u0363E\u0001\u0000\u0000\u0000\u0364"+
		"\u0362\u0001\u0000\u0000\u0000\u0365\u0367\u0003\u00ceg\u0000\u0366\u0368"+
		"\u0003\u0122\u0091\u0000\u0367\u0366\u0001\u0000\u0000\u0000\u0367\u0368"+
		"\u0001\u0000\u0000\u0000\u0368\u0369\u0001\u0000\u0000\u0000\u0369\u036a"+
		"\u0005\u00a9\u0000\u0000\u036a\u036b\u0003\u00ceg\u0000\u036bG\u0001\u0000"+
		"\u0000\u0000\u036c\u036e\u0005\u027f\u0000\u0000\u036d\u036f\u0005\u00a6"+
		"\u0000\u0000\u036e\u036d\u0001\u0000\u0000\u0000\u036e\u036f\u0001\u0000"+
		"\u0000\u0000\u036f\u0370\u0001\u0000\u0000\u0000\u0370\u0372\u0003\u00ce"+
		"g\u0000\u0371\u0373\u0003\u0122\u0091\u0000\u0372\u0371\u0001\u0000\u0000"+
		"\u0000\u0372\u0373\u0001\u0000\u0000\u0000\u0373I\u0001\u0000\u0000\u0000"+
		"\u0374\u0375\u0005\u0013\u0000\u0000\u0375\u037c\u0003\u00ccf\u0000\u0376"+
		"\u0379\u0005\u0463\u0000\u0000\u0377\u037a\u0003\u0112\u0089\u0000\u0378"+
		"\u037a\u0003\u010e\u0087\u0000\u0379\u0377\u0001\u0000\u0000\u0000\u0379"+
		"\u0378\u0001\u0000\u0000\u0000\u0379\u037a\u0001\u0000\u0000\u0000\u037a"+
		"\u037b\u0001\u0000\u0000\u0000\u037b\u037d\u0005\u0464\u0000\u0000\u037c"+
		"\u0376\u0001\u0000\u0000\u0000\u037c\u037d\u0001\u0000\u0000\u0000\u037d"+
		"K\u0001\u0000\u0000\u0000\u037e\u0381\u0003d2\u0000\u037f\u0381\u0003"+
		"f3\u0000\u0380\u037e\u0001\u0000\u0000\u0000\u0380\u037f\u0001\u0000\u0000"+
		"\u0000\u0381M\u0001\u0000\u0000\u0000\u0382\u0383\u0005\u0186\u0000\u0000"+
		"\u0383\u0384\u0003\u010e\u0087\u0000\u0384O\u0001\u0000\u0000\u0000\u0385"+
		"\u038a\u0003h4\u0000\u0386\u038a\u0003j5\u0000\u0387\u038a\u0003l6\u0000"+
		"\u0388\u038a\u0003n7\u0000\u0389\u0385\u0001\u0000\u0000\u0000\u0389\u0386"+
		"\u0001\u0000\u0000\u0000\u0389\u0387\u0001\u0000\u0000\u0000\u0389\u0388"+
		"\u0001\u0000\u0000\u0000\u038aQ\u0001\u0000\u0000\u0000\u038b\u038d\u0005"+
		"R\u0000\u0000\u038c\u038e\u0007\u0010\u0000\u0000\u038d\u038c\u0001\u0000"+
		"\u0000\u0000\u038d\u038e\u0001\u0000\u0000\u0000\u038e\u0390\u0001\u0000"+
		"\u0000\u0000\u038f\u0391\u0005K\u0000\u0000\u0390\u038f\u0001\u0000\u0000"+
		"\u0000\u0390\u0391\u0001\u0000\u0000\u0000\u0391\u0393\u0001\u0000\u0000"+
		"\u0000\u0392\u0394\u0005T\u0000\u0000\u0393\u0392\u0001\u0000\u0000\u0000"+
		"\u0393\u0394\u0001\u0000\u0000\u0000\u0394\u0395\u0001\u0000\u0000\u0000"+
		"\u0395\u039c\u0003\u00ceg\u0000\u0396\u0397\u0005}\u0000\u0000\u0397\u0399"+
		"\u0005\u0463\u0000\u0000\u0398\u039a\u0003\u0108\u0084\u0000\u0399\u0398"+
		"\u0001\u0000\u0000\u0000\u0399\u039a\u0001\u0000\u0000\u0000\u039a\u039b"+
		"\u0001\u0000\u0000\u0000\u039b\u039d\u0005\u0464\u0000\u0000\u039c\u0396"+
		"\u0001\u0000\u0000\u0000\u039c\u039d\u0001\u0000\u0000\u0000\u039d\u03ae"+
		"\u0001\u0000\u0000\u0000\u039e\u039f\u0005\u0463\u0000\u0000\u039f\u03a0"+
		"\u0003\u0108\u0084\u0000\u03a0\u03a1\u0005\u0464\u0000\u0000\u03a1\u03a3"+
		"\u0001\u0000\u0000\u0000\u03a2\u039e\u0001\u0000\u0000\u0000\u03a2\u03a3"+
		"\u0001\u0000\u0000\u0000\u03a3\u03a4\u0001\u0000\u0000\u0000\u03a4\u03af"+
		"\u0003^/\u0000\u03a5\u03a6\u0005\u0095\u0000\u0000\u03a6\u03ab\u0003`"+
		"0\u0000\u03a7\u03a8\u0005\u0465\u0000\u0000\u03a8\u03aa\u0003`0\u0000"+
		"\u03a9\u03a7\u0001\u0000\u0000\u0000\u03aa\u03ad\u0001\u0000\u0000\u0000"+
		"\u03ab\u03a9\u0001\u0000\u0000\u0000\u03ab\u03ac\u0001\u0000\u0000\u0000"+
		"\u03ac\u03af\u0001\u0000\u0000\u0000\u03ad\u03ab\u0001\u0000\u0000\u0000"+
		"\u03ae\u03a2\u0001\u0000\u0000\u0000\u03ae\u03a5\u0001\u0000\u0000\u0000"+
		"\u03af\u03bc\u0001\u0000\u0000\u0000\u03b0\u03b1\u0005r\u0000\u0000\u03b1"+
		"\u03b2\u0005\u0188\u0000\u0000\u03b2\u03b3\u0005X\u0000\u0000\u03b3\u03b4"+
		"\u0005\u00b2\u0000\u0000\u03b4\u03b9\u0003`0\u0000\u03b5\u03b6\u0005\u0465"+
		"\u0000\u0000\u03b6\u03b8\u0003`0\u0000\u03b7\u03b5\u0001\u0000\u0000\u0000"+
		"\u03b8\u03bb\u0001\u0000\u0000\u0000\u03b9\u03b7\u0001\u0000\u0000\u0000"+
		"\u03b9\u03ba\u0001\u0000\u0000\u0000\u03ba\u03bd\u0001\u0000\u0000\u0000"+
		"\u03bb\u03b9\u0001\u0000\u0000\u0000\u03bc\u03b0\u0001\u0000\u0000\u0000"+
		"\u03bc\u03bd\u0001\u0000\u0000\u0000\u03bdS\u0001\u0000\u0000\u0000\u03be"+
		"\u03bf\u0005b\u0000\u0000\u03bf\u03c1\u0005\u017b\u0000\u0000\u03c0\u03c2"+
		"\u0007\u0011\u0000\u0000\u03c1\u03c0\u0001\u0000\u0000\u0000\u03c1\u03c2"+
		"\u0001\u0000\u0000\u0000\u03c2\u03c4\u0001\u0000\u0000\u0000\u03c3\u03c5"+
		"\u0005\u01cd\u0000\u0000\u03c4\u03c3\u0001\u0000\u0000\u0000\u03c4\u03c5"+
		"\u0001\u0000\u0000\u0000\u03c5\u03c6\u0001\u0000\u0000\u0000\u03c6\u03c7"+
		"\u0005O\u0000\u0000\u03c7\u03c9\u0005\u0472\u0000\u0000\u03c8\u03ca\u0007"+
		"\u0012\u0000\u0000\u03c9\u03c8\u0001\u0000\u0000\u0000\u03c9\u03ca\u0001"+
		"\u0000\u0000\u0000\u03ca\u03cb\u0001\u0000\u0000\u0000\u03cb\u03cc\u0005"+
		"T\u0000\u0000\u03cc\u03cd\u0005\u00a6\u0000\u0000\u03cd\u03d3\u0003\u00ce"+
		"g\u0000\u03ce\u03cf\u0005}\u0000\u0000\u03cf\u03d0\u0005\u0463\u0000\u0000"+
		"\u03d0\u03d1\u0003\u0108\u0084\u0000\u03d1\u03d2\u0005\u0464\u0000\u0000"+
		"\u03d2\u03d4\u0001\u0000\u0000\u0000\u03d3\u03ce\u0001\u0000\u0000\u0000"+
		"\u03d3\u03d4\u0001\u0000\u0000\u0000\u03d4\u03d8\u0001\u0000\u0000\u0000"+
		"\u03d5\u03d6\u0005\u0018\u0000\u0000\u03d6\u03d7\u0005\u0095\u0000\u0000"+
		"\u03d7\u03d9\u0003\u00dam\u0000\u03d8\u03d5\u0001\u0000\u0000\u0000\u03d8"+
		"\u03d9\u0001\u0000\u0000\u0000\u03d9\u03e0\u0001\u0000\u0000\u0000\u03da"+
		"\u03dc\u0007\u0013\u0000\u0000\u03db\u03dd\u0003\u0098L\u0000\u03dc\u03db"+
		"\u0001\u0000\u0000\u0000\u03dd\u03de\u0001\u0000\u0000\u0000\u03de\u03dc"+
		"\u0001\u0000\u0000\u0000\u03de\u03df\u0001\u0000\u0000\u0000\u03df\u03e1"+
		"\u0001\u0000\u0000\u0000\u03e0\u03da\u0001\u0000\u0000\u0000\u03e0\u03e1"+
		"\u0001\u0000\u0000\u0000\u03e1\u03e8\u0001\u0000\u0000\u0000\u03e2\u03e4"+
		"\u0005a\u0000\u0000\u03e3\u03e5\u0003\u009aM\u0000\u03e4\u03e3\u0001\u0000"+
		"\u0000\u0000\u03e5\u03e6\u0001\u0000\u0000\u0000\u03e6\u03e4\u0001\u0000"+
		"\u0000\u0000\u03e6\u03e7\u0001\u0000\u0000\u0000\u03e7\u03e9\u0001\u0000"+
		"\u0000\u0000\u03e8\u03e2\u0001\u0000\u0000\u0000\u03e8\u03e9\u0001\u0000"+
		"\u0000\u0000\u03e9\u03ee\u0001\u0000\u0000\u0000\u03ea\u03eb\u0005K\u0000"+
		"\u0000\u03eb\u03ec\u0003\u00eew\u0000\u03ec\u03ed\u0007\u0014\u0000\u0000"+
		"\u03ed\u03ef\u0001\u0000\u0000\u0000\u03ee\u03ea\u0001\u0000\u0000\u0000"+
		"\u03ee\u03ef\u0001\u0000\u0000\u0000\u03ef\u03fb\u0001\u0000\u0000\u0000"+
		"\u03f0\u03f1\u0005\u0463\u0000\u0000\u03f1\u03f6\u0003b1\u0000\u03f2\u03f3"+
		"\u0005\u0465\u0000\u0000\u03f3\u03f5\u0003b1\u0000\u03f4\u03f2\u0001\u0000"+
		"\u0000\u0000\u03f5\u03f8\u0001\u0000\u0000\u0000\u03f6\u03f4\u0001\u0000"+
		"\u0000\u0000\u03f6\u03f7\u0001\u0000\u0000\u0000\u03f7\u03f9\u0001\u0000"+
		"\u0000\u0000\u03f8\u03f6\u0001\u0000\u0000\u0000\u03f9\u03fa\u0005\u0464"+
		"\u0000\u0000\u03fa\u03fc\u0001\u0000\u0000\u0000\u03fb\u03f0\u0001\u0000"+
		"\u0000\u0000\u03fb\u03fc\u0001\u0000\u0000\u0000\u03fc\u0406\u0001\u0000"+
		"\u0000\u0000\u03fd\u03fe\u0005\u0095\u0000\u0000\u03fe\u0403\u0003`0\u0000"+
		"\u03ff\u0400\u0005\u0465\u0000\u0000\u0400\u0402\u0003`0\u0000\u0401\u03ff"+
		"\u0001\u0000\u0000\u0000\u0402\u0405\u0001\u0000\u0000\u0000\u0403\u0401"+
		"\u0001\u0000\u0000\u0000\u0403\u0404\u0001\u0000\u0000\u0000\u0404\u0407"+
		"\u0001\u0000\u0000\u0000\u0405\u0403\u0001\u0000\u0000\u0000\u0406\u03fd"+
		"\u0001\u0000\u0000\u0000\u0406\u0407\u0001\u0000\u0000\u0000\u0407U\u0001"+
		"\u0000\u0000\u0000\u0408\u0409\u0005b\u0000\u0000\u0409\u040b\u0005\u0299"+
		"\u0000\u0000\u040a\u040c\u0007\u0011\u0000\u0000\u040b\u040a\u0001\u0000"+
		"\u0000\u0000\u040b\u040c\u0001\u0000\u0000\u0000\u040c\u040e\u0001\u0000"+
		"\u0000\u0000\u040d\u040f\u0005\u01cd\u0000\u0000\u040e\u040d\u0001\u0000"+
		"\u0000\u0000\u040e\u040f\u0001\u0000\u0000\u0000\u040f\u0410\u0001\u0000"+
		"\u0000\u0000\u0410\u0411\u0005O\u0000\u0000\u0411\u0413\u0005\u0472\u0000"+
		"\u0000\u0412\u0414\u0007\u0012\u0000\u0000\u0413\u0412\u0001\u0000\u0000"+
		"\u0000\u0413\u0414\u0001\u0000\u0000\u0000\u0414\u0415\u0001\u0000\u0000"+
		"\u0000\u0415\u0416\u0005T\u0000\u0000\u0416\u0417\u0005\u00a6\u0000\u0000"+
		"\u0417\u041b\u0003\u00ceg\u0000\u0418\u0419\u0005\u0018\u0000\u0000\u0419"+
		"\u041a\u0005\u0095\u0000\u0000\u041a\u041c\u0003\u00dam\u0000\u041b\u0418"+
		"\u0001\u0000\u0000\u0000\u041b\u041c\u0001\u0000\u0000\u0000\u041c\u0423"+
		"\u0001\u0000\u0000\u0000\u041d\u041e\u0005\u0248\u0000\u0000\u041e\u041f"+
		"\u0005\u01b3\u0000\u0000\u041f\u0420\u0005\u0012\u0000\u0000\u0420\u0421"+
		"\u0005\u045c\u0000\u0000\u0421\u0422\u0005\u0472\u0000\u0000\u0422\u0424"+
		"\u0005\u045b\u0000\u0000\u0423\u041d\u0001\u0000\u0000\u0000\u0423\u0424"+
		"\u0001\u0000\u0000\u0000\u0424\u0429\u0001\u0000\u0000\u0000\u0425\u0426"+
		"\u0005K\u0000\u0000\u0426\u0427\u0003\u00eew\u0000\u0427\u0428\u0007\u0014"+
		"\u0000\u0000\u0428\u042a\u0001\u0000\u0000\u0000\u0429\u0425\u0001\u0000"+
		"\u0000\u0000\u0429\u042a\u0001\u0000\u0000\u0000\u042a\u0436\u0001\u0000"+
		"\u0000\u0000\u042b\u042c\u0005\u0463\u0000\u0000\u042c\u0431\u0003b1\u0000"+
		"\u042d\u042e\u0005\u0465\u0000\u0000\u042e\u0430\u0003b1\u0000\u042f\u042d"+
		"\u0001\u0000\u0000\u0000\u0430\u0433\u0001\u0000\u0000\u0000\u0431\u042f"+
		"\u0001\u0000\u0000\u0000\u0431\u0432\u0001\u0000\u0000\u0000\u0432\u0434"+
		"\u0001\u0000\u0000\u0000\u0433\u0431\u0001\u0000\u0000\u0000\u0434\u0435"+
		"\u0005\u0464\u0000\u0000\u0435\u0437\u0001\u0000\u0000\u0000\u0436\u042b"+
		"\u0001\u0000\u0000\u0000\u0436\u0437\u0001\u0000\u0000\u0000\u0437\u0441"+
		"\u0001\u0000\u0000\u0000\u0438\u0439\u0005\u0095\u0000\u0000\u0439\u043e"+
		"\u0003`0\u0000\u043a\u043b\u0005\u0465\u0000\u0000\u043b\u043d\u0003`"+
		"0\u0000\u043c\u043a\u0001\u0000\u0000\u0000\u043d\u0440\u0001\u0000\u0000"+
		"\u0000\u043e\u043c\u0001\u0000\u0000\u0000\u043e\u043f\u0001\u0000\u0000"+
		"\u0000\u043f\u0442\u0001\u0000\u0000\u0000\u0440\u043e\u0001\u0000\u0000"+
		"\u0000\u0441\u0438\u0001\u0000\u0000\u0000\u0441\u0442\u0001\u0000\u0000"+
		"\u0000\u0442W\u0001\u0000\u0000\u0000\u0443\u0445\u0005\u0089\u0000\u0000"+
		"\u0444\u0446\u0007\u0015\u0000\u0000\u0445\u0444\u0001\u0000\u0000\u0000"+
		"\u0445\u0446\u0001\u0000\u0000\u0000\u0446\u0448\u0001\u0000\u0000\u0000"+
		"\u0447\u0449\u0005T\u0000\u0000\u0448\u0447\u0001\u0000\u0000\u0000\u0448"+
		"\u0449\u0001\u0000\u0000\u0000\u0449\u044a\u0001\u0000\u0000\u0000\u044a"+
		"\u0450\u0003\u00ceg\u0000\u044b\u044c\u0005}\u0000\u0000\u044c\u044d\u0005"+
		"\u0463\u0000\u0000\u044d\u044e\u0003\u0108\u0084\u0000\u044e\u044f\u0005"+
		"\u0464\u0000\u0000\u044f\u0451\u0001\u0000\u0000\u0000\u0450\u044b\u0001"+
		"\u0000\u0000\u0000\u0450\u0451\u0001\u0000\u0000\u0000\u0451\u0462\u0001"+
		"\u0000\u0000\u0000\u0452\u0453\u0005\u0463\u0000\u0000\u0453\u0454\u0003"+
		"\u0108\u0084\u0000\u0454\u0455\u0005\u0464\u0000\u0000\u0455\u0457\u0001"+
		"\u0000\u0000\u0000\u0456\u0452\u0001\u0000\u0000\u0000\u0456\u0457\u0001"+
		"\u0000\u0000\u0000\u0457\u0458\u0001\u0000\u0000\u0000\u0458\u0463\u0003"+
		"^/\u0000\u0459\u045a\u0005\u0095\u0000\u0000\u045a\u045f\u0003`0\u0000"+
		"\u045b\u045c\u0005\u0465\u0000\u0000\u045c\u045e\u0003`0\u0000\u045d\u045b"+
		"\u0001\u0000\u0000\u0000\u045e\u0461\u0001\u0000\u0000\u0000\u045f\u045d"+
		"\u0001\u0000\u0000\u0000\u045f\u0460\u0001\u0000\u0000\u0000\u0460\u0463"+
		"\u0001\u0000\u0000\u0000\u0461\u045f\u0001\u0000\u0000\u0000\u0462\u0456"+
		"\u0001\u0000\u0000\u0000\u0462\u0459\u0001\u0000\u0000\u0000\u0463Y\u0001"+
		"\u0000\u0000\u0000\u0464\u0490\u0003\u0088D\u0000\u0465\u0490\u0003\u0084"+
		"B\u0000\u0466\u0468\u0003\u008aE\u0000\u0467\u0469\u0003\u008eG\u0000"+
		"\u0468\u0467\u0001\u0000\u0000\u0000\u0469\u046a\u0001\u0000\u0000\u0000"+
		"\u046a\u0468\u0001\u0000\u0000\u0000\u046a\u046b\u0001\u0000\u0000\u0000"+
		"\u046b\u0474\u0001\u0000\u0000\u0000\u046c\u046e\u0005\u00ae\u0000\u0000"+
		"\u046d\u046f\u0007\u0016\u0000\u0000\u046e\u046d\u0001\u0000\u0000\u0000"+
		"\u046e\u046f\u0001\u0000\u0000\u0000\u046f\u0472\u0001\u0000\u0000\u0000"+
		"\u0470\u0473\u0003\u0088D\u0000\u0471\u0473\u0003\u0084B\u0000\u0472\u0470"+
		"\u0001\u0000\u0000\u0000\u0472\u0471\u0001\u0000\u0000\u0000\u0473\u0475"+
		"\u0001\u0000\u0000\u0000\u0474\u046c\u0001\u0000\u0000\u0000\u0474\u0475"+
		"\u0001\u0000\u0000\u0000\u0475\u0477\u0001\u0000\u0000\u0000\u0476\u0478"+
		"\u0003t:\u0000\u0477\u0476\u0001\u0000\u0000\u0000\u0477\u0478\u0001\u0000"+
		"\u0000\u0000\u0478\u047a\u0001\u0000\u0000\u0000\u0479\u047b\u0003\u00a6"+
		"S\u0000\u047a\u047b\u0001\u0000\u0000\u0000\u047a\u0479\u0001\u0000\u0000"+
		"\u0000\u047b\u0490\u0001\u0000\u0000\u0000\u047c\u047e\u0003\u0086C\u0000"+
		"\u047d\u047f\u0003\u008cF\u0000\u047e\u047d\u0001\u0000\u0000\u0000\u047f"+
		"\u0480\u0001\u0000\u0000\u0000\u0480\u047e\u0001\u0000\u0000\u0000\u0480"+
		"\u0481\u0001\u0000\u0000\u0000\u0481\u0487\u0001\u0000\u0000\u0000\u0482"+
		"\u0484\u0005\u00ae\u0000\u0000\u0483\u0485\u0007\u0016\u0000\u0000\u0484"+
		"\u0483\u0001\u0000\u0000\u0000\u0484\u0485\u0001\u0000\u0000\u0000\u0485"+
		"\u0486\u0001\u0000\u0000\u0000\u0486\u0488\u0003\u0084B\u0000\u0487\u0482"+
		"\u0001\u0000\u0000\u0000\u0487\u0488\u0001\u0000\u0000\u0000\u0488\u048a"+
		"\u0001\u0000\u0000\u0000\u0489\u048b\u0003t:\u0000\u048a\u0489\u0001\u0000"+
		"\u0000\u0000\u048a\u048b\u0001\u0000\u0000\u0000\u048b\u048d\u0001\u0000"+
		"\u0000\u0000\u048c\u048e\u0003\u00a6S\u0000\u048d\u048c\u0001\u0000\u0000"+
		"\u0000\u048d\u048e\u0001\u0000\u0000\u0000\u048e\u0490\u0001\u0000\u0000"+
		"\u0000\u048f\u0464\u0001\u0000\u0000\u0000\u048f\u0465\u0001\u0000\u0000"+
		"\u0000\u048f\u0466\u0001\u0000\u0000\u0000\u048f\u047c\u0001\u0000\u0000"+
		"\u0000\u0490[\u0001\u0000\u0000\u0000\u0491\u0494\u0003p8\u0000\u0492"+
		"\u0494\u0003r9\u0000\u0493\u0491\u0001\u0000\u0000\u0000\u0493\u0492\u0001"+
		"\u0000\u0000\u0000\u0494]\u0001\u0000\u0000\u0000\u0495\u04a8\u0003Z-"+
		"\u0000\u0496\u0497\u0007\u0017\u0000\u0000\u0497\u0499\u0005\u0463\u0000"+
		"\u0000\u0498\u049a\u0003\u0110\u0088\u0000\u0499\u0498\u0001\u0000\u0000"+
		"\u0000\u0499\u049a\u0001\u0000\u0000\u0000\u049a\u049b\u0001\u0000\u0000"+
		"\u0000\u049b\u04a4\u0005\u0464\u0000\u0000\u049c\u049d\u0005\u0465\u0000"+
		"\u0000\u049d\u049f\u0005\u0463\u0000\u0000\u049e\u04a0\u0003\u0110\u0088"+
		"\u0000\u049f\u049e\u0001\u0000\u0000\u0000\u049f\u04a0\u0001\u0000\u0000"+
		"\u0000\u04a0\u04a1\u0001\u0000\u0000\u0000\u04a1\u04a3\u0005\u0464\u0000"+
		"\u0000\u04a2\u049c\u0001\u0000\u0000\u0000\u04a3\u04a6\u0001\u0000\u0000"+
		"\u0000\u04a4\u04a2\u0001\u0000\u0000\u0000\u04a4\u04a5\u0001\u0000\u0000"+
		"\u0000\u04a5\u04a8\u0001\u0000\u0000\u0000\u04a6\u04a4\u0001\u0000\u0000"+
		"\u0000\u04a7\u0495\u0001\u0000\u0000\u0000\u04a7\u0496\u0001\u0000\u0000"+
		"\u0000\u04a8_\u0001\u0000\u0000\u0000\u04a9\u04aa\u0003\u00d2i\u0000\u04aa"+
		"\u04ad\u0005\u045a\u0000\u0000\u04ab\u04ae\u0003\u014a\u00a5\u0000\u04ac"+
		"\u04ae\u0005(\u0000\u0000\u04ad\u04ab\u0001\u0000\u0000\u0000\u04ad\u04ac"+
		"\u0001\u0000\u0000\u0000\u04aea\u0001\u0000\u0000\u0000\u04af\u04b2\u0003"+
		"\u00e8t\u0000\u04b0\u04b2\u0005\u047f\u0000\u0000\u04b1\u04af\u0001\u0000"+
		"\u0000\u0000\u04b1\u04b0\u0001\u0000\u0000\u0000\u04b2c\u0001\u0000\u0000"+
		"\u0000\u04b3\u04b5\u0005*\u0000\u0000\u04b4\u04b6\u0005f\u0000\u0000\u04b5"+
		"\u04b4\u0001\u0000\u0000\u0000\u04b5\u04b6\u0001\u0000\u0000\u0000\u04b6"+
		"\u04b8\u0001\u0000\u0000\u0000\u04b7\u04b9\u0005\u0228\u0000\u0000\u04b8"+
		"\u04b7\u0001\u0000\u0000\u0000\u04b8\u04b9\u0001\u0000\u0000\u0000\u04b9"+
		"\u04bb\u0001\u0000\u0000\u0000\u04ba\u04bc\u0005K\u0000\u0000\u04bb\u04ba"+
		"\u0001\u0000\u0000\u0000\u04bb\u04bc\u0001\u0000\u0000\u0000\u04bc\u04bd"+
		"\u0001\u0000\u0000\u0000\u04bd\u04be\u0005A\u0000\u0000\u04be\u04c4\u0003"+
		"\u00ceg\u0000\u04bf\u04c0\u0005}\u0000\u0000\u04c0\u04c1\u0005\u0463\u0000"+
		"\u0000\u04c1\u04c2\u0003\u0108\u0084\u0000\u04c2\u04c3\u0005\u0464\u0000"+
		"\u0000\u04c3\u04c5\u0001\u0000\u0000\u0000\u04c4\u04bf\u0001\u0000\u0000"+
		"\u0000\u04c4\u04c5\u0001\u0000\u0000\u0000\u04c5\u04c8\u0001\u0000\u0000"+
		"\u0000\u04c6\u04c7\u0005\u00b8\u0000\u0000\u04c7\u04c9\u0003\u014a\u00a5"+
		"\u0000\u04c8\u04c6\u0001\u0000\u0000\u0000\u04c8\u04c9\u0001\u0000\u0000"+
		"\u0000\u04c9\u04cb\u0001\u0000\u0000\u0000\u04ca\u04cc\u0003t:\u0000\u04cb"+
		"\u04ca\u0001\u0000\u0000\u0000\u04cb\u04cc\u0001\u0000\u0000\u0000\u04cc"+
		"\u04cf\u0001\u0000\u0000\u0000\u04cd\u04ce\u0005_\u0000\u0000\u04ce\u04d0"+
		"\u0003\u00a8T\u0000\u04cf\u04cd\u0001\u0000\u0000\u0000\u04cf\u04d0\u0001"+
		"\u0000\u0000\u0000\u04d0e\u0001\u0000\u0000\u0000\u04d1\u04d3\u0005*\u0000"+
		"\u0000\u04d2\u04d4\u0005f\u0000\u0000\u04d3\u04d2\u0001\u0000\u0000\u0000"+
		"\u04d3\u04d4\u0001\u0000\u0000\u0000\u04d4\u04d6\u0001\u0000\u0000\u0000"+
		"\u04d5\u04d7\u0005\u0228\u0000\u0000\u04d6\u04d5\u0001\u0000\u0000\u0000"+
		"\u04d6\u04d7\u0001\u0000\u0000\u0000\u04d7\u04d9\u0001\u0000\u0000\u0000"+
		"\u04d8\u04da\u0005K\u0000\u0000\u04d9\u04d8\u0001\u0000\u0000\u0000\u04d9"+
		"\u04da\u0001\u0000\u0000\u0000\u04da\u0502\u0001\u0000\u0000\u0000\u04db"+
		"\u04de\u0003\u00ceg\u0000\u04dc\u04dd\u0005\u0462\u0000\u0000\u04dd\u04df"+
		"\u0005\u0453\u0000\u0000\u04de\u04dc\u0001\u0000\u0000\u0000\u04de\u04df"+
		"\u0001\u0000\u0000\u0000\u04df\u04e8\u0001\u0000\u0000\u0000\u04e0\u04e1"+
		"\u0005\u0465\u0000\u0000\u04e1\u04e4\u0003\u00ceg\u0000\u04e2\u04e3\u0005"+
		"\u0462\u0000\u0000\u04e3\u04e5\u0005\u0453\u0000\u0000\u04e4\u04e2\u0001"+
		"\u0000\u0000\u0000\u04e4\u04e5\u0001\u0000\u0000\u0000\u04e5\u04e7\u0001"+
		"\u0000\u0000\u0000\u04e6\u04e0\u0001\u0000\u0000\u0000\u04e7\u04ea\u0001"+
		"\u0000\u0000\u0000\u04e8\u04e6\u0001\u0000\u0000\u0000\u04e8\u04e9\u0001"+
		"\u0000\u0000\u0000\u04e9\u04eb\u0001\u0000\u0000\u0000\u04ea\u04e8\u0001"+
		"\u0000\u0000\u0000\u04eb\u04ec\u0005A\u0000\u0000\u04ec\u04ed\u0003x<"+
		"\u0000\u04ed\u0503\u0001\u0000\u0000\u0000\u04ee\u04ef\u0005A\u0000\u0000"+
		"\u04ef\u04f2\u0003\u00ceg\u0000\u04f0\u04f1\u0005\u0462\u0000\u0000\u04f1"+
		"\u04f3\u0005\u0453\u0000\u0000\u04f2\u04f0\u0001\u0000\u0000\u0000\u04f2"+
		"\u04f3\u0001\u0000\u0000\u0000\u04f3\u04fc\u0001\u0000\u0000\u0000\u04f4"+
		"\u04f5\u0005\u0465\u0000\u0000\u04f5\u04f8\u0003\u00ceg\u0000\u04f6\u04f7"+
		"\u0005\u0462\u0000\u0000\u04f7\u04f9\u0005\u0453\u0000\u0000\u04f8\u04f6"+
		"\u0001\u0000\u0000\u0000\u04f8\u04f9\u0001\u0000\u0000\u0000\u04f9\u04fb"+
		"\u0001\u0000\u0000\u0000\u04fa\u04f4\u0001\u0000\u0000\u0000\u04fb\u04fe"+
		"\u0001\u0000\u0000\u0000\u04fc\u04fa\u0001\u0000\u0000\u0000\u04fc\u04fd"+
		"\u0001\u0000\u0000\u0000\u04fd\u04ff\u0001\u0000\u0000\u0000\u04fe\u04fc"+
		"\u0001\u0000\u0000\u0000\u04ff\u0500\u0005\u00b5\u0000\u0000\u0500\u0501"+
		"\u0003x<\u0000\u0501\u0503\u0001\u0000\u0000\u0000\u0502\u04db\u0001\u0000"+
		"\u0000\u0000\u0502\u04ee\u0001\u0000\u0000\u0000\u0503\u0506\u0001\u0000"+
		"\u0000\u0000\u0504\u0505\u0005\u00b8\u0000\u0000\u0505\u0507\u0003\u014a"+
		"\u00a5\u0000\u0506\u0504\u0001\u0000\u0000\u0000\u0506\u0507\u0001\u0000"+
		"\u0000\u0000\u0507g\u0001\u0000\u0000\u0000\u0508\u0509\u0005\u01ae\u0000"+
		"\u0000\u0509\u050a\u0003\u00ceg\u0000\u050a\u050f\u0005\u020e\u0000\u0000"+
		"\u050b\u050d\u0005\f\u0000\u0000\u050c\u050b\u0001\u0000\u0000\u0000\u050c"+
		"\u050d\u0001\u0000\u0000\u0000\u050d\u050e\u0001\u0000\u0000\u0000\u050e"+
		"\u0510\u0003\u00e8t\u0000\u050f\u050c\u0001\u0000\u0000\u0000\u050f\u0510"+
		"\u0001\u0000\u0000\u0000\u0510i\u0001\u0000\u0000\u0000\u0511\u0512\u0005"+
		"\u01ae\u0000\u0000\u0512\u0513\u0003\u00ceg\u0000\u0513\u0514\u0005\u0082"+
		"\u0000\u0000\u0514\u051b\u0003\u00e8t\u0000\u0515\u0516\u0003\u0152\u00a9"+
		"\u0000\u0516\u0517\u0005\u0463\u0000\u0000\u0517\u0518\u0003\u0112\u0089"+
		"\u0000\u0518\u0519\u0005\u0464\u0000\u0000\u0519\u051c\u0001\u0000\u0000"+
		"\u0000\u051a\u051c\u0007\u0018\u0000\u0000\u051b\u0515\u0001\u0000\u0000"+
		"\u0000\u051b\u051a\u0001\u0000\u0000\u0000\u051c\u051f\u0001\u0000\u0000"+
		"\u0000\u051d\u051e\u0005\u00b8\u0000\u0000\u051e\u0520\u0003\u014a\u00a5"+
		"\u0000\u051f\u051d\u0001\u0000\u0000\u0000\u051f\u0520\u0001\u0000\u0000"+
		"\u0000\u0520\u0523\u0001\u0000\u0000\u0000\u0521\u0522\u0005_\u0000\u0000"+
		"\u0522\u0524\u0003\u00a8T\u0000\u0523\u0521\u0001\u0000\u0000\u0000\u0523"+
		"\u0524\u0001\u0000\u0000\u0000\u0524k\u0001\u0000\u0000\u0000\u0525\u0526"+
		"\u0005\u01ae\u0000\u0000\u0526\u0527\u0003\u00ceg\u0000\u0527\u0528\u0005"+
		"\u0082\u0000\u0000\u0528\u052b\u0007\u0019\u0000\u0000\u0529\u052a\u0005"+
		"\u00b8\u0000\u0000\u052a\u052c\u0003\u014a\u00a5\u0000\u052b\u0529\u0001"+
		"\u0000\u0000\u0000\u052b\u052c\u0001\u0000\u0000\u0000\u052c\u052f\u0001"+
		"\u0000\u0000\u0000\u052d\u052e\u0005_\u0000\u0000\u052e\u0530\u0003\u00a8"+
		"T\u0000\u052f\u052d\u0001\u0000\u0000\u0000\u052f\u0530\u0001\u0000\u0000"+
		"\u0000\u0530m\u0001\u0000\u0000\u0000\u0531\u0532\u0005\u01ae\u0000\u0000"+
		"\u0532\u0533\u0003\u00ceg\u0000\u0533\u0534\u0005\u0160\u0000\u0000\u0534"+
		"o\u0001\u0000\u0000\u0000\u0535\u0537\u0005\u00b2\u0000\u0000\u0536\u0538"+
		"\u0005f\u0000\u0000\u0537\u0536\u0001\u0000\u0000\u0000\u0537\u0538\u0001"+
		"\u0000\u0000\u0000\u0538\u053a\u0001\u0000\u0000\u0000\u0539\u053b\u0005"+
		"K\u0000\u0000\u053a\u0539\u0001\u0000\u0000\u0000\u053a\u053b\u0001\u0000"+
		"\u0000\u0000\u053b\u053c\u0001\u0000\u0000\u0000\u053c\u0541\u0003\u00ce"+
		"g\u0000\u053d\u053f\u0005\f\u0000\u0000\u053e\u053d\u0001\u0000\u0000"+
		"\u0000\u053e\u053f\u0001\u0000\u0000\u0000\u053f\u0540\u0001\u0000\u0000"+
		"\u0000\u0540\u0542\u0003\u00e8t\u0000\u0541\u053e\u0001\u0000\u0000\u0000"+
		"\u0541\u0542\u0001\u0000\u0000\u0000\u0542\u0543\u0001\u0000\u0000\u0000"+
		"\u0543\u0544\u0005\u0095\u0000\u0000\u0544\u0549\u0003`0\u0000\u0545\u0546"+
		"\u0005\u0465\u0000\u0000\u0546\u0548\u0003`0\u0000\u0547\u0545\u0001\u0000"+
		"\u0000\u0000\u0548\u054b\u0001\u0000\u0000\u0000\u0549\u0547\u0001\u0000"+
		"\u0000\u0000\u0549\u054a\u0001\u0000\u0000\u0000\u054a\u054e\u0001\u0000"+
		"\u0000\u0000\u054b\u0549\u0001\u0000\u0000\u0000\u054c\u054d\u0005\u00b8"+
		"\u0000\u0000\u054d\u054f\u0003\u014a\u00a5\u0000\u054e\u054c\u0001\u0000"+
		"\u0000\u0000\u054e\u054f\u0001\u0000\u0000\u0000\u054f\u0551\u0001\u0000"+
		"\u0000\u0000\u0550\u0552\u0003t:\u0000\u0551\u0550\u0001\u0000\u0000\u0000"+
		"\u0551\u0552\u0001\u0000\u0000\u0000\u0552\u0554\u0001\u0000\u0000\u0000"+
		"\u0553\u0555\u0003\u00a6S\u0000\u0554\u0553\u0001\u0000\u0000\u0000\u0554"+
		"\u0555\u0001\u0000\u0000\u0000\u0555q\u0001\u0000\u0000\u0000\u0556\u0558"+
		"\u0005\u00b2\u0000\u0000\u0557\u0559\u0005f\u0000\u0000\u0558\u0557\u0001"+
		"\u0000\u0000\u0000\u0558\u0559\u0001\u0000\u0000\u0000\u0559\u055b\u0001"+
		"\u0000\u0000\u0000\u055a\u055c\u0005K\u0000\u0000\u055b\u055a\u0001\u0000"+
		"\u0000\u0000\u055b\u055c\u0001\u0000\u0000\u0000\u055c\u055d\u0001\u0000"+
		"\u0000\u0000\u055d\u055e\u0003x<\u0000\u055e\u055f\u0005\u0095\u0000\u0000"+
		"\u055f\u0564\u0003`0\u0000\u0560\u0561\u0005\u0465\u0000\u0000\u0561\u0563"+
		"\u0003`0\u0000\u0562\u0560\u0001\u0000\u0000\u0000\u0563\u0566\u0001\u0000"+
		"\u0000\u0000\u0564\u0562\u0001\u0000\u0000\u0000\u0564\u0565\u0001\u0000"+
		"\u0000\u0000\u0565\u0569\u0001\u0000\u0000\u0000\u0566\u0564\u0001\u0000"+
		"\u0000\u0000\u0567\u0568\u0005\u00b8\u0000\u0000\u0568\u056a\u0003\u014a"+
		"\u00a5\u0000\u0569\u0567\u0001\u0000\u0000\u0000\u0569\u056a\u0001\u0000"+
		"\u0000\u0000\u056as\u0001\u0000\u0000\u0000\u056b\u056c\u0005x\u0000\u0000"+
		"\u056c\u056d\u0005\u0012\u0000\u0000\u056d\u0572\u0003v;\u0000\u056e\u056f"+
		"\u0005\u0465\u0000\u0000\u056f\u0571\u0003v;\u0000\u0570\u056e\u0001\u0000"+
		"\u0000\u0000\u0571\u0574\u0001\u0000\u0000\u0000\u0572\u0570\u0001\u0000"+
		"\u0000\u0000\u0572\u0573\u0001\u0000\u0000\u0000\u0573u\u0001\u0000\u0000"+
		"\u0000\u0574\u0572\u0001\u0000\u0000\u0000\u0575\u0577\u0003\u014a\u00a5"+
		"\u0000\u0576\u0578\u0007\u001a\u0000\u0000\u0577\u0576\u0001\u0000\u0000"+
		"\u0000\u0577\u0578\u0001\u0000\u0000\u0000\u0578w\u0001\u0000\u0000\u0000"+
		"\u0579\u057e\u0003z=\u0000\u057a\u057b\u0005\u0465\u0000\u0000\u057b\u057d"+
		"\u0003z=\u0000\u057c\u057a\u0001\u0000\u0000\u0000\u057d\u0580\u0001\u0000"+
		"\u0000\u0000\u057e\u057c\u0001\u0000\u0000\u0000\u057e\u057f\u0001\u0000"+
		"\u0000\u0000\u057fy\u0001\u0000\u0000\u0000\u0580\u057e\u0001\u0000\u0000"+
		"\u0000\u0581\u0585\u0003|>\u0000\u0582\u0584\u0003\u0082A\u0000\u0583"+
		"\u0582\u0001\u0000\u0000\u0000\u0584\u0587\u0001\u0000\u0000\u0000\u0585"+
		"\u0583\u0001\u0000\u0000\u0000\u0585\u0586\u0001\u0000\u0000\u0000\u0586"+
		"\u0593\u0001\u0000\u0000\u0000\u0587\u0585\u0001\u0000\u0000\u0000\u0588"+
		"\u0589\u0005\u0463\u0000\u0000\u0589\u058d\u0003|>\u0000\u058a\u058c\u0003"+
		"\u0082A\u0000\u058b\u058a\u0001\u0000\u0000\u0000\u058c\u058f\u0001\u0000"+
		"\u0000\u0000\u058d\u058b\u0001\u0000\u0000\u0000\u058d\u058e\u0001\u0000"+
		"\u0000\u0000\u058e\u0590\u0001\u0000\u0000\u0000\u058f\u058d\u0001\u0000"+
		"\u0000\u0000\u0590\u0591\u0005\u0464\u0000\u0000\u0591\u0593\u0001\u0000"+
		"\u0000\u0000\u0592\u0581\u0001\u0000\u0000\u0000\u0592\u0588\u0001\u0000"+
		"\u0000\u0000\u0593{\u0001\u0000\u0000\u0000\u0594\u059a\u0003\u00ceg\u0000"+
		"\u0595\u0596\u0005}\u0000\u0000\u0596\u0597\u0005\u0463\u0000\u0000\u0597"+
		"\u0598\u0003\u0108\u0084\u0000\u0598\u0599\u0005\u0464\u0000\u0000\u0599"+
		"\u059b\u0001\u0000\u0000\u0000\u059a\u0595\u0001\u0000\u0000\u0000\u059a"+
		"\u059b\u0001\u0000\u0000\u0000\u059b\u05a0\u0001\u0000\u0000\u0000\u059c"+
		"\u059e\u0005\f\u0000\u0000\u059d\u059c\u0001\u0000\u0000\u0000\u059d\u059e"+
		"\u0001\u0000\u0000\u0000\u059e\u059f\u0001\u0000\u0000\u0000\u059f\u05a1"+
		"\u0003\u00e8t\u0000\u05a0\u059d\u0001\u0000\u0000\u0000\u05a0\u05a1\u0001"+
		"\u0000\u0000\u0000\u05a1\u05aa\u0001\u0000\u0000\u0000\u05a2\u05a7\u0003"+
		"~?\u0000\u05a3\u05a4\u0005\u0465\u0000\u0000\u05a4\u05a6\u0003~?\u0000"+
		"\u05a5\u05a3\u0001\u0000\u0000\u0000\u05a6\u05a9\u0001\u0000\u0000\u0000"+
		"\u05a7\u05a5\u0001\u0000\u0000\u0000\u05a7\u05a8\u0001\u0000\u0000\u0000"+
		"\u05a8\u05ab\u0001\u0000\u0000\u0000\u05a9\u05a7\u0001\u0000\u0000\u0000"+
		"\u05aa\u05a2\u0001\u0000\u0000\u0000\u05aa\u05ab\u0001\u0000\u0000\u0000"+
		"\u05ab\u05bd\u0001\u0000\u0000\u0000\u05ac\u05b2\u0003Z-\u0000\u05ad\u05ae"+
		"\u0005\u0463\u0000\u0000\u05ae\u05af\u0003Z-\u0000\u05af\u05b0\u0005\u0464"+
		"\u0000\u0000\u05b0\u05b2\u0001\u0000\u0000\u0000\u05b1\u05ac\u0001\u0000"+
		"\u0000\u0000\u05b1\u05ad\u0001\u0000\u0000\u0000\u05b2\u05b4\u0001\u0000"+
		"\u0000\u0000\u05b3\u05b5\u0005\f\u0000\u0000\u05b4\u05b3\u0001\u0000\u0000"+
		"\u0000\u05b4\u05b5\u0001\u0000\u0000\u0000\u05b5\u05b6\u0001\u0000\u0000"+
		"\u0000\u05b6\u05b7\u0003\u00e8t\u0000\u05b7\u05bd\u0001\u0000\u0000\u0000"+
		"\u05b8\u05b9\u0005\u0463\u0000\u0000\u05b9\u05ba\u0003x<\u0000\u05ba\u05bb"+
		"\u0005\u0464\u0000\u0000\u05bb\u05bd\u0001\u0000\u0000\u0000\u05bc\u0594"+
		"\u0001\u0000\u0000\u0000\u05bc\u05b1\u0001\u0000\u0000\u0000\u05bc\u05b8"+
		"\u0001\u0000\u0000\u0000\u05bd}\u0001\u0000\u0000\u0000\u05be\u05bf\u0007"+
		"\u001b\u0000\u0000\u05bf\u05c2\u0007\u000b\u0000\u0000\u05c0\u05c1\u0005"+
		">\u0000\u0000\u05c1\u05c3\u0003\u0080@\u0000\u05c2\u05c0\u0001\u0000\u0000"+
		"\u0000\u05c2\u05c3\u0001\u0000\u0000\u0000\u05c3\u05c4\u0001\u0000\u0000"+
		"\u0000\u05c4\u05c5\u0005\u0463\u0000\u0000\u05c5\u05c6\u0003\u0108\u0084"+
		"\u0000\u05c6\u05c7\u0005\u0464\u0000\u0000\u05c7\u007f\u0001\u0000\u0000"+
		"\u0000\u05c8\u05ce\u0005W\u0000\u0000\u05c9\u05ca\u0005x\u0000\u0000\u05ca"+
		"\u05ce\u0005\u0012\u0000\u0000\u05cb\u05cc\u0005F\u0000\u0000\u05cc\u05ce"+
		"\u0005\u0012\u0000\u0000\u05cd\u05c8\u0001\u0000\u0000\u0000\u05cd\u05c9"+
		"\u0001\u0000\u0000\u0000\u05cd\u05cb\u0001\u0000\u0000\u0000\u05ce\u0081"+
		"\u0001\u0000\u0000\u0000\u05cf\u05d1\u0007\u001c\u0000\u0000\u05d0\u05cf"+
		"\u0001\u0000\u0000\u0000\u05d0\u05d1\u0001\u0000\u0000\u0000\u05d1\u05d2"+
		"\u0001\u0000\u0000\u0000\u05d2\u05d3\u0005W\u0000\u0000\u05d3\u05db\u0003"+
		"|>\u0000\u05d4\u05d5\u0005r\u0000\u0000\u05d5\u05dc\u0003\u014a\u00a5"+
		"\u0000\u05d6\u05d7\u0005\u00b5\u0000\u0000\u05d7\u05d8\u0005\u0463\u0000"+
		"\u0000\u05d8\u05d9\u0003\u0108\u0084\u0000\u05d9\u05da\u0005\u0464\u0000"+
		"\u0000\u05da\u05dc\u0001\u0000\u0000\u0000\u05db\u05d4\u0001\u0000\u0000"+
		"\u0000\u05db\u05d6\u0001\u0000\u0000\u0000\u05db\u05dc\u0001\u0000\u0000"+
		"\u0000\u05dc\u05fc\u0001\u0000\u0000\u0000\u05dd\u05de\u0005\u00a5\u0000"+
		"\u0000\u05de\u05e1\u0003|>\u0000\u05df\u05e0\u0005r\u0000\u0000\u05e0"+
		"\u05e2\u0003\u014a\u00a5\u0000\u05e1\u05df\u0001\u0000\u0000\u0000\u05e1"+
		"\u05e2\u0001\u0000\u0000\u0000\u05e2\u05fc\u0001\u0000\u0000\u0000\u05e3"+
		"\u05e5\u0007\u001d\u0000\u0000\u05e4\u05e6\u0005{\u0000\u0000\u05e5\u05e4"+
		"\u0001\u0000\u0000\u0000\u05e5\u05e6\u0001\u0000\u0000\u0000\u05e6\u05e7"+
		"\u0001\u0000\u0000\u0000\u05e7\u05e8\u0005W\u0000\u0000\u05e8\u05f0\u0003"+
		"|>\u0000\u05e9\u05ea\u0005r\u0000\u0000\u05ea\u05f1\u0003\u014a\u00a5"+
		"\u0000\u05eb\u05ec\u0005\u00b5\u0000\u0000\u05ec\u05ed\u0005\u0463\u0000"+
		"\u0000\u05ed\u05ee\u0003\u0108\u0084\u0000\u05ee\u05ef\u0005\u0464\u0000"+
		"\u0000\u05ef\u05f1\u0001\u0000\u0000\u0000\u05f0\u05e9\u0001\u0000\u0000"+
		"\u0000\u05f0\u05eb\u0001\u0000\u0000\u0000\u05f1\u05fc\u0001\u0000\u0000"+
		"\u0000\u05f2\u05f7\u0005m\u0000\u0000\u05f3\u05f5\u0007\u001d\u0000\u0000"+
		"\u05f4\u05f6\u0005{\u0000\u0000\u05f5\u05f4\u0001\u0000\u0000\u0000\u05f5"+
		"\u05f6\u0001\u0000\u0000\u0000\u05f6\u05f8\u0001\u0000\u0000\u0000\u05f7"+
		"\u05f3\u0001\u0000\u0000\u0000\u05f7\u05f8\u0001\u0000\u0000\u0000\u05f8"+
		"\u05f9\u0001\u0000\u0000\u0000\u05f9\u05fa\u0005W\u0000\u0000\u05fa\u05fc"+
		"\u0003|>\u0000\u05fb\u05d0\u0001\u0000\u0000\u0000\u05fb\u05dd\u0001\u0000"+
		"\u0000\u0000\u05fb\u05e3\u0001\u0000\u0000\u0000\u05fb\u05f2\u0001\u0000"+
		"\u0000\u0000\u05fc\u0083\u0001\u0000\u0000\u0000\u05fd\u05fe\u0005\u0463"+
		"\u0000\u0000\u05fe\u05ff\u0003\u0088D\u0000\u05ff\u0600\u0005\u0464\u0000"+
		"\u0000\u0600\u0606\u0001\u0000\u0000\u0000\u0601\u0602\u0005\u0463\u0000"+
		"\u0000\u0602\u0603\u0003\u0084B\u0000\u0603\u0604\u0005\u0464\u0000\u0000"+
		"\u0604\u0606\u0001\u0000\u0000\u0000\u0605\u05fd\u0001\u0000\u0000\u0000"+
		"\u0605\u0601\u0001\u0000\u0000\u0000\u0606\u0085\u0001\u0000\u0000\u0000"+
		"\u0607\u0608\u0005\u0463\u0000\u0000\u0608\u0609\u0003\u008aE\u0000\u0609"+
		"\u060a\u0005\u0464\u0000\u0000\u060a\u0610\u0001\u0000\u0000\u0000\u060b"+
		"\u060c\u0005\u0463\u0000\u0000\u060c\u060d\u0003\u0086C\u0000\u060d\u060e"+
		"\u0005\u0464\u0000\u0000\u060e\u0610\u0001\u0000\u0000\u0000\u060f\u0607"+
		"\u0001\u0000\u0000\u0000\u060f\u060b\u0001\u0000\u0000\u0000\u0610\u0087"+
		"\u0001\u0000\u0000\u0000\u0611\u0615\u0005\u0094\u0000\u0000\u0612\u0614"+
		"\u0003\u0090H\u0000\u0613\u0612\u0001\u0000\u0000\u0000\u0614\u0617\u0001"+
		"\u0000\u0000\u0000\u0615\u0613\u0001\u0000\u0000\u0000\u0615\u0616\u0001"+
		"\u0000\u0000\u0000\u0616\u0618\u0001\u0000\u0000\u0000\u0617\u0615\u0001"+
		"\u0000\u0000\u0000\u0618\u061a\u0003\u0092I\u0000\u0619\u061b\u0003\u0096"+
		"K\u0000\u061a\u0619\u0001\u0000\u0000\u0000\u061a\u061b\u0001\u0000\u0000"+
		"\u0000\u061b\u061d\u0001\u0000\u0000\u0000\u061c\u061e\u0003\u009cN\u0000"+
		"\u061d\u061c\u0001\u0000\u0000\u0000\u061d\u061e\u0001\u0000\u0000\u0000"+
		"\u061e\u0620\u0001\u0000\u0000\u0000\u061f\u0621\u0003\u009eO\u0000\u0620"+
		"\u061f\u0001\u0000\u0000\u0000\u0620\u0621\u0001\u0000\u0000\u0000\u0621"+
		"\u0623\u0001\u0000\u0000\u0000\u0622\u0624\u0003\u00a0P\u0000\u0623\u0622"+
		"\u0001\u0000\u0000\u0000\u0623\u0624\u0001\u0000\u0000\u0000\u0624\u0626"+
		"\u0001\u0000\u0000\u0000\u0625\u0627\u0003\u00a2Q\u0000\u0626\u0625\u0001"+
		"\u0000\u0000\u0000\u0626\u0627\u0001\u0000\u0000\u0000\u0627\u0629\u0001"+
		"\u0000\u0000\u0000\u0628\u062a\u0003t:\u0000\u0629\u0628\u0001\u0000\u0000"+
		"\u0000\u0629\u062a\u0001\u0000\u0000\u0000\u062a\u062c\u0001\u0000\u0000"+
		"\u0000\u062b\u062d\u0003\u00a6S\u0000\u062c\u062b\u0001\u0000\u0000\u0000"+
		"\u062c\u062d\u0001\u0000\u0000\u0000\u062d\u064c\u0001\u0000\u0000\u0000"+
		"\u062e\u0632\u0005\u0094\u0000\u0000\u062f\u0631\u0003\u0090H\u0000\u0630"+
		"\u062f\u0001\u0000\u0000\u0000\u0631\u0634\u0001\u0000\u0000\u0000\u0632"+
		"\u0630\u0001\u0000\u0000\u0000\u0632\u0633\u0001\u0000\u0000\u0000\u0633"+
		"\u0635\u0001\u0000\u0000\u0000\u0634\u0632\u0001\u0000\u0000\u0000\u0635"+
		"\u0637\u0003\u0092I\u0000\u0636\u0638\u0003\u009cN\u0000\u0637\u0636\u0001"+
		"\u0000\u0000\u0000\u0637\u0638\u0001\u0000\u0000\u0000\u0638\u063a\u0001"+
		"\u0000\u0000\u0000\u0639\u063b\u0003\u009eO\u0000\u063a\u0639\u0001\u0000"+
		"\u0000\u0000\u063a\u063b\u0001\u0000\u0000\u0000\u063b\u063d\u0001\u0000"+
		"\u0000\u0000\u063c\u063e\u0003\u00a0P\u0000\u063d\u063c\u0001\u0000\u0000"+
		"\u0000\u063d\u063e\u0001\u0000\u0000\u0000\u063e\u0640\u0001\u0000\u0000"+
		"\u0000\u063f\u0641\u0003\u00a2Q\u0000\u0640\u063f\u0001\u0000\u0000\u0000"+
		"\u0640\u0641\u0001\u0000\u0000\u0000\u0641\u0643\u0001\u0000\u0000\u0000"+
		"\u0642\u0644\u0003t:\u0000\u0643\u0642\u0001\u0000\u0000\u0000\u0643\u0644"+
		"\u0001\u0000\u0000\u0000\u0644\u0646\u0001\u0000\u0000\u0000\u0645\u0647"+
		"\u0003\u00a6S\u0000\u0646\u0645\u0001\u0000\u0000\u0000\u0646\u0647\u0001"+
		"\u0000\u0000\u0000\u0647\u0649\u0001\u0000\u0000\u0000\u0648\u064a\u0003"+
		"\u0096K\u0000\u0649\u0648\u0001\u0000\u0000\u0000\u0649\u064a\u0001\u0000"+
		"\u0000\u0000\u064a\u064c\u0001\u0000\u0000\u0000\u064b\u0611\u0001\u0000"+
		"\u0000\u0000\u064b\u062e\u0001\u0000\u0000\u0000\u064c\u0089\u0001\u0000"+
		"\u0000\u0000\u064d\u0651\u0005\u0094\u0000\u0000\u064e\u0650\u0003\u0090"+
		"H\u0000\u064f\u064e\u0001\u0000\u0000\u0000\u0650\u0653\u0001\u0000\u0000"+
		"\u0000\u0651\u064f\u0001\u0000\u0000\u0000\u0651\u0652\u0001\u0000\u0000"+
		"\u0000\u0652\u0654\u0001\u0000\u0000\u0000\u0653\u0651\u0001\u0000\u0000"+
		"\u0000\u0654\u0656\u0003\u0092I\u0000\u0655\u0657\u0003\u009cN\u0000\u0656"+
		"\u0655\u0001\u0000\u0000\u0000\u0656\u0657\u0001\u0000\u0000\u0000\u0657"+
		"\u0659\u0001\u0000\u0000\u0000\u0658\u065a\u0003\u009eO\u0000\u0659\u0658"+
		"\u0001\u0000\u0000\u0000\u0659\u065a\u0001\u0000\u0000\u0000\u065a\u065c"+
		"\u0001\u0000\u0000\u0000\u065b\u065d\u0003\u00a0P\u0000\u065c\u065b\u0001"+
		"\u0000\u0000\u0000\u065c\u065d\u0001\u0000\u0000\u0000\u065d\u065f\u0001"+
		"\u0000\u0000\u0000\u065e\u0660\u0003\u00a2Q\u0000\u065f\u065e\u0001\u0000"+
		"\u0000\u0000\u065f\u0660\u0001\u0000\u0000\u0000\u0660\u0662\u0001\u0000"+
		"\u0000\u0000\u0661\u0663\u0003t:\u0000\u0662\u0661\u0001\u0000\u0000\u0000"+
		"\u0662\u0663\u0001\u0000\u0000\u0000\u0663\u0665\u0001\u0000\u0000\u0000"+
		"\u0664\u0666\u0003\u00a6S\u0000\u0665\u0664\u0001\u0000\u0000\u0000\u0665"+
		"\u0666\u0001\u0000\u0000\u0000\u0666\u008b\u0001\u0000\u0000\u0000\u0667"+
		"\u0669\u0005\u00ae\u0000\u0000\u0668\u066a\u0007\u0016\u0000\u0000\u0669"+
		"\u0668\u0001\u0000\u0000\u0000\u0669\u066a\u0001\u0000\u0000\u0000\u066a"+
		"\u066b\u0001\u0000\u0000\u0000\u066b\u066c\u0003\u0086C\u0000\u066c\u008d"+
		"\u0001\u0000\u0000\u0000\u066d\u066f\u0005\u00ae\u0000\u0000\u066e\u0670"+
		"\u0007\u0016\u0000\u0000\u066f\u066e\u0001\u0000\u0000\u0000\u066f\u0670"+
		"\u0001\u0000\u0000\u0000\u0670\u0673\u0001\u0000\u0000\u0000\u0671\u0674"+
		"\u0003\u008aE\u0000\u0672\u0674\u0003\u0086C\u0000\u0673\u0671\u0001\u0000"+
		"\u0000\u0000\u0673\u0672\u0001\u0000\u0000\u0000\u0674\u008f\u0001\u0000"+
		"\u0000\u0000\u0675\u067e\u0007\u001e\u0000\u0000\u0676\u067e\u0005H\u0000"+
		"\u0000\u0677\u067e\u0005\u00a5\u0000\u0000\u0678\u067e\u0005\u00a1\u0000"+
		"\u0000\u0679\u067e\u0005\u009f\u0000\u0000\u067a\u067e\u0005\u0260\u0000"+
		"\u0000\u067b\u067e\u0007\u001f\u0000\u0000\u067c\u067e\u0005\u00a0\u0000"+
		"\u0000\u067d\u0675\u0001\u0000\u0000\u0000\u067d\u0676\u0001\u0000\u0000"+
		"\u0000\u067d\u0677\u0001\u0000\u0000\u0000\u067d\u0678\u0001\u0000\u0000"+
		"\u0000\u067d\u0679\u0001\u0000\u0000\u0000\u067d\u067a\u0001\u0000\u0000"+
		"\u0000\u067d\u067b\u0001\u0000\u0000\u0000\u067d\u067c\u0001\u0000\u0000"+
		"\u0000\u067e\u0091\u0001\u0000\u0000\u0000\u067f\u0682\u0005\u0453\u0000"+
		"\u0000\u0680\u0682\u0003\u0094J\u0000\u0681\u067f\u0001\u0000\u0000\u0000"+
		"\u0681\u0680\u0001\u0000\u0000\u0000\u0682\u0687\u0001\u0000\u0000\u0000"+
		"\u0683\u0684\u0005\u0465\u0000\u0000\u0684\u0686\u0003\u0094J\u0000\u0685"+
		"\u0683\u0001\u0000\u0000\u0000\u0686\u0689\u0001\u0000\u0000\u0000\u0687"+
		"\u0685\u0001\u0000\u0000\u0000\u0687\u0688\u0001\u0000\u0000\u0000\u0688"+
		"\u0093\u0001\u0000\u0000\u0000\u0689\u0687\u0001\u0000\u0000\u0000\u068a"+
		"\u068b\u0003\u00ccf\u0000\u068b\u068c\u0005\u0462\u0000\u0000\u068c\u068d"+
		"\u0005\u0453\u0000\u0000\u068d\u06a8\u0001\u0000\u0000\u0000\u068e\u0693"+
		"\u0003\u00d2i\u0000\u068f\u0691\u0005\f\u0000\u0000\u0690\u068f\u0001"+
		"\u0000\u0000\u0000\u0690\u0691\u0001\u0000\u0000\u0000\u0691\u0692\u0001"+
		"\u0000\u0000\u0000\u0692\u0694\u0003\u00e8t\u0000\u0693\u0690\u0001\u0000"+
		"\u0000\u0000\u0693\u0694\u0001\u0000\u0000\u0000\u0694\u06a8\u0001\u0000"+
		"\u0000\u0000\u0695\u069a\u0003\u0124\u0092\u0000\u0696\u0698\u0005\f\u0000"+
		"\u0000\u0697\u0696\u0001\u0000\u0000\u0000\u0697\u0698\u0001\u0000\u0000"+
		"\u0000\u0698\u0699\u0001\u0000\u0000\u0000\u0699\u069b\u0003\u00e8t\u0000"+
		"\u069a\u0697\u0001\u0000\u0000\u0000\u069a\u069b\u0001\u0000\u0000\u0000"+
		"\u069b\u06a8\u0001\u0000\u0000\u0000\u069c\u069d\u0005\u047f\u0000\u0000"+
		"\u069d\u069f\u0005\u044a\u0000\u0000\u069e\u069c\u0001\u0000\u0000\u0000"+
		"\u069e\u069f\u0001\u0000\u0000\u0000\u069f\u06a0\u0001\u0000\u0000\u0000"+
		"\u06a0\u06a5\u0003\u014a\u00a5\u0000\u06a1\u06a3\u0005\f\u0000\u0000\u06a2"+
		"\u06a1\u0001\u0000\u0000\u0000\u06a2\u06a3\u0001\u0000\u0000\u0000\u06a3"+
		"\u06a4\u0001\u0000\u0000\u0000\u06a4\u06a6\u0003\u00e8t\u0000\u06a5\u06a2"+
		"\u0001\u0000\u0000\u0000\u06a5\u06a6\u0001\u0000\u0000\u0000\u06a6\u06a8"+
		"\u0001\u0000\u0000\u0000\u06a7\u068a\u0001\u0000\u0000\u0000\u06a7\u068e"+
		"\u0001\u0000\u0000\u0000\u06a7\u0695\u0001\u0000\u0000\u0000\u06a7\u069e"+
		"\u0001\u0000\u0000\u0000\u06a8\u0095\u0001\u0000\u0000\u0000\u06a9\u06aa"+
		"\u0005T\u0000\u0000\u06aa\u06af\u0003b1\u0000\u06ab\u06ac\u0005\u0465"+
		"\u0000\u0000\u06ac\u06ae\u0003b1\u0000\u06ad\u06ab\u0001\u0000\u0000\u0000"+
		"\u06ae\u06b1\u0001\u0000\u0000\u0000\u06af\u06ad\u0001\u0000\u0000\u0000"+
		"\u06af\u06b0\u0001\u0000\u0000\u0000\u06b0\u06ce\u0001\u0000\u0000\u0000"+
		"\u06b1\u06af\u0001\u0000\u0000\u0000\u06b2\u06b3\u0005T\u0000\u0000\u06b3"+
		"\u06b4\u0005\u0187\u0000\u0000\u06b4\u06ce\u0005\u0472\u0000\u0000\u06b5"+
		"\u06b6\u0005T\u0000\u0000\u06b6\u06b7\u0005|\u0000\u0000\u06b7\u06bb\u0005"+
		"\u0472\u0000\u0000\u06b8\u06b9\u0005\u0018\u0000\u0000\u06b9\u06ba\u0005"+
		"\u0095\u0000\u0000\u06ba\u06bc\u0003\u00dam\u0000\u06bb\u06b8\u0001\u0000"+
		"\u0000\u0000\u06bb\u06bc\u0001\u0000\u0000\u0000\u06bc\u06c3\u0001\u0000"+
		"\u0000\u0000\u06bd\u06bf\u0007\u0013\u0000\u0000\u06be\u06c0\u0003\u0098"+
		"L\u0000\u06bf\u06be\u0001\u0000\u0000\u0000\u06c0\u06c1\u0001\u0000\u0000"+
		"\u0000\u06c1\u06bf\u0001\u0000\u0000\u0000\u06c1\u06c2\u0001\u0000\u0000"+
		"\u0000\u06c2\u06c4\u0001\u0000\u0000\u0000\u06c3\u06bd\u0001\u0000\u0000"+
		"\u0000\u06c3\u06c4\u0001\u0000\u0000\u0000\u06c4\u06cb\u0001\u0000\u0000"+
		"\u0000\u06c5\u06c7\u0005a\u0000\u0000\u06c6\u06c8\u0003\u009aM\u0000\u06c7"+
		"\u06c6\u0001\u0000\u0000\u0000\u06c8\u06c9\u0001\u0000\u0000\u0000\u06c9"+
		"\u06c7\u0001\u0000\u0000\u0000\u06c9\u06ca\u0001\u0000\u0000\u0000\u06ca"+
		"\u06cc\u0001\u0000\u0000\u0000\u06cb\u06c5\u0001\u0000\u0000\u0000\u06cb"+
		"\u06cc\u0001\u0000\u0000\u0000\u06cc\u06ce\u0001\u0000\u0000\u0000\u06cd"+
		"\u06a9\u0001\u0000\u0000\u0000\u06cd\u06b2\u0001\u0000\u0000\u0000\u06cd"+
		"\u06b5\u0001\u0000\u0000\u0000\u06ce\u0097\u0001\u0000\u0000\u0000\u06cf"+
		"\u06d0\u0005\u00a7\u0000\u0000\u06d0\u06d1\u0005\u0012\u0000\u0000\u06d1"+
		"\u06dc\u0005\u0472\u0000\u0000\u06d2\u06d4\u0005v\u0000\u0000\u06d3\u06d2"+
		"\u0001\u0000\u0000\u0000\u06d3\u06d4\u0001\u0000\u0000\u0000\u06d4\u06d5"+
		"\u0001\u0000\u0000\u0000\u06d5\u06d6\u00056\u0000\u0000\u06d6\u06d7\u0005"+
		"\u0012\u0000\u0000\u06d7\u06dc\u0005\u0472\u0000\u0000\u06d8\u06d9\u0005"+
		"7\u0000\u0000\u06d9\u06da\u0005\u0012\u0000\u0000\u06da\u06dc\u0005\u0472"+
		"\u0000\u0000\u06db\u06cf\u0001\u0000\u0000\u0000\u06db\u06d3\u0001\u0000"+
		"\u0000\u0000\u06db\u06d8\u0001\u0000\u0000\u0000\u06dc\u0099\u0001\u0000"+
		"\u0000\u0000\u06dd\u06de\u0005\u00a4\u0000\u0000\u06de\u06df\u0005\u0012"+
		"\u0000\u0000\u06df\u06e4\u0005\u0472\u0000\u0000\u06e0\u06e1\u0005\u00a7"+
		"\u0000\u0000\u06e1\u06e2\u0005\u0012\u0000\u0000\u06e2\u06e4\u0005\u0472"+
		"\u0000\u0000\u06e3\u06dd\u0001\u0000\u0000\u0000\u06e3\u06e0\u0001\u0000"+
		"\u0000\u0000\u06e4\u009b\u0001\u0000\u0000\u0000\u06e5\u06e6\u0005A\u0000"+
		"\u0000\u06e6\u06e8\u0003x<\u0000\u06e7\u06e5\u0001\u0000\u0000\u0000\u06e7"+
		"\u06e8\u0001\u0000\u0000\u0000\u06e8\u06eb\u0001\u0000\u0000\u0000\u06e9"+
		"\u06ea\u0005\u00b8\u0000\u0000\u06ea\u06ec\u0003\u014a\u00a5\u0000\u06eb"+
		"\u06e9\u0001\u0000\u0000\u0000\u06eb\u06ec\u0001\u0000\u0000\u0000\u06ec"+
		"\u009d\u0001\u0000\u0000\u0000\u06ed\u06ee\u0005F\u0000\u0000\u06ee\u06ef"+
		"\u0005\u0012\u0000\u0000\u06ef\u06f4\u0003\u00a4R\u0000\u06f0\u06f1\u0005"+
		"\u0465\u0000\u0000\u06f1\u06f3\u0003\u00a4R\u0000\u06f2\u06f0\u0001\u0000"+
		"\u0000\u0000\u06f3\u06f6\u0001\u0000\u0000\u0000\u06f4\u06f2\u0001\u0000"+
		"\u0000\u0000\u06f4\u06f5\u0001\u0000\u0000\u0000\u06f5\u06f9\u0001\u0000"+
		"\u0000\u0000\u06f6\u06f4\u0001\u0000\u0000\u0000\u06f7\u06f8\u0005\u00ba"+
		"\u0000\u0000\u06f8\u06fa\u0005\u0245\u0000\u0000\u06f9\u06f7\u0001\u0000"+
		"\u0000\u0000\u06f9\u06fa\u0001\u0000\u0000\u0000\u06fa\u009f\u0001\u0000"+
		"\u0000\u0000\u06fb\u06fc\u0005G\u0000\u0000\u06fc\u06fd\u0003\u014a\u00a5"+
		"\u0000\u06fd\u00a1\u0001\u0000\u0000\u0000\u06fe\u06ff\u0005\u0293\u0000"+
		"\u0000\u06ff\u0700\u0003\u0136\u009b\u0000\u0700\u0701\u0005\f\u0000\u0000"+
		"\u0701\u0702\u0005\u0463\u0000\u0000\u0702\u0703\u0003\u0134\u009a\u0000"+
		"\u0703\u070d\u0005\u0464\u0000\u0000\u0704\u0705\u0005\u0465\u0000\u0000"+
		"\u0705\u0706\u0003\u0136\u009b\u0000\u0706\u0707\u0005\f\u0000\u0000\u0707"+
		"\u0708\u0005\u0463\u0000\u0000\u0708\u0709\u0003\u0134\u009a\u0000\u0709"+
		"\u070a\u0005\u0464\u0000\u0000\u070a\u070c\u0001\u0000\u0000\u0000\u070b"+
		"\u0704\u0001\u0000\u0000\u0000\u070c\u070f\u0001\u0000\u0000\u0000\u070d"+
		"\u070b\u0001\u0000\u0000\u0000\u070d\u070e\u0001\u0000\u0000\u0000\u070e"+
		"\u00a3\u0001\u0000\u0000\u0000\u070f\u070d\u0001\u0000\u0000\u0000\u0710"+
		"\u0712\u0003\u014a\u00a5\u0000\u0711\u0713\u0007\u001a\u0000\u0000\u0712"+
		"\u0711\u0001\u0000\u0000\u0000\u0712\u0713\u0001\u0000\u0000\u0000\u0713"+
		"\u00a5\u0001\u0000\u0000\u0000\u0714\u071f\u0005_\u0000\u0000\u0715\u0716"+
		"\u0003\u00a8T\u0000\u0716\u0717\u0005\u0465\u0000\u0000\u0717\u0719\u0001"+
		"\u0000\u0000\u0000\u0718\u0715\u0001\u0000\u0000\u0000\u0718\u0719\u0001"+
		"\u0000\u0000\u0000\u0719\u071a\u0001\u0000\u0000\u0000\u071a\u0720\u0003"+
		"\u00a8T\u0000\u071b\u071c\u0003\u00a8T\u0000\u071c\u071d\u0005\u0207\u0000"+
		"\u0000\u071d\u071e\u0003\u00a8T\u0000\u071e\u0720\u0001\u0000\u0000\u0000"+
		"\u071f\u0718\u0001\u0000\u0000\u0000\u071f\u071b\u0001\u0000\u0000\u0000"+
		"\u0720\u00a7\u0001\u0000\u0000\u0000\u0721\u0725\u0003\u00eew\u0000\u0722"+
		"\u0725\u0003\u00d8l\u0000\u0723\u0725\u0003\u00eau\u0000\u0724\u0721\u0001"+
		"\u0000\u0000\u0000\u0724\u0722\u0001\u0000\u0000\u0000\u0724\u0723\u0001"+
		"\u0000\u0000\u0000\u0725\u00a9\u0001\u0000\u0000\u0000\u0726\u0727\u0005"+
		"\u0097\u0000\u0000\u0727\u0728\u0007 \u0000\u0000\u0728\u07c0\u0005\u01cf"+
		"\u0000\u0000\u0729\u072a\u0005\u0097\u0000\u0000\u072a\u072b\u0007!\u0000"+
		"\u0000\u072b\u072e\u0005\u0195\u0000\u0000\u072c\u072d\u0005M\u0000\u0000"+
		"\u072d\u072f\u0005\u0472\u0000\u0000\u072e\u072c\u0001\u0000\u0000\u0000"+
		"\u072e\u072f\u0001\u0000\u0000\u0000\u072f\u0732\u0001\u0000\u0000\u0000"+
		"\u0730\u0731\u0005A\u0000\u0000\u0731\u0733\u0003\u00eew\u0000\u0732\u0730"+
		"\u0001\u0000\u0000\u0000\u0732\u0733\u0001\u0000\u0000\u0000\u0733\u073b"+
		"\u0001\u0000\u0000\u0000\u0734\u0738\u0005_\u0000\u0000\u0735\u0736\u0003"+
		"\u00eew\u0000\u0736\u0737\u0005\u0465\u0000\u0000\u0737\u0739\u0001\u0000"+
		"\u0000\u0000\u0738\u0735\u0001\u0000\u0000\u0000\u0738\u0739\u0001\u0000"+
		"\u0000\u0000\u0739\u073a\u0001\u0000\u0000\u0000\u073a\u073c\u0003\u00ee"+
		"w\u0000\u073b\u0734\u0001\u0000\u0000\u0000\u073b\u073c\u0001\u0000\u0000"+
		"\u0000\u073c\u07c0\u0001\u0000\u0000\u0000\u073d\u073e\u0005\u0097\u0000"+
		"\u0000\u073e\u0740\u0003\u00aeW\u0000\u073f\u0741\u0003\u00b0X\u0000\u0740"+
		"\u073f\u0001\u0000\u0000\u0000\u0740\u0741\u0001\u0000\u0000\u0000\u0741"+
		"\u07c0\u0001\u0000\u0000\u0000\u0742\u0744\u0005\u0097\u0000\u0000\u0743"+
		"\u0745\u0005\u01a8\u0000\u0000\u0744\u0743\u0001\u0000\u0000\u0000\u0744"+
		"\u0745\u0001\u0000\u0000\u0000\u0745\u0746\u0001\u0000\u0000\u0000\u0746"+
		"\u0747\u0007\u0013\u0000\u0000\u0747\u0748\u0007\"\u0000\u0000\u0748\u074b"+
		"\u0003\u00ceg\u0000\u0749\u074a\u0007\"\u0000\u0000\u074a\u074c\u0003"+
		"\u00e8t\u0000\u074b\u0749\u0001\u0000\u0000\u0000\u074b\u074c\u0001\u0000"+
		"\u0000\u0000\u074c\u074e\u0001\u0000\u0000\u0000\u074d\u074f\u0003\u00b0"+
		"X\u0000\u074e\u074d\u0001\u0000\u0000\u0000\u074e\u074f\u0001\u0000\u0000"+
		"\u0000\u074f\u07c0\u0001\u0000\u0000\u0000\u0750\u0751\u0005\u0097\u0000"+
		"\u0000\u0751\u0752\u0005 \u0000\u0000\u0752\u0754\u0007\u0000\u0000\u0000"+
		"\u0753\u0755\u0003\u0120\u0090\u0000\u0754\u0753\u0001\u0000\u0000\u0000"+
		"\u0754\u0755\u0001\u0000\u0000\u0000\u0755\u0756\u0001\u0000\u0000\u0000"+
		"\u0756\u07c0\u0003\u00e8t\u0000\u0757\u0758\u0005\u0097\u0000\u0000\u0758"+
		"\u0759\u0005 \u0000\u0000\u0759\u075a\u0007#\u0000\u0000\u075a\u07c0\u0003"+
		"\u00ccf\u0000\u075b\u075c\u0005\u0097\u0000\u0000\u075c\u075d\u0005 \u0000"+
		"\u0000\u075d\u075e\u0005\u0288\u0000\u0000\u075e\u07c0\u0003\u00d6k\u0000"+
		"\u075f\u0760\u0005\u0097\u0000\u0000\u0760\u0761\u0005\u018e\u0000\u0000"+
		"\u0761\u0762\u0003\u00deo\u0000\u0762\u0763\u0007$\u0000\u0000\u0763\u07c0"+
		"\u0001\u0000\u0000\u0000\u0764\u0765\u0005\u0097\u0000\u0000\u0765\u07c0"+
		"\u0003\u00b2Y\u0000\u0766\u0767\u0005\u0097\u0000\u0000\u0767\u076f\u0007"+
		"%\u0000\u0000\u0768\u076c\u0005_\u0000\u0000\u0769\u076a\u0003\u00eew"+
		"\u0000\u076a\u076b\u0005\u0465\u0000\u0000\u076b\u076d\u0001\u0000\u0000"+
		"\u0000\u076c\u0769\u0001\u0000\u0000\u0000\u076c\u076d\u0001\u0000\u0000"+
		"\u0000\u076d\u076e\u0001\u0000\u0000\u0000\u076e\u0770\u0003\u00eew\u0000"+
		"\u076f\u0768\u0001\u0000\u0000\u0000\u076f\u0770\u0001\u0000\u0000\u0000"+
		"\u0770\u07c0\u0001\u0000\u0000\u0000\u0771\u0772\u0005\u0097\u0000\u0000"+
		"\u0772\u0773\u0005\u0119\u0000\u0000\u0773\u0774\u0005\u0463\u0000\u0000"+
		"\u0774\u0775\u0005\u0453\u0000\u0000\u0775\u0776\u0005\u0464\u0000\u0000"+
		"\u0776\u07c0\u0007%\u0000\u0000\u0777\u0778\u0005\u0097\u0000\u0000\u0778"+
		"\u077b\u0003\u00b4Z\u0000\u0779\u077a\u0007\"\u0000\u0000\u077a\u077c"+
		"\u0003\u00e8t\u0000\u077b\u0779\u0001\u0000\u0000\u0000\u077b\u077c\u0001"+
		"\u0000\u0000\u0000\u077c\u077e\u0001\u0000\u0000\u0000\u077d\u077f\u0003"+
		"\u00b0X\u0000\u077e\u077d\u0001\u0000\u0000\u0000\u077e\u077f\u0001\u0000"+
		"\u0000\u0000\u077f\u07c0\u0001\u0000\u0000\u0000\u0780\u0781\u0005\u0097"+
		"\u0000\u0000\u0781\u0782\u0007&\u0000\u0000\u0782\u0783\u0005\u0163\u0000"+
		"\u0000\u0783\u07c0\u0003\u00ccf\u0000\u0784\u0785\u0005\u0097\u0000\u0000"+
		"\u0785\u0788\u0005\u01ac\u0000\u0000\u0786\u0787\u0005>\u0000\u0000\u0787"+
		"\u0789\u0003\u00d6k\u0000\u0788\u0786\u0001\u0000\u0000\u0000\u0788\u0789"+
		"\u0001\u0000\u0000\u0000\u0789\u07c0\u0001\u0000\u0000\u0000\u078a\u078b"+
		"\u0005\u0097\u0000\u0000\u078b\u078c\u0007\'\u0000\u0000\u078c\u078d\u0007"+
		"\"\u0000\u0000\u078d\u0790\u0003\u00ceg\u0000\u078e\u078f\u0007\"\u0000"+
		"\u0000\u078f\u0791\u0003\u00e8t\u0000\u0790\u078e\u0001\u0000\u0000\u0000"+
		"\u0790\u0791\u0001\u0000\u0000\u0000\u0791\u0794\u0001\u0000\u0000\u0000"+
		"\u0792\u0793\u0005\u00b8\u0000\u0000\u0793\u0795\u0003\u014a\u00a5\u0000"+
		"\u0794\u0792\u0001\u0000\u0000\u0000\u0794\u0795\u0001\u0000\u0000\u0000"+
		"\u0795\u07c0\u0001\u0000\u0000\u0000\u0796\u0797\u0005\u0097\u0000\u0000"+
		"\u0797\u0798\u0005\u020e\u0000\u0000\u0798\u079b\u0005\u02a8\u0000\u0000"+
		"\u0799\u079a\u0007\"\u0000\u0000\u079a\u079c\u0003\u00e8t\u0000\u079b"+
		"\u0799\u0001\u0000\u0000\u0000\u079b\u079c\u0001\u0000\u0000\u0000\u079c"+
		"\u079e\u0001\u0000\u0000\u0000\u079d\u079f\u0003\u00b0X\u0000\u079e\u079d"+
		"\u0001\u0000\u0000\u0000\u079e\u079f\u0001\u0000\u0000\u0000\u079f\u07c0"+
		"\u0001\u0000\u0000\u0000\u07a0\u07a1\u0005\u0097\u0000\u0000\u07a1\u07a2"+
		"\u0005\u0224\u0000\u0000\u07a2\u07a7\u0003\u00b6[\u0000\u07a3\u07a4\u0005"+
		"\u0465\u0000\u0000\u07a4\u07a6\u0003\u00b6[\u0000\u07a5\u07a3\u0001\u0000"+
		"\u0000\u0000\u07a6\u07a9\u0001\u0000\u0000\u0000\u07a7\u07a5\u0001\u0000"+
		"\u0000\u0000\u07a7\u07a8\u0001\u0000\u0000\u0000\u07a8\u07ad\u0001\u0000"+
		"\u0000\u0000\u07a9\u07a7\u0001\u0000\u0000\u0000\u07aa\u07ab\u0005>\u0000"+
		"\u0000\u07ab\u07ac\u0005\u0227\u0000\u0000\u07ac\u07ae\u0003\u00eew\u0000"+
		"\u07ad\u07aa\u0001\u0000\u0000\u0000\u07ad\u07ae\u0001\u0000\u0000\u0000"+
		"\u07ae\u07af\u0001\u0000\u0000\u0000\u07af\u07b3\u0005_\u0000\u0000\u07b0"+
		"\u07b1\u0003\u00eew\u0000\u07b1\u07b2\u0005\u0465\u0000\u0000\u07b2\u07b4"+
		"\u0001\u0000\u0000\u0000\u07b3\u07b0\u0001\u0000\u0000\u0000\u07b3\u07b4"+
		"\u0001\u0000\u0000\u0000\u07b4\u07b5\u0001\u0000\u0000\u0000\u07b5\u07b6"+
		"\u0003\u00eew\u0000\u07b6\u07c0\u0001\u0000\u0000\u0000\u07b7\u07b8\u0005"+
		"\u0097\u0000\u0000\u07b8\u07b9\u0005\u0255\u0000\u0000\u07b9\u07bd\u0005"+
		"\u0269\u0000\u0000\u07ba\u07bb\u0005>\u0000\u0000\u07bb\u07bc\u0005\u015a"+
		"\u0000\u0000\u07bc\u07be\u0005\u0472\u0000\u0000\u07bd\u07ba\u0001\u0000"+
		"\u0000\u0000\u07bd\u07be\u0001\u0000\u0000\u0000\u07be\u07c0\u0001\u0000"+
		"\u0000\u0000\u07bf\u0726\u0001\u0000\u0000\u0000\u07bf\u0729\u0001\u0000"+
		"\u0000\u0000\u07bf\u073d\u0001\u0000\u0000\u0000\u07bf\u0742\u0001\u0000"+
		"\u0000\u0000\u07bf\u0750\u0001\u0000\u0000\u0000\u07bf\u0757\u0001\u0000"+
		"\u0000\u0000\u07bf\u075b\u0001\u0000\u0000\u0000\u07bf\u075f\u0001\u0000"+
		"\u0000\u0000\u07bf\u0764\u0001\u0000\u0000\u0000\u07bf\u0766\u0001\u0000"+
		"\u0000\u0000\u07bf\u0771\u0001\u0000\u0000\u0000\u07bf\u0777\u0001\u0000"+
		"\u0000\u0000\u07bf\u0780\u0001\u0000\u0000\u0000\u07bf\u0784\u0001\u0000"+
		"\u0000\u0000\u07bf\u078a\u0001\u0000\u0000\u0000\u07bf\u0796\u0001\u0000"+
		"\u0000\u0000\u07bf\u07a0\u0001\u0000\u0000\u0000\u07bf\u07b7\u0001\u0000"+
		"\u0000\u0000\u07c0\u00ab\u0001\u0000\u0000\u0000\u07c1\u07cc\u0005\u047f"+
		"\u0000\u0000\u07c2\u07cc\u0005\u0480\u0000\u0000\u07c3\u07c4\u0005\u0467"+
		"\u0000\u0000\u07c4\u07c6\u0005\u0467\u0000\u0000\u07c5\u07c3\u0001\u0000"+
		"\u0000\u0000\u07c5\u07c6\u0001\u0000\u0000\u0000\u07c6\u07c7\u0001\u0000"+
		"\u0000\u0000\u07c7\u07c9\u0007(\u0000\u0000\u07c8\u07c5\u0001\u0000\u0000"+
		"\u0000\u07c8\u07c9\u0001\u0000\u0000\u0000\u07c9\u07ca\u0001\u0000\u0000"+
		"\u0000\u07ca\u07cc\u0003\u00e8t\u0000\u07cb\u07c1\u0001\u0000\u0000\u0000"+
		"\u07cb\u07c2\u0001\u0000\u0000\u0000\u07cb\u07c8\u0001\u0000\u0000\u0000"+
		"\u07cc\u00ad\u0001\u0000\u0000\u0000\u07cd\u07ce\u0005\u0018\u0000\u0000"+
		"\u07ce\u07db\u0005\u0095\u0000\u0000\u07cf\u07db\u0005\u0338\u0000\u0000"+
		"\u07d0\u07db\u0005&\u0000\u0000\u07d1\u07db\u0005\u0093\u0000\u0000\u07d2"+
		"\u07d3\u0005\u01a9\u0000\u0000\u07d3\u07db\u0005\u0269\u0000\u0000\u07d4"+
		"\u07d5\u0005\u007f\u0000\u0000\u07d5\u07db\u0005\u0269\u0000\u0000\u07d6"+
		"\u07d8\u0007)\u0000\u0000\u07d7\u07d6\u0001\u0000\u0000\u0000\u07d7\u07d8"+
		"\u0001\u0000\u0000\u0000\u07d8\u07d9\u0001\u0000\u0000\u0000\u07d9\u07db"+
		"\u0007*\u0000\u0000\u07da\u07cd\u0001\u0000\u0000\u0000\u07da\u07cf\u0001"+
		"\u0000\u0000\u0000\u07da\u07d0\u0001\u0000\u0000\u0000\u07da\u07d1\u0001"+
		"\u0000\u0000\u0000\u07da\u07d2\u0001\u0000\u0000\u0000\u07da\u07d4\u0001"+
		"\u0000\u0000\u0000\u07da\u07d7\u0001\u0000\u0000\u0000\u07db\u00af\u0001"+
		"\u0000\u0000\u0000\u07dc\u07dd\u0005^\u0000\u0000\u07dd\u07e1\u0005\u0472"+
		"\u0000\u0000\u07de\u07df\u0005\u00b8\u0000\u0000\u07df\u07e1\u0003\u014a"+
		"\u00a5\u0000\u07e0\u07dc\u0001\u0000\u0000\u0000\u07e0\u07de\u0001\u0000"+
		"\u0000\u0000\u07e1\u00b1\u0001\u0000\u0000\u0000\u07e2\u07e4\u0005\u026b"+
		"\u0000\u0000\u07e3\u07e2\u0001\u0000\u0000\u0000\u07e3\u07e4\u0001\u0000"+
		"\u0000\u0000\u07e4\u07e5\u0001\u0000\u0000\u0000\u07e5\u07f4\u0005\u018f"+
		"\u0000\u0000\u07e6\u07e7\u0005\u01d0\u0000\u0000\u07e7\u07f4\u0005\u0269"+
		"\u0000\u0000\u07e8\u07f4\u0005\u021c\u0000\u0000\u07e9\u07f4\u0005\u02b0"+
		"\u0000\u0000\u07ea\u07ec\u0005\u01a8\u0000\u0000\u07eb\u07ea\u0001\u0000"+
		"\u0000\u0000\u07eb\u07ec\u0001\u0000\u0000\u0000\u07ec\u07ed\u0001\u0000"+
		"\u0000\u0000\u07ed\u07f4\u0005\u0223\u0000\u0000\u07ee\u07f4\u0005\u0225"+
		"\u0000\u0000\u07ef\u07f0\u0005\u0255\u0000\u0000\u07f0\u07f4\u0005\u01b2"+
		"\u0000\u0000\u07f1\u07f4\u0005\u014a\u0000\u0000\u07f2\u07f4\u0005\u0176"+
		"\u0000\u0000\u07f3\u07e3\u0001\u0000\u0000\u0000\u07f3\u07e6\u0001\u0000"+
		"\u0000\u0000\u07f3\u07e8\u0001\u0000\u0000\u0000\u07f3\u07e9\u0001\u0000"+
		"\u0000\u0000\u07f3";
	private static final String _serializedATNSegment1 =
		"\u07eb\u0001\u0000\u0000\u0000\u07f3\u07ee\u0001\u0000\u0000\u0000\u07f3"+
		"\u07ef\u0001\u0000\u0000\u0000\u07f3\u07f1\u0001\u0000\u0000\u0000\u07f3"+
		"\u07f2\u0001\u0000\u0000\u0000\u07f4\u00b3\u0001\u0000\u0000\u0000\u07f5"+
		"\u07fe\u0005\u0195\u0000\u0000\u07f6\u07f7\u0005\u00a6\u0000\u0000\u07f7"+
		"\u07fe\u0005\u0269\u0000\u0000\u07f8\u07fa\u0005\u01a8\u0000\u0000\u07f9"+
		"\u07f8\u0001\u0000\u0000\u0000\u07f9\u07fa\u0001\u0000\u0000\u0000\u07fa"+
		"\u07fb\u0001\u0000\u0000\u0000\u07fb\u07fe\u0005\u02a8\u0000\u0000\u07fc"+
		"\u07fe\u0005\u027e\u0000\u0000\u07fd\u07f5\u0001\u0000\u0000\u0000\u07fd"+
		"\u07f6\u0001\u0000\u0000\u0000\u07fd\u07f9\u0001\u0000\u0000\u0000\u07fd"+
		"\u07fc\u0001\u0000\u0000\u0000\u07fe\u00b5\u0001\u0000\u0000\u0000\u07ff"+
		"\u080c\u0005\u0006\u0000\u0000\u0800\u0801\u0005\u0152\u0000\u0000\u0801"+
		"\u080c\u0005\u01c0\u0000\u0000\u0802\u0803\u0005\u0175\u0000\u0000\u0803"+
		"\u080c\u0005\u0274\u0000\u0000\u0804\u080c\u0005\u0178\u0000\u0000\u0805"+
		"\u080c\u0005\u01c2\u0000\u0000\u0806\u080c\u0005\u0304\u0000\u0000\u0807"+
		"\u0808\u0005\u0213\u0000\u0000\u0808\u080c\u0005\u019e\u0000\u0000\u0809"+
		"\u080c\u0005\u025c\u0000\u0000\u080a\u080c\u0005\u0273\u0000\u0000\u080b"+
		"\u07ff\u0001\u0000\u0000\u0000\u080b\u0800\u0001\u0000\u0000\u0000\u080b"+
		"\u0802\u0001\u0000\u0000\u0000\u080b\u0804\u0001\u0000\u0000\u0000\u080b"+
		"\u0805\u0001\u0000\u0000\u0000\u080b\u0806\u0001\u0000\u0000\u0000\u080b"+
		"\u0807\u0001\u0000\u0000\u0000\u080b\u0809\u0001\u0000\u0000\u0000\u080b"+
		"\u080a\u0001\u0000\u0000\u0000\u080c\u00b7\u0001\u0000\u0000\u0000\u080d"+
		"\u080e\u0007+\u0000\u0000\u080e\u0811\u0003\u00ceg\u0000\u080f\u0812\u0003"+
		"\u00e8t\u0000\u0810\u0812\u0005\u0472\u0000\u0000\u0811\u080f\u0001\u0000"+
		"\u0000\u0000\u0811\u0810\u0001\u0000\u0000\u0000\u0811\u0812\u0001\u0000"+
		"\u0000\u0000\u0812\u00b9\u0001\u0000\u0000\u0000\u0813\u0817\u0007+\u0000"+
		"\u0000\u0814\u0815\u0007,\u0000\u0000\u0815\u0816\u0005\u045a\u0000\u0000"+
		"\u0816\u0818\u0007-\u0000\u0000\u0817\u0814\u0001\u0000\u0000\u0000\u0817"+
		"\u0818\u0001\u0000\u0000\u0000\u0818\u0819\u0001\u0000\u0000\u0000\u0819"+
		"\u081a\u0003\u00cae\u0000\u081a\u00bb\u0001\u0000\u0000\u0000\u081b\u081c"+
		"\u0005\u01b0\u0000\u0000\u081c\u081d\u0005\u0472\u0000\u0000\u081d\u00bd"+
		"\u0001\u0000\u0000\u0000\u081e\u081f\u0005\u00b4\u0000\u0000\u081f\u0820"+
		"\u0003\u00e8t\u0000\u0820\u00bf\u0001\u0000\u0000\u0000\u0821\u0829\u0005"+
		"\u0098\u0000\u0000\u0822\u0824\u0005\u009d\u0000\u0000\u0823\u0825\u0005"+
		"\u028c\u0000\u0000\u0824\u0823\u0001\u0000\u0000\u0000\u0824\u0825\u0001"+
		"\u0000\u0000\u0000\u0825\u0826\u0001\u0000\u0000\u0000\u0826\u082a\u0003"+
		"\u00f2y\u0000\u0827\u082a\u0005\u047a\u0000\u0000\u0828\u082a\u0005\u047b"+
		"\u0000\u0000\u0829\u0822\u0001\u0000\u0000\u0000\u0829\u0827\u0001\u0000"+
		"\u0000\u0000\u0829\u0828\u0001\u0000\u0000\u0000\u082a\u0834\u0001\u0000"+
		"\u0000\u0000\u082b\u082c\u0005\u0095\u0000\u0000\u082c\u0831\u0003\u00c4"+
		"b\u0000\u082d\u082e\u0005\u0465\u0000\u0000\u082e\u0830\u0003\u00c4b\u0000"+
		"\u082f\u082d\u0001\u0000\u0000\u0000\u0830\u0833\u0001\u0000\u0000\u0000"+
		"\u0831\u082f\u0001\u0000\u0000\u0000\u0831\u0832\u0001\u0000\u0000\u0000"+
		"\u0832\u0835\u0001\u0000\u0000\u0000\u0833\u0831\u0001\u0000\u0000\u0000"+
		"\u0834\u082b\u0001\u0000\u0000\u0000\u0834\u0835\u0001\u0000\u0000\u0000"+
		"\u0835\u00c1\u0001\u0000\u0000\u0000\u0836\u083e\u0005\u008b\u0000\u0000"+
		"\u0837\u0839\u0005\u009d\u0000\u0000\u0838\u083a\u0005\u028c\u0000\u0000"+
		"\u0839\u0838\u0001\u0000\u0000\u0000\u0839\u083a\u0001\u0000\u0000\u0000"+
		"\u083a\u083b\u0001\u0000\u0000\u0000\u083b\u083f\u0003\u00f2y\u0000\u083c"+
		"\u083f\u0005\u047a\u0000\u0000\u083d\u083f\u0005\u047b\u0000\u0000\u083e"+
		"\u0837\u0001\u0000\u0000\u0000\u083e\u083c\u0001\u0000\u0000\u0000\u083e"+
		"\u083d\u0001\u0000\u0000\u0000\u083e\u083f\u0001\u0000\u0000\u0000\u083f"+
		"\u0849\u0001\u0000\u0000\u0000\u0840\u0841\u0005\u0095\u0000\u0000\u0841"+
		"\u0846\u0003\u00c4b\u0000\u0842\u0843\u0005\u0465\u0000\u0000\u0843\u0845"+
		"\u0003\u00c4b\u0000\u0844\u0842\u0001\u0000\u0000\u0000\u0845\u0848\u0001"+
		"\u0000\u0000\u0000\u0846\u0844\u0001\u0000\u0000\u0000\u0846\u0847\u0001"+
		"\u0000\u0000\u0000\u0847\u084a\u0001\u0000\u0000\u0000\u0848\u0846\u0001"+
		"\u0000\u0000\u0000\u0849\u0840\u0001\u0000\u0000\u0000\u0849\u084a\u0001"+
		"\u0000\u0000\u0000\u084a\u00c3\u0001\u0000\u0000\u0000\u084b\u084c\u0007"+
		".\u0000\u0000\u084c\u0851\u0005\u045a\u0000\u0000\u084d\u0852\u0003\u00f2"+
		"y\u0000\u084e\u0852\u0005\u0473\u0000\u0000\u084f\u0852\u0003\u00d8l\u0000"+
		"\u0850\u0852\u0003\u00eau\u0000\u0851\u084d\u0001\u0000\u0000\u0000\u0851"+
		"\u084e\u0001\u0000\u0000\u0000\u0851\u084f\u0001\u0000\u0000\u0000\u0851"+
		"\u0850\u0001\u0000\u0000\u0000\u0852\u00c5\u0001\u0000\u0000\u0000\u0853"+
		"\u0855\u0005D\u0000\u0000\u0854\u0856\u0007/\u0000\u0000\u0855\u0854\u0001"+
		"\u0000\u0000\u0000\u0855\u0856\u0001\u0000\u0000\u0000\u0856\u0857\u0001"+
		"\u0000\u0000\u0000\u0857\u0877\u0005.\u0000\u0000\u0858\u0859\u0003\u00ac"+
		"V\u0000\u0859\u085a\u0005\u045a\u0000\u0000\u085a\u0862\u00070\u0000\u0000"+
		"\u085b\u085c\u0005\u0465\u0000\u0000\u085c\u085d\u0003\u00acV\u0000\u085d"+
		"\u085e\u0005\u045a\u0000\u0000\u085e\u085f\u00070\u0000\u0000\u085f\u0861"+
		"\u0001\u0000\u0000\u0000\u0860\u085b\u0001\u0000\u0000\u0000\u0861\u0864"+
		"\u0001\u0000\u0000\u0000\u0862\u0860\u0001\u0000\u0000\u0000\u0862\u0863"+
		"\u0001\u0000\u0000\u0000\u0863\u0878\u0001\u0000\u0000\u0000\u0864\u0862"+
		"\u0001\u0000\u0000\u0000\u0865\u0868\u0005\u001c\u0000\u0000\u0866\u0869"+
		"\u0003\u00eew\u0000\u0867\u0869\u0003\u00acV\u0000\u0868\u0866\u0001\u0000"+
		"\u0000\u0000\u0868\u0867\u0001\u0000\u0000\u0000\u0869\u086a\u0001\u0000"+
		"\u0000\u0000\u086a\u086b\u0003\u00acV\u0000\u086b\u086c\u0005\u045a\u0000"+
		"\u0000\u086c\u0874\u0003\u00c8d\u0000\u086d\u086e\u0005\u0465\u0000\u0000"+
		"\u086e\u086f\u0003\u00acV\u0000\u086f\u0870\u0005\u045a\u0000\u0000\u0870"+
		"\u0871\u0003\u00c8d\u0000\u0871\u0873\u0001\u0000\u0000\u0000\u0872\u086d"+
		"\u0001\u0000\u0000\u0000\u0873\u0876\u0001\u0000\u0000\u0000\u0874\u0872"+
		"\u0001\u0000\u0000\u0000\u0874\u0875\u0001\u0000\u0000\u0000\u0875\u0878"+
		"\u0001\u0000\u0000\u0000\u0876\u0874\u0001\u0000\u0000\u0000\u0877\u0858"+
		"\u0001\u0000\u0000\u0000\u0877\u0865\u0001\u0000\u0000\u0000\u0878\u00c7"+
		"\u0001\u0000\u0000\u0000\u0879\u087a\u00071\u0000\u0000\u087a\u00c9\u0001"+
		"\u0000\u0000\u0000\u087b\u0881\u0003Z-\u0000\u087c\u0881\u0003L&\u0000"+
		"\u087d\u0881\u0003R)\u0000\u087e\u0881\u0003X,\u0000\u087f\u0881\u0003"+
		"\\.\u0000\u0880\u087b\u0001\u0000\u0000\u0000\u0880\u087c\u0001\u0000"+
		"\u0000\u0000\u0880\u087d\u0001\u0000\u0000\u0000\u0880\u087e\u0001\u0000"+
		"\u0000\u0000\u0880\u087f\u0001\u0000\u0000\u0000\u0881\u0886\u0001\u0000"+
		"\u0000\u0000\u0882\u0883\u0005>\u0000\u0000\u0883\u0884\u0005\u016f\u0000"+
		"\u0000\u0884\u0886\u0003\u00e8t\u0000\u0885\u0880\u0001\u0000\u0000\u0000"+
		"\u0885\u0882\u0001\u0000\u0000\u0000\u0886\u00cb\u0001\u0000\u0000\u0000"+
		"\u0887\u088b\u0003\u00e8t\u0000\u0888\u088c\u0005\u0479\u0000\u0000\u0889"+
		"\u088a\u0005\u0462\u0000\u0000\u088a\u088c\u0003\u00e8t\u0000\u088b\u0888"+
		"\u0001\u0000\u0000\u0000\u088b\u0889\u0001\u0000\u0000\u0000\u088b\u088c"+
		"\u0001\u0000\u0000\u0000\u088c\u00cd\u0001\u0000\u0000\u0000\u088d\u088e"+
		"\u0003\u00ccf\u0000\u088e\u00cf\u0001\u0000\u0000\u0000\u088f\u0892\u0003"+
		"\u00d6k\u0000\u0890\u0892\u0003\u00e8t\u0000\u0891\u088f\u0001\u0000\u0000"+
		"\u0000\u0891\u0890\u0001\u0000\u0000\u0000\u0892\u00d1\u0001\u0000\u0000"+
		"\u0000\u0893\u0898\u0003\u00e8t\u0000\u0894\u0896\u0003\u00ecv\u0000\u0895"+
		"\u0897\u0003\u00ecv\u0000\u0896\u0895\u0001\u0000\u0000\u0000\u0896\u0897"+
		"\u0001\u0000\u0000\u0000\u0897\u0899\u0001\u0000\u0000\u0000\u0898\u0894"+
		"\u0001\u0000\u0000\u0000\u0898\u0899\u0001\u0000\u0000\u0000\u0899\u08a0"+
		"\u0001\u0000\u0000\u0000\u089a\u089b\t\u0000\u0000\u0000\u089b\u089d\u0003"+
		"\u00ecv\u0000\u089c\u089e\u0003\u00ecv\u0000\u089d\u089c\u0001\u0000\u0000"+
		"\u0000\u089d\u089e\u0001\u0000\u0000\u0000\u089e\u08a0\u0001\u0000\u0000"+
		"\u0000\u089f\u0893\u0001\u0000\u0000\u0000\u089f\u089a\u0001\u0000\u0000"+
		"\u0000\u08a0\u00d3\u0001\u0000\u0000\u0000\u08a1\u08a4\u0003\u00e8t\u0000"+
		"\u08a2\u08a4\u0005\u0472\u0000\u0000\u08a3\u08a1\u0001\u0000\u0000\u0000"+
		"\u08a3\u08a2\u0001\u0000\u0000\u0000\u08a4\u08a9\u0001\u0000\u0000\u0000"+
		"\u08a5\u08a6\u0005\u0463\u0000\u0000\u08a6\u08a7\u0003\u00eew\u0000\u08a7"+
		"\u08a8\u0005\u0464\u0000\u0000\u08a8\u08aa\u0001\u0000\u0000\u0000\u08a9"+
		"\u08a5\u0001\u0000\u0000\u0000\u08a9\u08aa\u0001\u0000\u0000\u0000\u08aa"+
		"\u08ad\u0001\u0000\u0000\u0000\u08ab\u08ad\u0003\u014a\u00a5\u0000\u08ac"+
		"\u08a3\u0001\u0000\u0000\u0000\u08ac\u08ab\u0001\u0000\u0000\u0000\u08ad"+
		"\u08af\u0001\u0000\u0000\u0000\u08ae\u08b0\u0007\u001a\u0000\u0000\u08af"+
		"\u08ae\u0001\u0000\u0000\u0000\u08af\u08b0\u0001\u0000\u0000\u0000\u08b0"+
		"\u00d5\u0001\u0000\u0000\u0000\u08b1\u08b8\u0005\u047c\u0000\u0000\u08b2"+
		"\u08b8\u0005\u047e\u0000\u0000\u08b3\u08b8\u0005\u047a\u0000\u0000\u08b4"+
		"\u08b8\u0005\u0472\u0000\u0000\u08b5\u08b8\u0005\u02bf\u0000\u0000\u08b6"+
		"\u08b8\u0003\u0166\u00b3\u0000\u08b7\u08b1\u0001\u0000\u0000\u0000\u08b7"+
		"\u08b2\u0001\u0000\u0000\u0000\u08b7\u08b3\u0001\u0000\u0000\u0000\u08b7"+
		"\u08b4\u0001\u0000\u0000\u0000\u08b7\u08b5\u0001\u0000\u0000\u0000\u08b7"+
		"\u08b6\u0001\u0000\u0000\u0000\u08b8\u00d7\u0001\u0000\u0000\u0000\u08b9"+
		"\u08ba\u00072\u0000\u0000\u08ba\u00d9\u0001\u0000\u0000\u0000\u08bb\u08c0"+
		"\u0005\u00dc\u0000\u0000\u08bc\u08c0\u0003\u015c\u00ae\u0000\u08bd\u08c0"+
		"\u0005\u0472\u0000\u0000\u08be\u08c0\u0005\u046f\u0000\u0000\u08bf\u08bb"+
		"\u0001\u0000\u0000\u0000\u08bf\u08bc\u0001\u0000\u0000\u0000\u08bf\u08bd"+
		"\u0001\u0000\u0000\u0000\u08bf\u08be\u0001\u0000\u0000\u0000\u08c0\u00db"+
		"\u0001\u0000\u0000\u0000\u08c1\u08c4\u0003\u00e8t\u0000\u08c2\u08c4\u0005"+
		"\u0472\u0000\u0000\u08c3\u08c1\u0001\u0000\u0000\u0000\u08c3\u08c2\u0001"+
		"\u0000\u0000\u0000\u08c4\u00dd\u0001\u0000\u0000\u0000\u08c5\u08c6\u0007"+
		"3\u0000\u0000\u08c6\u00df\u0001\u0000\u0000\u0000\u08c7\u08c8\u0003\u00ee"+
		"w\u0000\u08c8\u08c9\u0005\u0457\u0000\u0000\u08c9\u08ca\u0003\u00eew\u0000"+
		"\u08ca\u08cb\u0005\u0457\u0000\u0000\u08cb\u08cc\u0003\u00eew\u0000\u08cc"+
		"\u08cd\u0005\u0457\u0000\u0000\u08cd\u08ce\u0003\u00eew\u0000\u08ce\u08cf"+
		"\u0005\u0457\u0000\u0000\u08cf\u08d5\u0003\u00eew\u0000\u08d0\u08d1\u0005"+
		"\u046e\u0000\u0000\u08d1\u08d2\u0003\u00eew\u0000\u08d2\u08d3\u0005\u0457"+
		"\u0000\u0000\u08d3\u08d4\u0003\u00eew\u0000\u08d4\u08d6\u0001\u0000\u0000"+
		"\u0000\u08d5\u08d0\u0001\u0000\u0000\u0000\u08d6\u08d7\u0001\u0000\u0000"+
		"\u0000\u08d7\u08d5\u0001\u0000\u0000\u0000\u08d7\u08d8\u0001\u0000\u0000"+
		"\u0000\u08d8\u00e1\u0001\u0000\u0000\u0000\u08d9\u08e0\u0003\u00e4r\u0000"+
		"\u08da\u08db\u0005\u0465\u0000\u0000\u08db\u08de\u0003\u00e4r\u0000\u08dc"+
		"\u08dd\u0005\u0465\u0000\u0000\u08dd\u08df\u0003\u00eew\u0000\u08de\u08dc"+
		"\u0001\u0000\u0000\u0000\u08de\u08df\u0001\u0000\u0000\u0000\u08df\u08e1"+
		"\u0001\u0000\u0000\u0000\u08e0\u08da\u0001\u0000\u0000\u0000\u08e0\u08e1"+
		"\u0001\u0000\u0000\u0000\u08e1\u00e3\u0001\u0000\u0000\u0000\u08e2\u08ea"+
		"\u0005\u0472\u0000\u0000\u08e3\u08ea\u0005\u0477\u0000\u0000\u08e4\u08e6"+
		"\u0005\u0474\u0000\u0000\u08e5\u08e4\u0001\u0000\u0000\u0000\u08e6\u08e7"+
		"\u0001\u0000\u0000\u0000\u08e7\u08e5\u0001\u0000\u0000\u0000\u08e7\u08e8"+
		"\u0001\u0000\u0000\u0000\u08e8\u08ea\u0001\u0000\u0000\u0000\u08e9\u08e2"+
		"\u0001\u0000\u0000\u0000\u08e9\u08e3\u0001\u0000\u0000\u0000\u08e9\u08e5"+
		"\u0001\u0000\u0000\u0000\u08ea\u00e5\u0001\u0000\u0000\u0000\u08eb\u08ee"+
		"\u0003\u00e8t\u0000\u08ec\u08ee\u0005\u0472\u0000\u0000\u08ed\u08eb\u0001"+
		"\u0000\u0000\u0000\u08ed\u08ec\u0001\u0000\u0000\u0000\u08ee\u00e7\u0001"+
		"\u0000\u0000\u0000\u08ef\u08f3\u0003\u00eau\u0000\u08f0\u08f3\u0005\u047b"+
		"\u0000\u0000\u08f1\u08f3\u0005\u046f\u0000\u0000\u08f2\u08ef\u0001\u0000"+
		"\u0000\u0000\u08f2\u08f0\u0001\u0000\u0000\u0000\u08f2\u08f1\u0001\u0000"+
		"\u0000\u0000\u08f3\u00e9\u0001\u0000\u0000\u0000\u08f4\u08fe\u0005\u047a"+
		"\u0000\u0000\u08f5\u08fe\u0003\u015c\u00ae\u0000\u08f6\u08fe\u0003\u015e"+
		"\u00af\u0000\u08f7\u08fe\u0003\u00deo\u0000\u08f8\u08fe\u0003\u0160\u00b0"+
		"\u0000\u08f9\u08fe\u0003\u0162\u00b1\u0000\u08fa\u08fe\u0003\u0164\u00b2"+
		"\u0000\u08fb\u08fe\u0003\u0166\u00b3\u0000\u08fc\u08fe\u0003\u0144\u00a2"+
		"\u0000\u08fd\u08f4\u0001\u0000\u0000\u0000\u08fd\u08f5\u0001\u0000\u0000"+
		"\u0000\u08fd\u08f6\u0001\u0000\u0000\u0000\u08fd\u08f7\u0001\u0000\u0000"+
		"\u0000\u08fd\u08f8\u0001\u0000\u0000\u0000\u08fd\u08f9\u0001\u0000\u0000"+
		"\u0000\u08fd\u08fa\u0001\u0000\u0000\u0000\u08fd\u08fb\u0001\u0000\u0000"+
		"\u0000\u08fd\u08fc\u0001\u0000\u0000\u0000\u08fe\u00eb\u0001\u0000\u0000"+
		"\u0000\u08ff\u0903\u0005\u0479\u0000\u0000\u0900\u0901\u0005\u0462\u0000"+
		"\u0000\u0901\u0903\u0003\u00e8t\u0000\u0902\u08ff\u0001\u0000\u0000\u0000"+
		"\u0902\u0900\u0001\u0000\u0000\u0000\u0903\u00ed\u0001\u0000\u0000\u0000"+
		"\u0904\u0905\u00074\u0000\u0000\u0905\u00ef\u0001\u0000\u0000\u0000\u0906"+
		"\u0909\u0005\u0470\u0000\u0000\u0907\u0909\u0003\u00eew\u0000\u0908\u0906"+
		"\u0001\u0000\u0000\u0000\u0908\u0907\u0001\u0000\u0000\u0000\u0909\u00f1"+
		"\u0001\u0000\u0000\u0000\u090a\u090c\u0005\u0478\u0000\u0000\u090b\u090a"+
		"\u0001\u0000\u0000\u0000\u090b\u090c\u0001\u0000\u0000\u0000\u090c\u090d"+
		"\u0001\u0000\u0000\u0000\u090d\u0910\u0005\u0472\u0000\u0000\u090e\u0910"+
		"\u0005\u0471\u0000\u0000\u090f\u090b\u0001\u0000\u0000\u0000\u090f\u090e"+
		"\u0001\u0000\u0000\u0000\u0910\u0912\u0001\u0000\u0000\u0000\u0911\u0913"+
		"\u0005\u0472\u0000\u0000\u0912\u0911\u0001\u0000\u0000\u0000\u0913\u0914"+
		"\u0001\u0000\u0000\u0000\u0914\u0912\u0001\u0000\u0000\u0000\u0914\u0915"+
		"\u0001\u0000\u0000\u0000\u0915\u0922\u0001\u0000\u0000\u0000\u0916\u0918"+
		"\u0005\u0478\u0000\u0000\u0917\u0916\u0001\u0000\u0000\u0000\u0917\u0918"+
		"\u0001\u0000\u0000\u0000\u0918\u0919\u0001\u0000\u0000\u0000\u0919\u091c"+
		"\u0005\u0472\u0000\u0000\u091a\u091c\u0005\u0471\u0000\u0000\u091b\u0917"+
		"\u0001\u0000\u0000\u0000\u091b\u091a\u0001\u0000\u0000\u0000\u091c\u091f"+
		"\u0001\u0000\u0000\u0000\u091d\u091e\u0005\u001a\u0000\u0000\u091e\u0920"+
		"\u0003\u00dcn\u0000\u091f\u091d\u0001\u0000\u0000\u0000\u091f\u0920\u0001"+
		"\u0000\u0000\u0000\u0920\u0922\u0001\u0000\u0000\u0000\u0921\u090f\u0001"+
		"\u0000\u0000\u0000\u0921\u091b\u0001\u0000\u0000\u0000\u0922\u00f3\u0001"+
		"\u0000\u0000\u0000\u0923\u0924\u00075\u0000\u0000\u0924\u00f5\u0001\u0000"+
		"\u0000\u0000\u0925\u0927\u0005\u0478\u0000\u0000\u0926\u0925\u0001\u0000"+
		"\u0000\u0000\u0926\u0927\u0001\u0000\u0000\u0000\u0927\u0928\u0001\u0000"+
		"\u0000\u0000\u0928\u0929\u0005\u0474\u0000\u0000\u0929\u00f7\u0001\u0000"+
		"\u0000\u0000\u092a\u092c\u0005n\u0000\u0000\u092b\u092a\u0001\u0000\u0000"+
		"\u0000\u092b\u092c\u0001\u0000\u0000\u0000\u092c\u092d\u0001\u0000\u0000"+
		"\u0000\u092d\u092e\u00076\u0000\u0000\u092e\u00f9\u0001\u0000\u0000\u0000"+
		"\u092f\u093c\u0003\u00f2y\u0000\u0930\u093c\u0003\u00eew\u0000\u0931\u0932"+
		"\u0005\u0457\u0000\u0000\u0932\u093c\u0003\u00eew\u0000\u0933\u093c\u0003"+
		"\u00f6{\u0000\u0934\u093c\u0003\u00f4z\u0000\u0935\u093c\u0005\u0475\u0000"+
		"\u0000\u0936\u093c\u0005\u0477\u0000\u0000\u0937\u0939\u0005n\u0000\u0000"+
		"\u0938\u0937\u0001\u0000\u0000\u0000\u0938\u0939\u0001\u0000\u0000\u0000"+
		"\u0939\u093a\u0001\u0000\u0000\u0000\u093a\u093c\u00076\u0000\u0000\u093b"+
		"\u092f\u0001\u0000\u0000\u0000\u093b\u0930\u0001\u0000\u0000\u0000\u093b"+
		"\u0931\u0001\u0000\u0000\u0000\u093b\u0933\u0001\u0000\u0000\u0000\u093b"+
		"\u0934\u0001\u0000\u0000\u0000\u093b\u0935\u0001\u0000\u0000\u0000\u093b"+
		"\u0936\u0001\u0000\u0000\u0000\u093b\u0938\u0001\u0000\u0000\u0000\u093c"+
		"\u00fb\u0001\u0000\u0000\u0000\u093d\u093f\u00077\u0000\u0000\u093e\u0940"+
		"\u0005\u00e8\u0000\u0000\u093f\u093e\u0001\u0000\u0000\u0000\u093f\u0940"+
		"\u0001\u0000\u0000\u0000\u0940\u0942\u0001\u0000\u0000\u0000\u0941\u0943"+
		"\u0003\u0102\u0081\u0000\u0942\u0941\u0001\u0000\u0000\u0000\u0942\u0943"+
		"\u0001\u0000\u0000\u0000\u0943\u0945\u0001\u0000\u0000\u0000\u0944\u0946"+
		"\u0005\u00dc\u0000\u0000\u0945\u0944\u0001\u0000\u0000\u0000\u0945\u0946"+
		"\u0001\u0000\u0000\u0000\u0946\u094a\u0001\u0000\u0000\u0000\u0947\u0948"+
		"\u0005\u001a\u0000\u0000\u0948\u094b\u0003\u00dcn\u0000\u0949\u094b\u0005"+
		"\u00dc\u0000\u0000\u094a\u0947\u0001\u0000\u0000\u0000\u094a\u0949\u0001"+
		"\u0000\u0000\u0000\u094a\u094b\u0001\u0000\u0000\u0000\u094b\u09a9\u0001"+
		"\u0000\u0000\u0000\u094c\u094d\u0005\u00db\u0000\u0000\u094d\u094f\u0007"+
		"8\u0000\u0000\u094e\u0950\u0003\u0102\u0081\u0000\u094f\u094e\u0001\u0000"+
		"\u0000\u0000\u094f\u0950\u0001\u0000\u0000\u0000\u0950\u0952\u0001\u0000"+
		"\u0000\u0000\u0951\u0953\u0005\u00dc\u0000\u0000\u0952\u0951\u0001\u0000"+
		"\u0000\u0000\u0952\u0953\u0001\u0000\u0000\u0000\u0953\u09a9\u0001\u0000"+
		"\u0000\u0000\u0954\u0955\u0005\u01f9\u0000\u0000\u0955\u0957\u0005\u00d9"+
		"\u0000\u0000\u0956\u0958\u0003\u0102\u0081\u0000\u0957\u0956\u0001\u0000"+
		"\u0000\u0000\u0957\u0958\u0001\u0000\u0000\u0000\u0958\u095a\u0001\u0000"+
		"\u0000\u0000\u0959\u095b\u0005\u00dc\u0000\u0000\u095a\u0959\u0001\u0000"+
		"\u0000\u0000\u095a\u095b\u0001\u0000\u0000\u0000\u095b\u09a9\u0001\u0000"+
		"\u0000\u0000\u095c\u095d\u0005\u00db\u0000\u0000\u095d\u095e\u00079\u0000"+
		"\u0000\u095e\u0960\u0005\u00e8\u0000\u0000\u095f\u0961\u0003\u0102\u0081"+
		"\u0000\u0960\u095f\u0001\u0000\u0000\u0000\u0960\u0961\u0001\u0000\u0000"+
		"\u0000\u0961\u0963\u0001\u0000\u0000\u0000\u0962\u0964\u0005\u00dc\u0000"+
		"\u0000\u0963\u0962\u0001\u0000\u0000\u0000\u0963\u0964\u0001\u0000\u0000"+
		"\u0000\u0964\u09a9\u0001\u0000\u0000\u0000\u0965\u0967\u0007:\u0000\u0000"+
		"\u0966\u0968\u0003\u0102\u0081\u0000\u0967\u0966\u0001\u0000\u0000\u0000"+
		"\u0967\u0968\u0001\u0000\u0000\u0000\u0968\u096c\u0001\u0000\u0000\u0000"+
		"\u0969\u096b\u0007;\u0000\u0000\u096a\u0969\u0001\u0000\u0000\u0000\u096b"+
		"\u096e\u0001\u0000\u0000\u0000\u096c\u096a\u0001\u0000\u0000\u0000\u096c"+
		"\u096d\u0001\u0000\u0000\u0000\u096d\u09a9\u0001\u0000\u0000\u0000\u096e"+
		"\u096c\u0001\u0000\u0000\u0000\u096f\u0971\u0005\u00ca\u0000\u0000\u0970"+
		"\u0972\u0003\u0104\u0082\u0000\u0971\u0970\u0001\u0000\u0000\u0000\u0971"+
		"\u0972\u0001\u0000\u0000\u0000\u0972\u0976\u0001\u0000\u0000\u0000\u0973"+
		"\u0975\u0007;\u0000\u0000\u0974\u0973\u0001\u0000\u0000\u0000\u0975\u0978"+
		"\u0001\u0000\u0000\u0000\u0976\u0974\u0001\u0000\u0000\u0000\u0976\u0977"+
		"\u0001\u0000\u0000\u0000\u0977\u09a9\u0001\u0000\u0000\u0000\u0978\u0976"+
		"\u0001\u0000\u0000\u0000\u0979\u097b\u0005\u00cb\u0000\u0000\u097a\u097c"+
		"\u0005\u00cc\u0000\u0000\u097b\u097a\u0001\u0000\u0000\u0000\u097b\u097c"+
		"\u0001\u0000\u0000\u0000\u097c\u097e\u0001\u0000\u0000\u0000\u097d\u097f"+
		"\u0003\u0104\u0082\u0000\u097e\u097d\u0001\u0000\u0000\u0000\u097e\u097f"+
		"\u0001\u0000\u0000\u0000\u097f\u0983\u0001\u0000\u0000\u0000\u0980\u0982"+
		"\u0007;\u0000\u0000\u0981\u0980\u0001\u0000\u0000\u0000\u0982\u0985\u0001"+
		"\u0000\u0000\u0000\u0983\u0981\u0001\u0000\u0000\u0000\u0983\u0984\u0001"+
		"\u0000\u0000\u0000\u0984\u09a9\u0001\u0000\u0000\u0000\u0985\u0983\u0001"+
		"\u0000\u0000\u0000\u0986\u0988\u0007<\u0000\u0000\u0987\u0989\u0003\u0106"+
		"\u0083\u0000\u0988\u0987\u0001\u0000\u0000\u0000\u0988\u0989\u0001\u0000"+
		"\u0000\u0000\u0989\u098d\u0001\u0000\u0000\u0000\u098a\u098c\u0007;\u0000"+
		"\u0000\u098b\u098a\u0001\u0000\u0000\u0000\u098c\u098f\u0001\u0000\u0000"+
		"\u0000\u098d\u098b\u0001\u0000\u0000\u0000\u098d\u098e\u0001\u0000\u0000"+
		"\u0000\u098e\u09a9\u0001\u0000\u0000\u0000\u098f\u098d\u0001\u0000\u0000"+
		"\u0000\u0990\u09a9\u0007=\u0000\u0000\u0991\u0993\u0007>\u0000\u0000\u0992"+
		"\u0994\u0003\u0102\u0081\u0000\u0993\u0992\u0001\u0000\u0000\u0000\u0993"+
		"\u0994\u0001\u0000\u0000\u0000\u0994\u09a9\u0001\u0000\u0000\u0000\u0995"+
		"\u0996\u0007?\u0000\u0000\u0996\u0998\u0003\u00fe\u007f\u0000\u0997\u0999"+
		"\u0005\u00dc\u0000\u0000\u0998\u0997\u0001\u0000\u0000\u0000\u0998\u0999"+
		"\u0001\u0000\u0000\u0000\u0999\u09a9\u0001\u0000\u0000\u0000\u099a\u09a9"+
		"\u0007@\u0000\u0000\u099b\u099d\u0005\u00e1\u0000\u0000\u099c\u099e\u0005"+
		"\u00d9\u0000\u0000\u099d\u099c\u0001\u0000\u0000\u0000\u099d\u099e\u0001"+
		"\u0000\u0000\u0000\u099e\u09a0\u0001\u0000\u0000\u0000\u099f\u09a1\u0005"+
		"\u00dc\u0000\u0000\u09a0\u099f\u0001\u0000\u0000\u0000\u09a0\u09a1\u0001"+
		"\u0000\u0000\u0000\u09a1\u09a4\u0001\u0000\u0000\u0000\u09a2\u09a3\u0005"+
		"\u001a\u0000\u0000\u09a3\u09a5\u0003\u00dcn\u0000\u09a4\u09a2\u0001\u0000"+
		"\u0000\u0000\u09a4\u09a5\u0001\u0000\u0000\u0000\u09a5\u09a9\u0001\u0000"+
		"\u0000\u0000\u09a6\u09a7\u0005\u00e1\u0000\u0000\u09a7\u09a9\u0005\u00dd"+
		"\u0000\u0000\u09a8\u093d\u0001\u0000\u0000\u0000\u09a8\u094c\u0001\u0000"+
		"\u0000\u0000\u09a8\u0954\u0001\u0000\u0000\u0000\u09a8\u095c\u0001\u0000"+
		"\u0000\u0000\u09a8\u0965\u0001\u0000\u0000\u0000\u09a8\u096f\u0001\u0000"+
		"\u0000\u0000\u09a8\u0979\u0001\u0000\u0000\u0000\u09a8\u0986\u0001\u0000"+
		"\u0000\u0000\u09a8\u0990\u0001\u0000\u0000\u0000\u09a8\u0991\u0001\u0000"+
		"\u0000\u0000\u09a8\u0995\u0001\u0000\u0000\u0000\u09a8\u099a\u0001\u0000"+
		"\u0000\u0000\u09a8\u099b\u0001\u0000\u0000\u0000\u09a8\u09a6\u0001\u0000"+
		"\u0000\u0000\u09a9\u00fd\u0001\u0000\u0000\u0000\u09aa\u09ab\u0005\u0463"+
		"\u0000\u0000\u09ab\u09b0\u0005\u0472\u0000\u0000\u09ac\u09ad\u0005\u0465"+
		"\u0000\u0000\u09ad\u09af\u0005\u0472\u0000\u0000\u09ae\u09ac\u0001\u0000"+
		"\u0000\u0000\u09af\u09b2\u0001\u0000\u0000\u0000\u09b0\u09ae\u0001\u0000"+
		"\u0000\u0000\u09b0\u09b1\u0001\u0000\u0000\u0000\u09b1\u09b3\u0001\u0000"+
		"\u0000\u0000\u09b2\u09b0\u0001\u0000\u0000\u0000\u09b3\u09b4\u0005\u0464"+
		"\u0000\u0000\u09b4\u00ff\u0001\u0000\u0000\u0000\u09b5\u09b7\u0007A\u0000"+
		"\u0000\u09b6\u09b8\u0003\u0102\u0081\u0000\u09b7\u09b6\u0001\u0000\u0000"+
		"\u0000\u09b7\u09b8\u0001\u0000\u0000\u0000\u09b8\u09c7\u0001\u0000\u0000"+
		"\u0000\u09b9\u09bb\u0005\u00d8\u0000\u0000\u09ba\u09bc\u0003\u0102\u0081"+
		"\u0000\u09bb\u09ba\u0001\u0000\u0000\u0000\u09bb\u09bc\u0001\u0000\u0000"+
		"\u0000\u09bc\u09c7\u0001\u0000\u0000\u0000\u09bd\u09c7\u0007B\u0000\u0000"+
		"\u09be\u09c0\u0005\u00d0\u0000\u0000\u09bf\u09c1\u0003\u0106\u0083\u0000"+
		"\u09c0\u09bf\u0001\u0000\u0000\u0000\u09c0\u09c1\u0001\u0000\u0000\u0000"+
		"\u09c1\u09c7\u0001\u0000\u0000\u0000\u09c2\u09c4\u0007C\u0000\u0000\u09c3"+
		"\u09c5\u0005\u00c8\u0000\u0000\u09c4\u09c3\u0001\u0000\u0000\u0000\u09c4"+
		"\u09c5\u0001\u0000\u0000\u0000\u09c5\u09c7\u0001\u0000\u0000\u0000\u09c6"+
		"\u09b5\u0001\u0000\u0000\u0000\u09c6\u09b9\u0001\u0000\u0000\u0000\u09c6"+
		"\u09bd\u0001\u0000\u0000\u0000\u09c6\u09be\u0001\u0000\u0000\u0000\u09c6"+
		"\u09c2\u0001\u0000\u0000\u0000\u09c7\u09c9\u0001\u0000\u0000\u0000\u09c8"+
		"\u09ca\u0005\u000b\u0000\u0000\u09c9\u09c8\u0001\u0000\u0000\u0000\u09c9"+
		"\u09ca\u0001\u0000\u0000\u0000\u09ca\u0101\u0001\u0000\u0000\u0000\u09cb"+
		"\u09cc\u0005\u0463\u0000\u0000\u09cc\u09cd\u0003\u00eew\u0000\u09cd\u09ce"+
		"\u0005\u0464\u0000\u0000\u09ce\u0103\u0001\u0000\u0000\u0000\u09cf\u09d0"+
		"\u0005\u0463\u0000\u0000\u09d0\u09d1\u0003\u00eew\u0000\u09d1\u09d2\u0005"+
		"\u0465\u0000\u0000\u09d2\u09d3\u0003\u00eew\u0000\u09d3\u09d4\u0005\u0464"+
		"\u0000\u0000\u09d4\u0105\u0001\u0000\u0000\u0000\u09d5\u09d6\u0005\u0463"+
		"\u0000\u0000\u09d6\u09d9\u0003\u00eew\u0000\u09d7\u09d8\u0005\u0465\u0000"+
		"\u0000\u09d8\u09da\u0003\u00eew\u0000\u09d9\u09d7\u0001\u0000\u0000\u0000"+
		"\u09d9\u09da\u0001\u0000\u0000\u0000\u09da\u09db\u0001\u0000\u0000\u0000"+
		"\u09db\u09dc\u0005\u0464\u0000\u0000\u09dc\u0107\u0001\u0000\u0000\u0000"+
		"\u09dd\u09e2\u0003\u00e8t\u0000\u09de\u09df\u0005\u0465\u0000\u0000\u09df"+
		"\u09e1\u0003\u00e8t\u0000\u09e0\u09de\u0001\u0000\u0000\u0000\u09e1\u09e4"+
		"\u0001\u0000\u0000\u0000\u09e2\u09e0\u0001\u0000\u0000\u0000\u09e2\u09e3"+
		"\u0001\u0000\u0000\u0000\u09e3\u0109\u0001\u0000\u0000\u0000\u09e4\u09e2"+
		"\u0001\u0000\u0000\u0000\u09e5\u09ea\u0003\u00ceg\u0000\u09e6\u09e7\u0005"+
		"\u0465\u0000\u0000\u09e7\u09e9\u0003\u00ceg\u0000\u09e8\u09e6\u0001\u0000"+
		"\u0000\u0000\u09e9\u09ec\u0001\u0000\u0000\u0000\u09ea\u09e8\u0001\u0000"+
		"\u0000\u0000\u09ea\u09eb\u0001\u0000\u0000\u0000\u09eb\u010b\u0001\u0000"+
		"\u0000\u0000\u09ec\u09ea\u0001\u0000\u0000\u0000\u09ed\u09ee\u0005\u0463"+
		"\u0000\u0000\u09ee\u09f3\u0003\u00d4j\u0000\u09ef\u09f0\u0005\u0465\u0000"+
		"\u0000\u09f0\u09f2\u0003\u00d4j\u0000\u09f1\u09ef\u0001\u0000\u0000\u0000"+
		"\u09f2\u09f5\u0001\u0000\u0000\u0000\u09f3\u09f1\u0001\u0000\u0000\u0000"+
		"\u09f3\u09f4\u0001\u0000\u0000\u0000\u09f4\u09f6\u0001\u0000\u0000\u0000"+
		"\u09f5\u09f3\u0001\u0000\u0000\u0000\u09f6\u09f7\u0005\u0464\u0000\u0000"+
		"\u09f7\u010d\u0001\u0000\u0000\u0000\u09f8\u09fd\u0003\u014a\u00a5\u0000"+
		"\u09f9\u09fa\u0005\u0465\u0000\u0000\u09fa\u09fc\u0003\u014a\u00a5\u0000"+
		"\u09fb\u09f9\u0001\u0000\u0000\u0000\u09fc\u09ff\u0001\u0000\u0000\u0000"+
		"\u09fd\u09fb\u0001\u0000\u0000\u0000\u09fd\u09fe\u0001\u0000\u0000\u0000"+
		"\u09fe\u010f\u0001\u0000\u0000\u0000\u09ff\u09fd\u0001\u0000\u0000\u0000"+
		"\u0a00\u0a05\u0003\u011c\u008e\u0000\u0a01\u0a02\u0005\u0465\u0000\u0000"+
		"\u0a02\u0a04\u0003\u011c\u008e\u0000\u0a03\u0a01\u0001\u0000\u0000\u0000"+
		"\u0a04\u0a07\u0001\u0000\u0000\u0000\u0a05\u0a03\u0001\u0000\u0000\u0000"+
		"\u0a05\u0a06\u0001\u0000\u0000\u0000\u0a06\u0111\u0001\u0000\u0000\u0000"+
		"\u0a07\u0a05\u0001\u0000\u0000\u0000\u0a08\u0a0d\u0003\u00fa}\u0000\u0a09"+
		"\u0a0a\u0005\u0465\u0000\u0000\u0a0a\u0a0c\u0003\u00fa}\u0000\u0a0b\u0a09"+
		"\u0001\u0000\u0000\u0000\u0a0c\u0a0f\u0001\u0000\u0000\u0000\u0a0d\u0a0b"+
		"\u0001\u0000\u0000\u0000\u0a0d\u0a0e\u0001\u0000\u0000\u0000\u0a0e\u0113"+
		"\u0001\u0000\u0000\u0000\u0a0f\u0a0d\u0001\u0000\u0000\u0000\u0a10\u0a15"+
		"\u0005\u0472\u0000\u0000\u0a11\u0a12\u0005\u0465\u0000\u0000\u0a12\u0a14"+
		"\u0005\u0472\u0000\u0000\u0a13\u0a11\u0001\u0000\u0000\u0000\u0a14\u0a17"+
		"\u0001\u0000\u0000\u0000\u0a15\u0a13\u0001\u0000\u0000\u0000\u0a15\u0a16"+
		"\u0001\u0000\u0000\u0000\u0a16\u0115\u0001\u0000\u0000\u0000\u0a17\u0a15"+
		"\u0001\u0000\u0000\u0000\u0a18\u0a1d\u0005\u047f\u0000\u0000\u0a19\u0a1a"+
		"\u0005\u0465\u0000\u0000\u0a1a\u0a1c\u0005\u047f\u0000\u0000\u0a1b\u0a19"+
		"\u0001\u0000\u0000\u0000\u0a1c\u0a1f\u0001\u0000\u0000\u0000\u0a1d\u0a1b"+
		"\u0001\u0000\u0000\u0000\u0a1d\u0a1e\u0001\u0000\u0000\u0000\u0a1e\u0117"+
		"\u0001\u0000\u0000\u0000\u0a1f\u0a1d\u0001\u0000\u0000\u0000\u0a20\u0a44"+
		"\u0005p\u0000\u0000\u0a21\u0a22\u0005\u0016\u0000\u0000\u0a22\u0a23\u0005"+
		"\u0463\u0000\u0000\u0a23\u0a24\u0003\u014a\u00a5\u0000\u0a24\u0a25\u0005"+
		"\f\u0000\u0000\u0a25\u0a26\u0003\u0100\u0080\u0000\u0a26\u0a27\u0005\u0464"+
		"\u0000\u0000\u0a27\u0a44\u0001\u0000\u0000\u0000\u0a28\u0a2a\u0003\u0150"+
		"\u00a8\u0000\u0a29\u0a28\u0001\u0000\u0000\u0000\u0a29\u0a2a\u0001\u0000"+
		"\u0000\u0000\u0a2a\u0a2b\u0001\u0000\u0000\u0000\u0a2b\u0a44\u0003\u00fa"+
		"}\u0000\u0a2c\u0a30\u0003\u011a\u008d\u0000\u0a2d\u0a2e\u0005r\u0000\u0000"+
		"\u0a2e\u0a2f\u0005\u00b2\u0000\u0000\u0a2f\u0a31\u0003\u011a\u008d\u0000"+
		"\u0a30\u0a2d\u0001\u0000\u0000\u0000\u0a30\u0a31\u0001\u0000\u0000\u0000"+
		"\u0a31\u0a44\u0001\u0000\u0000\u0000\u0a32\u0a33\u0005\u0463\u0000\u0000"+
		"\u0a33\u0a34\u0003\u014a\u00a5\u0000\u0a34\u0a35\u0005\u0464\u0000\u0000"+
		"\u0a35\u0a44\u0001\u0000\u0000\u0000\u0a36\u0a37\u0007D\u0000\u0000\u0a37"+
		"\u0a38\u0005\u0463\u0000\u0000\u0a38\u0a39\u0003\u00ccf\u0000\u0a39\u0a3a"+
		"\u0005\u0464\u0000\u0000\u0a3a\u0a44\u0001\u0000\u0000\u0000\u0a3b\u0a3c"+
		"\u0005\u0463\u0000\u0000\u0a3c\u0a3d\u0007E\u0000\u0000\u0a3d\u0a3e\u0005"+
		"\u028c\u0000\u0000\u0a3e\u0a3f\u0005>\u0000\u0000\u0a3f\u0a40\u0003\u00cc"+
		"f\u0000\u0a40\u0a41\u0005\u0464\u0000\u0000\u0a41\u0a44\u0001\u0000\u0000"+
		"\u0000\u0a42\u0a44\u0003\u014a\u00a5\u0000\u0a43\u0a20\u0001\u0000\u0000"+
		"\u0000\u0a43\u0a21\u0001\u0000\u0000\u0000\u0a43\u0a29\u0001\u0000\u0000"+
		"\u0000\u0a43\u0a2c\u0001\u0000\u0000\u0000\u0a43\u0a32\u0001\u0000\u0000"+
		"\u0000\u0a43\u0a36\u0001\u0000\u0000\u0000\u0a43\u0a3b\u0001\u0000\u0000"+
		"\u0000\u0a43\u0a42\u0001\u0000\u0000\u0000\u0a44\u0119\u0001\u0000\u0000"+
		"\u0000\u0a45\u0a4b\u0007F\u0000\u0000\u0a46\u0a48\u0005\u0463\u0000\u0000"+
		"\u0a47\u0a49\u0003\u00eew\u0000\u0a48\u0a47\u0001\u0000\u0000\u0000\u0a48"+
		"\u0a49\u0001\u0000\u0000\u0000\u0a49\u0a4a\u0001\u0000\u0000\u0000\u0a4a"+
		"\u0a4c\u0005\u0464\u0000\u0000\u0a4b\u0a46\u0001\u0000\u0000\u0000\u0a4b"+
		"\u0a4c\u0001\u0000\u0000\u0000\u0a4c\u0a54\u0001\u0000\u0000\u0000\u0a4d"+
		"\u0a4e\u0005\u013a\u0000\u0000\u0a4e\u0a50\u0005\u0463\u0000\u0000\u0a4f"+
		"\u0a51\u0003\u00eew\u0000\u0a50\u0a4f\u0001\u0000\u0000\u0000\u0a50\u0a51"+
		"\u0001\u0000\u0000\u0000\u0a51\u0a52\u0001\u0000\u0000\u0000\u0a52\u0a54"+
		"\u0005\u0464\u0000\u0000\u0a53\u0a45\u0001\u0000\u0000\u0000\u0a53\u0a4d"+
		"\u0001\u0000\u0000\u0000\u0a54\u011b\u0001\u0000\u0000\u0000\u0a55\u0a58"+
		"\u0003\u014a\u00a5\u0000\u0a56\u0a58\u0005(\u0000\u0000\u0a57\u0a55\u0001"+
		"\u0000\u0000\u0000\u0a57\u0a56\u0001\u0000\u0000\u0000\u0a58\u011d\u0001"+
		"\u0000\u0000\u0000\u0a59\u0a5a\u0005J\u0000\u0000\u0a5a\u0a5b\u00059\u0000"+
		"\u0000\u0a5b\u011f\u0001\u0000\u0000\u0000\u0a5c\u0a5d\u0005J\u0000\u0000"+
		"\u0a5d\u0a5e\u0005n\u0000\u0000\u0a5e\u0a5f\u00059\u0000\u0000\u0a5f\u0121"+
		"\u0001\u0000\u0000\u0000\u0a60\u0a61\u0005\u0291\u0000\u0000\u0a61\u0a64"+
		"\u0003\u00eew\u0000\u0a62\u0a64\u0005\u0202\u0000\u0000\u0a63\u0a60\u0001"+
		"\u0000\u0000\u0000\u0a63\u0a62\u0001\u0000\u0000\u0000\u0a64\u0123\u0001"+
		"\u0000\u0000\u0000\u0a65\u0a77\u0003\u0126\u0093\u0000\u0a66\u0a77\u0003"+
		"\u012e\u0097\u0000\u0a67\u0a77\u0003\u0130\u0098\u0000\u0a68\u0a69\u0003"+
		"\u0144\u00a2\u0000\u0a69\u0a6b\u0005\u0463\u0000\u0000\u0a6a\u0a6c\u0003"+
		"\u0146\u00a3\u0000\u0a6b\u0a6a\u0001\u0000\u0000\u0000\u0a6b\u0a6c\u0001"+
		"\u0000\u0000\u0000\u0a6c\u0a6d\u0001\u0000\u0000\u0000\u0a6d\u0a6e\u0005"+
		"\u0464\u0000\u0000\u0a6e\u0a77\u0001\u0000\u0000\u0000\u0a6f\u0a70\u0003"+
		"\u00ccf\u0000\u0a70\u0a72\u0005\u0463\u0000\u0000\u0a71\u0a73\u0003\u0146"+
		"\u00a3\u0000\u0a72\u0a71\u0001\u0000\u0000\u0000\u0a72\u0a73\u0001\u0000"+
		"\u0000\u0000\u0a73\u0a74\u0001\u0000\u0000\u0000\u0a74\u0a75\u0005\u0464"+
		"\u0000\u0000\u0a75\u0a77\u0001\u0000\u0000\u0000\u0a76\u0a65\u0001\u0000"+
		"\u0000\u0000\u0a76\u0a66\u0001\u0000\u0000\u0000\u0a76\u0a67\u0001\u0000"+
		"\u0000\u0000\u0a76\u0a68\u0001\u0000\u0000\u0000\u0a76\u0a6f\u0001\u0000"+
		"\u0000\u0000\u0a77\u0125\u0001\u0000\u0000\u0000\u0a78\u0a7b\u0007G\u0000"+
		"\u0000\u0a79\u0a7a\u0005\u0463\u0000\u0000\u0a7a\u0a7c\u0005\u0464\u0000"+
		"\u0000\u0a7b\u0a79\u0001\u0000\u0000\u0000\u0a7b\u0a7c\u0001\u0000\u0000"+
		"\u0000\u0a7c\u0b39\u0001\u0000\u0000\u0000\u0a7d\u0a7e\u0005\u001f\u0000"+
		"\u0000\u0a7e\u0a7f\u0005\u0463\u0000\u0000\u0a7f\u0a80\u0003\u014a\u00a5"+
		"\u0000\u0a80\u0a81\u0005\u0465\u0000\u0000\u0a81\u0a82\u0003\u0100\u0080"+
		"\u0000\u0a82\u0a83\u0005\u0464\u0000\u0000\u0a83\u0b39\u0001\u0000\u0000"+
		"\u0000\u0a84\u0a85\u0005\u001f\u0000\u0000\u0a85\u0a86\u0005\u0463\u0000"+
		"\u0000\u0a86\u0a87\u0003\u014a\u00a5\u0000\u0a87\u0a88\u0005\u00b5\u0000"+
		"\u0000\u0a88\u0a89\u0003\u00dam\u0000\u0a89\u0a8a\u0005\u0464\u0000\u0000"+
		"\u0a8a\u0b39\u0001\u0000\u0000\u0000\u0a8b\u0a8c\u0005\u0016\u0000\u0000"+
		"\u0a8c\u0a8d\u0005\u0463\u0000\u0000\u0a8d\u0a8e\u0003\u014a\u00a5\u0000"+
		"\u0a8e\u0a8f\u0005\f\u0000\u0000\u0a8f\u0a90\u0003\u0100\u0080\u0000\u0a90"+
		"\u0a91\u0005\u0464\u0000\u0000\u0a91\u0b39\u0001\u0000\u0000\u0000\u0a92"+
		"\u0a93\u0005\u00b6\u0000\u0000\u0a93\u0a94\u0005\u0463\u0000\u0000\u0a94"+
		"\u0a95\u0003\u00d2i\u0000\u0a95\u0a96\u0005\u0464\u0000\u0000\u0a96\u0b39"+
		"\u0001\u0000\u0000\u0000\u0a97\u0a98\u0005\u0015\u0000\u0000\u0a98\u0a9a"+
		"\u0003\u014a\u00a5\u0000\u0a99\u0a9b\u0003\u0128\u0094\u0000\u0a9a\u0a99"+
		"\u0001\u0000\u0000\u0000\u0a9b\u0a9c\u0001\u0000\u0000\u0000\u0a9c\u0a9a"+
		"\u0001\u0000\u0000\u0000\u0a9c\u0a9d\u0001\u0000\u0000\u0000\u0a9d\u0aa0"+
		"\u0001\u0000\u0000\u0000\u0a9e\u0a9f\u00053\u0000\u0000\u0a9f\u0aa1\u0003"+
		"\u0148\u00a4\u0000\u0aa0\u0a9e\u0001\u0000\u0000\u0000\u0aa0\u0aa1\u0001"+
		"\u0000\u0000\u0000\u0aa1\u0aa2\u0001\u0000\u0000\u0000\u0aa2\u0aa3\u0005"+
		"\u018c\u0000\u0000\u0aa3\u0b39\u0001\u0000\u0000\u0000\u0aa4\u0aa6\u0005"+
		"\u0015\u0000\u0000\u0aa5\u0aa7\u0003\u0128\u0094\u0000\u0aa6\u0aa5\u0001"+
		"\u0000\u0000\u0000\u0aa7\u0aa8\u0001\u0000\u0000\u0000\u0aa8\u0aa6\u0001"+
		"\u0000\u0000\u0000\u0aa8\u0aa9\u0001\u0000\u0000\u0000\u0aa9\u0aac\u0001"+
		"\u0000\u0000\u0000\u0aaa\u0aab\u00053\u0000\u0000\u0aab\u0aad\u0003\u0148"+
		"\u00a4\u0000\u0aac\u0aaa\u0001\u0000\u0000\u0000\u0aac\u0aad\u0001\u0000"+
		"\u0000\u0000\u0aad\u0aae\u0001\u0000\u0000\u0000\u0aae\u0aaf\u0005\u018c"+
		"\u0000\u0000\u0aaf\u0b39\u0001\u0000\u0000\u0000\u0ab0\u0ab1\u0005\u00d8"+
		"\u0000\u0000\u0ab1\u0ab2\u0005\u0463\u0000\u0000\u0ab2\u0ab5\u0003\u0146"+
		"\u00a3\u0000\u0ab3\u0ab4\u0005\u00b5\u0000\u0000\u0ab4\u0ab6\u0003\u00da"+
		"m\u0000\u0ab5\u0ab3\u0001\u0000\u0000\u0000\u0ab5\u0ab6\u0001\u0000\u0000"+
		"\u0000\u0ab6\u0ab7\u0001\u0000\u0000\u0000\u0ab7\u0ab8\u0005\u0464\u0000"+
		"\u0000\u0ab8\u0b39\u0001\u0000\u0000\u0000\u0ab9\u0aba\u0005\u013b\u0000"+
		"\u0000\u0aba\u0abd\u0005\u0463\u0000\u0000\u0abb\u0abe\u0003\u00f2y\u0000"+
		"\u0abc\u0abe\u0003\u014a\u00a5\u0000\u0abd\u0abb\u0001\u0000\u0000\u0000"+
		"\u0abd\u0abc\u0001\u0000\u0000\u0000\u0abe\u0abf\u0001\u0000\u0000\u0000"+
		"\u0abf\u0ac2\u0005M\u0000\u0000\u0ac0\u0ac3\u0003\u00f2y\u0000\u0ac1\u0ac3"+
		"\u0003\u014a\u00a5\u0000\u0ac2\u0ac0\u0001\u0000\u0000\u0000\u0ac2\u0ac1"+
		"\u0001\u0000\u0000\u0000\u0ac3\u0ac4\u0001\u0000\u0000\u0000\u0ac4\u0ac5"+
		"\u0005\u0464\u0000\u0000\u0ac5\u0b39\u0001\u0000\u0000\u0000\u0ac6\u0ac7"+
		"\u0007H\u0000\u0000\u0ac7\u0aca\u0005\u0463\u0000\u0000\u0ac8\u0acb\u0003"+
		"\u00f2y\u0000\u0ac9\u0acb\u0003\u014a\u00a5\u0000\u0aca\u0ac8\u0001\u0000"+
		"\u0000\u0000\u0aca\u0ac9\u0001\u0000\u0000\u0000\u0acb\u0acc\u0001\u0000"+
		"\u0000\u0000\u0acc\u0acf\u0005A\u0000\u0000\u0acd\u0ad0\u0003\u00eew\u0000"+
		"\u0ace\u0ad0\u0003\u014a\u00a5\u0000\u0acf\u0acd\u0001\u0000\u0000\u0000"+
		"\u0acf\u0ace\u0001\u0000\u0000\u0000\u0ad0\u0ad6\u0001\u0000\u0000\u0000"+
		"\u0ad1\u0ad4\u0005>\u0000\u0000\u0ad2\u0ad5\u0003\u00eew\u0000\u0ad3\u0ad5"+
		"\u0003\u014a\u00a5\u0000\u0ad4\u0ad2\u0001\u0000\u0000\u0000\u0ad4\u0ad3"+
		"\u0001\u0000\u0000\u0000\u0ad5\u0ad7\u0001\u0000\u0000\u0000\u0ad6\u0ad1"+
		"\u0001\u0000\u0000\u0000\u0ad6\u0ad7\u0001\u0000\u0000\u0000\u0ad7\u0ad8"+
		"\u0001\u0000\u0000\u0000\u0ad8\u0ad9\u0005\u0464\u0000\u0000\u0ad9\u0b39"+
		"\u0001\u0000\u0000\u0000\u0ada\u0adb\u0005\u013f\u0000\u0000\u0adb\u0adc"+
		"\u0005\u0463\u0000\u0000\u0adc\u0adf\u0007I\u0000\u0000\u0add\u0ae0\u0003"+
		"\u00f2y\u0000\u0ade\u0ae0\u0003\u014a\u00a5\u0000\u0adf\u0add\u0001\u0000"+
		"\u0000\u0000\u0adf\u0ade\u0001\u0000\u0000\u0000\u0adf\u0ae0\u0001\u0000"+
		"\u0000\u0000\u0ae0\u0ae1\u0001\u0000\u0000\u0000\u0ae1\u0ae4\u0005A\u0000"+
		"\u0000\u0ae2\u0ae5\u0003\u00f2y\u0000\u0ae3\u0ae5\u0003\u014a\u00a5\u0000"+
		"\u0ae4\u0ae2\u0001\u0000\u0000\u0000\u0ae4\u0ae3\u0001\u0000\u0000\u0000"+
		"\u0ae5\u0ae6\u0001\u0000\u0000\u0000\u0ae6\u0ae7\u0005\u0464\u0000\u0000"+
		"\u0ae7\u0b39\u0001\u0000\u0000\u0000\u0ae8\u0ae9\u0005\u013f\u0000\u0000"+
		"\u0ae9\u0aec\u0005\u0463\u0000\u0000\u0aea\u0aed\u0003\u00f2y\u0000\u0aeb"+
		"\u0aed\u0003\u014a\u00a5\u0000\u0aec\u0aea\u0001\u0000\u0000\u0000\u0aec"+
		"\u0aeb\u0001\u0000\u0000\u0000\u0aed\u0aee\u0001\u0000\u0000\u0000\u0aee"+
		"\u0af1\u0005A\u0000\u0000\u0aef\u0af2\u0003\u00f2y\u0000\u0af0\u0af2\u0003"+
		"\u014a\u00a5\u0000\u0af1\u0aef\u0001\u0000\u0000\u0000\u0af1\u0af0\u0001"+
		"\u0000\u0000\u0000\u0af2\u0af3\u0001\u0000\u0000\u0000\u0af3\u0af4\u0005"+
		"\u0464\u0000\u0000\u0af4\u0b39\u0001\u0000\u0000\u0000\u0af5\u0af6\u0005"+
		"\u0439\u0000\u0000\u0af6\u0af9\u0005\u0463\u0000\u0000\u0af7\u0afa\u0003"+
		"\u00f2y\u0000\u0af8\u0afa\u0003\u014a\u00a5\u0000\u0af9\u0af7\u0001\u0000"+
		"\u0000\u0000\u0af9\u0af8\u0001\u0000\u0000\u0000\u0afa\u0b01\u0001\u0000"+
		"\u0000\u0000\u0afb\u0afc\u0005\f\u0000\u0000\u0afc\u0afd\u0007J\u0000"+
		"\u0000\u0afd\u0afe\u0005\u0463\u0000\u0000\u0afe\u0aff\u0003\u00eew\u0000"+
		"\u0aff\u0b00\u0005\u0464\u0000\u0000\u0b00\u0b02\u0001\u0000\u0000\u0000"+
		"\u0b01\u0afb\u0001\u0000\u0000\u0000\u0b01\u0b02\u0001\u0000\u0000\u0000"+
		"\u0b02\u0b04\u0001\u0000\u0000\u0000\u0b03\u0b05\u0003\u012a\u0095\u0000"+
		"\u0b04\u0b03\u0001\u0000\u0000\u0000\u0b04\u0b05\u0001\u0000\u0000\u0000"+
		"\u0b05\u0b06\u0001\u0000\u0000\u0000\u0b06\u0b07\u0005\u0464\u0000\u0000"+
		"\u0b07\u0b39\u0001\u0000\u0000\u0000\u0b08\u0b09\u0005\u0138\u0000\u0000"+
		"\u0b09\u0b0a\u0005\u0463\u0000\u0000\u0b0a\u0b0b\u0003\u001a\r\u0000\u0b0b"+
		"\u0b0e\u0005A\u0000\u0000\u0b0c\u0b0f\u0003\u00f2y\u0000\u0b0d\u0b0f\u0003"+
		"\u014a\u00a5\u0000\u0b0e\u0b0c\u0001\u0000\u0000\u0000\u0b0e\u0b0d\u0001"+
		"\u0000\u0000\u0000\u0b0f\u0b10\u0001\u0000\u0000\u0000\u0b10\u0b11\u0005"+
		"\u0464\u0000\u0000\u0b11\u0b39\u0001\u0000\u0000\u0000\u0b12\u0b13\u0005"+
		"\u0370\u0000\u0000\u0b13\u0b14\u0005\u0463\u0000\u0000\u0b14\u0b15\u0007"+
		"K\u0000\u0000\u0b15\u0b16\u0005\u0465\u0000\u0000\u0b16\u0b17\u0003\u00f2"+
		"y\u0000\u0b17\u0b18\u0005\u0464\u0000\u0000\u0b18\u0b39\u0001\u0000\u0000"+
		"\u0000\u0b19\u0b1a\u0005\u00fe\u0000\u0000\u0b1a\u0b1b\u0005\u0463\u0000"+
		"\u0000\u0b1b\u0b1c\u0003\u014a\u00a5\u0000\u0b1c\u0b1d\u0005\u0465\u0000"+
		"\u0000\u0b1d\u0b20\u0003\u014a\u00a5\u0000\u0b1e\u0b1f\u0005\u0241\u0000"+
		"\u0000\u0b1f\u0b21\u0003\u0100\u0080\u0000\u0b20\u0b1e\u0001\u0000\u0000"+
		"\u0000\u0b20\u0b21\u0001\u0000\u0000\u0000\u0b21\u0b2a\u0001\u0000\u0000"+
		"\u0000\u0b22\u0b27\u0005p\u0000\u0000\u0b23\u0b27\u0005\u0190\u0000\u0000"+
		"\u0b24\u0b25\u0005(\u0000\u0000\u0b25\u0b27\u0003\u0118\u008c\u0000\u0b26"+
		"\u0b22\u0001\u0000\u0000\u0000\u0b26\u0b23\u0001\u0000\u0000\u0000\u0b26"+
		"\u0b24\u0001\u0000\u0000\u0000\u0b27\u0b28\u0001\u0000\u0000\u0000\u0b28"+
		"\u0b29\u0005r\u0000\u0000\u0b29\u0b2b\u00055\u0000\u0000\u0b2a\u0b26\u0001"+
		"\u0000\u0000\u0000\u0b2a\u0b2b\u0001\u0000\u0000\u0000\u0b2b\u0b34\u0001"+
		"\u0000\u0000\u0000\u0b2c\u0b31\u0005p\u0000\u0000\u0b2d\u0b31\u0005\u0190"+
		"\u0000\u0000\u0b2e\u0b2f\u0005(\u0000\u0000\u0b2f\u0b31\u0003\u0118\u008c"+
		"\u0000\u0b30\u0b2c\u0001\u0000\u0000\u0000\u0b30\u0b2d\u0001\u0000\u0000"+
		"\u0000\u0b30\u0b2e\u0001\u0000\u0000\u0000\u0b31\u0b32\u0001\u0000\u0000"+
		"\u0000\u0b32\u0b33\u0005r\u0000\u0000\u0b33\u0b35\u0005\u0190\u0000\u0000"+
		"\u0b34\u0b30\u0001\u0000\u0000\u0000\u0b34\u0b35\u0001\u0000\u0000\u0000"+
		"\u0b35\u0b36\u0001\u0000\u0000\u0000\u0b36\u0b37\u0005\u0464\u0000\u0000"+
		"\u0b37\u0b39\u0001\u0000\u0000\u0000\u0b38\u0a78\u0001\u0000\u0000\u0000"+
		"\u0b38\u0a7d\u0001\u0000\u0000\u0000\u0b38\u0a84\u0001\u0000\u0000\u0000"+
		"\u0b38\u0a8b\u0001\u0000\u0000\u0000\u0b38\u0a92\u0001\u0000\u0000\u0000"+
		"\u0b38\u0a97\u0001\u0000\u0000\u0000\u0b38\u0aa4\u0001\u0000\u0000\u0000"+
		"\u0b38\u0ab0\u0001\u0000\u0000\u0000\u0b38\u0ab9\u0001\u0000\u0000\u0000"+
		"\u0b38\u0ac6\u0001\u0000\u0000\u0000\u0b38\u0ada\u0001\u0000\u0000\u0000"+
		"\u0b38\u0ae8\u0001\u0000\u0000\u0000\u0b38\u0af5\u0001\u0000\u0000\u0000"+
		"\u0b38\u0b08\u0001\u0000\u0000\u0000\u0b38\u0b12\u0001\u0000\u0000\u0000"+
		"\u0b38\u0b19\u0001\u0000\u0000\u0000\u0b39\u0127\u0001\u0000\u0000\u0000"+
		"\u0b3a\u0b3b\u0005\u00b7\u0000\u0000\u0b3b\u0b3c\u0003\u0148\u00a4\u0000"+
		"\u0b3c\u0b3d\u0005\u00a8\u0000\u0000\u0b3d\u0b3e\u0003\u0148\u00a4\u0000"+
		"\u0b3e\u0129\u0001\u0000\u0000\u0000\u0b3f\u0b40\u0005\u01cb\u0000\u0000"+
		"\u0b40\u0b45\u0003\u012c\u0096\u0000\u0b41\u0b42\u0005\u0465\u0000\u0000"+
		"\u0b42\u0b44\u0003\u012c\u0096\u0000\u0b43\u0b41\u0001\u0000\u0000\u0000"+
		"\u0b44\u0b47\u0001\u0000\u0000\u0000\u0b45\u0b43\u0001\u0000\u0000\u0000"+
		"\u0b45\u0b46\u0001\u0000\u0000\u0000\u0b46\u0b4e\u0001\u0000\u0000\u0000"+
		"\u0b47\u0b45\u0001\u0000\u0000\u0000\u0b48\u0b49\u0005\u01cb\u0000\u0000"+
		"\u0b49\u0b4a\u0003\u00eew\u0000\u0b4a\u0b4b\u0005\u0457\u0000\u0000\u0b4b"+
		"\u0b4c\u0003\u00eew\u0000\u0b4c\u0b4e\u0001\u0000\u0000\u0000\u0b4d\u0b3f"+
		"\u0001\u0000\u0000\u0000\u0b4d\u0b48\u0001\u0000\u0000\u0000\u0b4e\u012b"+
		"\u0001\u0000\u0000\u0000\u0b4f\u0b51\u0003\u00eew\u0000\u0b50\u0b52\u0007"+
		"L\u0000\u0000\u0b51\u0b50\u0001\u0000\u0000\u0000\u0b51\u0b52\u0001\u0000"+
		"\u0000\u0000\u0b52\u012d\u0001\u0000\u0000\u0000\u0b53\u0b54\u0007M\u0000"+
		"\u0000\u0b54\u0b56\u0005\u0463\u0000\u0000\u0b55\u0b57\u0007\u0016\u0000"+
		"\u0000\u0b56\u0b55\u0001\u0000\u0000\u0000\u0b56\u0b57\u0001\u0000\u0000"+
		"\u0000\u0b57\u0b58\u0001\u0000\u0000\u0000\u0b58\u0b59\u0003\u0148\u00a4"+
		"\u0000\u0b59\u0b5b\u0005\u0464\u0000\u0000\u0b5a\u0b5c\u0003\u0132\u0099"+
		"\u0000\u0b5b\u0b5a\u0001\u0000\u0000\u0000\u0b5b\u0b5c\u0001\u0000\u0000"+
		"\u0000\u0b5c\u0b8f\u0001\u0000\u0000\u0000\u0b5d\u0b5e\u0005\u0119\u0000"+
		"\u0000\u0b5e\u0b66\u0005\u0463\u0000\u0000\u0b5f\u0b67\u0005\u0453\u0000"+
		"\u0000\u0b60\u0b62\u0005\u0006\u0000\u0000\u0b61\u0b60\u0001\u0000\u0000"+
		"\u0000\u0b61\u0b62\u0001\u0000\u0000\u0000\u0b62\u0b63\u0001\u0000\u0000"+
		"\u0000\u0b63\u0b67\u0003\u0148\u00a4\u0000\u0b64\u0b65\u0005/\u0000\u0000"+
		"\u0b65\u0b67\u0003\u0146\u00a3\u0000\u0b66\u0b5f\u0001\u0000\u0000\u0000"+
		"\u0b66\u0b61\u0001\u0000\u0000\u0000\u0b66\u0b64\u0001\u0000\u0000\u0000"+
		"\u0b67\u0b68\u0001\u0000\u0000\u0000\u0b68\u0b6a\u0005\u0464\u0000\u0000"+
		"\u0b69\u0b6b\u0003\u0132\u0099\u0000\u0b6a\u0b69\u0001\u0000\u0000\u0000"+
		"\u0b6a\u0b6b\u0001\u0000\u0000\u0000\u0b6b\u0b8f\u0001\u0000\u0000\u0000"+
		"\u0b6c\u0b6d\u0007N\u0000\u0000\u0b6d\u0b6f\u0005\u0463\u0000\u0000\u0b6e"+
		"\u0b70\u0005\u0006\u0000\u0000\u0b6f\u0b6e\u0001\u0000\u0000\u0000\u0b6f"+
		"\u0b70\u0001\u0000\u0000\u0000\u0b70\u0b71\u0001\u0000\u0000\u0000\u0b71"+
		"\u0b72\u0003\u0148\u00a4\u0000\u0b72\u0b74\u0005\u0464\u0000\u0000\u0b73"+
		"\u0b75\u0003\u0132\u0099\u0000\u0b74\u0b73\u0001\u0000\u0000\u0000\u0b74"+
		"\u0b75\u0001\u0000\u0000\u0000\u0b75\u0b8f\u0001\u0000\u0000\u0000\u0b76"+
		"\u0b77\u0005\u011d\u0000\u0000\u0b77\u0b79\u0005\u0463\u0000\u0000\u0b78"+
		"\u0b7a\u0005/\u0000\u0000\u0b79\u0b78\u0001\u0000\u0000\u0000\u0b79\u0b7a"+
		"\u0001\u0000\u0000\u0000\u0b7a\u0b7b\u0001\u0000\u0000\u0000\u0b7b\u0b86"+
		"\u0003\u0146\u00a3\u0000\u0b7c\u0b7d\u0005x\u0000\u0000\u0b7d\u0b7e\u0005"+
		"\u0012\u0000\u0000\u0b7e\u0b83\u0003v;\u0000\u0b7f\u0b80\u0005\u0465\u0000"+
		"\u0000\u0b80\u0b82\u0003v;\u0000\u0b81\u0b7f\u0001\u0000\u0000\u0000\u0b82"+
		"\u0b85\u0001\u0000\u0000\u0000\u0b83\u0b81\u0001\u0000\u0000\u0000\u0b83"+
		"\u0b84\u0001\u0000\u0000\u0000\u0b84\u0b87\u0001\u0000\u0000\u0000\u0b85"+
		"\u0b83\u0001\u0000\u0000\u0000\u0b86\u0b7c\u0001\u0000\u0000\u0000\u0b86"+
		"\u0b87\u0001\u0000\u0000\u0000\u0b87\u0b8a\u0001\u0000\u0000\u0000\u0b88"+
		"\u0b89\u0005\u0096\u0000\u0000\u0b89\u0b8b\u0005\u0472\u0000\u0000\u0b8a"+
		"\u0b88\u0001\u0000\u0000\u0000\u0b8a\u0b8b\u0001\u0000\u0000\u0000\u0b8b"+
		"\u0b8c\u0001\u0000\u0000\u0000\u0b8c\u0b8d\u0005\u0464\u0000\u0000\u0b8d"+
		"\u0b8f\u0001\u0000\u0000\u0000\u0b8e\u0b53\u0001\u0000\u0000\u0000\u0b8e"+
		"\u0b5d\u0001\u0000\u0000\u0000\u0b8e\u0b6c\u0001\u0000\u0000\u0000\u0b8e"+
		"\u0b76\u0001\u0000\u0000\u0000\u0b8f\u012f\u0001\u0000\u0000\u0000\u0b90"+
		"\u0b91\u0007O\u0000\u0000\u0b91\u0b92\u0005\u0463\u0000\u0000\u0b92\u0b95"+
		"\u0003\u014a\u00a5\u0000\u0b93\u0b94\u0005\u0465\u0000\u0000\u0b94\u0b96"+
		"\u0003\u00eew\u0000\u0b95\u0b93\u0001\u0000\u0000\u0000\u0b95\u0b96\u0001"+
		"\u0000\u0000\u0000\u0b96\u0b99\u0001\u0000\u0000\u0000\u0b97\u0b98\u0005"+
		"\u0465\u0000\u0000\u0b98\u0b9a\u0003\u00eew\u0000\u0b99\u0b97\u0001\u0000"+
		"\u0000\u0000\u0b99\u0b9a\u0001\u0000\u0000\u0000\u0b9a\u0b9b\u0001\u0000"+
		"\u0000\u0000\u0b9b\u0b9c\u0005\u0464\u0000\u0000\u0b9c\u0b9d\u0003\u0132"+
		"\u0099\u0000\u0b9d\u0bb7\u0001\u0000\u0000\u0000\u0b9e\u0b9f\u0007P\u0000"+
		"\u0000\u0b9f\u0ba0\u0005\u0463\u0000\u0000\u0ba0\u0ba1\u0003\u014a\u00a5"+
		"\u0000\u0ba1\u0ba2\u0005\u0464\u0000\u0000\u0ba2\u0ba3\u0003\u0132\u0099"+
		"\u0000\u0ba3\u0bb7\u0001\u0000\u0000\u0000\u0ba4\u0ba5\u0007Q\u0000\u0000"+
		"\u0ba5\u0ba6\u0005\u0463\u0000\u0000\u0ba6\u0ba7\u0005\u0464\u0000\u0000"+
		"\u0ba7\u0bb7\u0003\u0132\u0099\u0000\u0ba8\u0ba9\u0005\u0124\u0000\u0000"+
		"\u0ba9\u0baa\u0005\u0463\u0000\u0000\u0baa\u0bab\u0003\u014a\u00a5\u0000"+
		"\u0bab\u0bac\u0005\u0465\u0000\u0000\u0bac\u0bad\u0003\u00eew\u0000\u0bad"+
		"\u0bae\u0005\u0464\u0000\u0000\u0bae\u0baf\u0003\u0132\u0099\u0000\u0baf"+
		"\u0bb7\u0001\u0000\u0000\u0000\u0bb0\u0bb1\u0005\u0123\u0000\u0000\u0bb1"+
		"\u0bb2\u0005\u0463\u0000\u0000\u0bb2\u0bb3\u0003\u00eew\u0000\u0bb3\u0bb4"+
		"\u0005\u0464\u0000\u0000\u0bb4\u0bb5\u0003\u0132\u0099\u0000\u0bb5\u0bb7"+
		"\u0001\u0000\u0000\u0000\u0bb6\u0b90\u0001\u0000\u0000\u0000\u0bb6\u0b9e"+
		"\u0001\u0000\u0000\u0000\u0bb6\u0ba4\u0001\u0000\u0000\u0000\u0bb6\u0ba8"+
		"\u0001\u0000\u0000\u0000\u0bb6\u0bb0\u0001\u0000\u0000\u0000\u0bb7\u0131"+
		"\u0001\u0000\u0000\u0000\u0bb8\u0bbf\u0005z\u0000\u0000\u0bb9\u0bbb\u0005"+
		"\u0463\u0000\u0000\u0bba\u0bbc\u0003\u0134\u009a\u0000\u0bbb\u0bba\u0001"+
		"\u0000\u0000\u0000\u0bbb\u0bbc\u0001\u0000\u0000\u0000\u0bbc\u0bbd\u0001"+
		"\u0000\u0000\u0000\u0bbd\u0bc0\u0005\u0464\u0000\u0000\u0bbe\u0bc0\u0003"+
		"\u0136\u009b\u0000\u0bbf\u0bb9\u0001\u0000\u0000\u0000\u0bbf\u0bbe\u0001"+
		"\u0000\u0000\u0000\u0bc0\u0133\u0001\u0000\u0000\u0000\u0bc1\u0bc3\u0003"+
		"\u0136\u009b\u0000\u0bc2\u0bc1\u0001\u0000\u0000\u0000\u0bc2\u0bc3\u0001"+
		"\u0000\u0000\u0000\u0bc3\u0bc5\u0001\u0000\u0000\u0000\u0bc4\u0bc6\u0003"+
		"\u0142\u00a1\u0000\u0bc5\u0bc4\u0001\u0000\u0000\u0000\u0bc5\u0bc6\u0001"+
		"\u0000\u0000\u0000\u0bc6\u0bc8\u0001\u0000\u0000\u0000\u0bc7\u0bc9\u0003"+
		"t:\u0000\u0bc8\u0bc7\u0001\u0000\u0000\u0000\u0bc8\u0bc9\u0001\u0000\u0000"+
		"\u0000\u0bc9\u0bcb\u0001\u0000\u0000\u0000\u0bca\u0bcc\u0003\u0138\u009c"+
		"\u0000\u0bcb\u0bca\u0001\u0000\u0000\u0000\u0bcb\u0bcc\u0001\u0000\u0000"+
		"\u0000\u0bcc\u0135\u0001\u0000\u0000\u0000\u0bcd\u0bce\u0003\u00e8t\u0000"+
		"\u0bce\u0137\u0001\u0000\u0000\u0000\u0bcf\u0bd0\u0003\u013a\u009d\u0000"+
		"\u0bd0\u0bd1\u0003\u013c\u009e\u0000\u0bd1\u0139\u0001\u0000\u0000\u0000"+
		"\u0bd2\u0bd3\u0007R\u0000\u0000\u0bd3\u013b\u0001\u0000\u0000\u0000\u0bd4"+
		"\u0bd7\u0003\u0140\u00a0\u0000\u0bd5\u0bd7\u0003\u013e\u009f\u0000\u0bd6"+
		"\u0bd4\u0001\u0000\u0000\u0000\u0bd6\u0bd5\u0001\u0000\u0000\u0000\u0bd7"+
		"\u013d\u0001\u0000\u0000\u0000\u0bd8\u0bd9\u0005\u000f\u0000\u0000\u0bd9"+
		"\u0bda\u0003\u0140\u00a0\u0000\u0bda\u0bdb\u0005\n\u0000\u0000\u0bdb\u0bdc"+
		"\u0003\u0140\u00a0\u0000\u0bdc\u013f\u0001\u0000\u0000\u0000\u0bdd\u0bde"+
		"\u0005\"\u0000\u0000\u0bde\u0be5\u0005\u0247\u0000\u0000\u0bdf\u0be0\u0005"+
		"\u0280\u0000\u0000\u0be0\u0be5\u0007S\u0000\u0000\u0be1\u0be2\u0003\u014a"+
		"\u00a5\u0000\u0be2\u0be3\u0007S\u0000\u0000\u0be3\u0be5\u0001\u0000\u0000"+
		"\u0000\u0be4\u0bdd\u0001\u0000\u0000\u0000\u0be4\u0bdf\u0001\u0000\u0000"+
		"\u0000\u0be4\u0be1\u0001\u0000\u0000\u0000\u0be5\u0141\u0001\u0000\u0000"+
		"\u0000\u0be6\u0be7\u0005}\u0000\u0000\u0be7\u0be8\u0005\u0012\u0000\u0000"+
		"\u0be8\u0bed\u0003\u014a\u00a5\u0000\u0be9\u0bea\u0005\u0465\u0000\u0000"+
		"\u0bea\u0bec\u0003\u014a\u00a5\u0000\u0beb\u0be9\u0001\u0000\u0000\u0000"+
		"\u0bec\u0bef\u0001\u0000\u0000\u0000\u0bed\u0beb\u0001\u0000\u0000\u0000"+
		"\u0bed\u0bee\u0001\u0000\u0000\u0000\u0bee\u0143\u0001\u0000\u0000\u0000"+
		"\u0bef\u0bed\u0001\u0000\u0000\u0000\u0bf0\u0c08\u0003\u0168\u00b4\u0000"+
		"\u0bf1\u0c08\u0005\u02d7\u0000\u0000\u0bf2\u0c08\u0005\u0134\u0000\u0000"+
		"\u0bf3\u0c08\u0005\u0130\u0000\u0000\u0bf4\u0c08\u0005\u0131\u0000\u0000"+
		"\u0bf5\u0c08\u0005\u0132\u0000\u0000\u0bf6\u0c08\u0005\u0135\u0000\u0000"+
		"\u0bf7\u0c08\u0005\u0136\u0000\u0000\u0bf8\u0c08\u0005\u0137\u0000\u0000"+
		"\u0bf9\u0c08\u0005J\u0000\u0000\u0bfa\u0c08\u0005R\u0000\u0000\u0bfb\u0c08"+
		"\u0005\u0133\u0000\u0000\u0bfc\u0c08\u0005\u0139\u0000\u0000\u0bfd\u0c08"+
		"\u0005\u01ef\u0000\u0000\u0bfe\u0c08\u0005\u013a\u0000\u0000\u0bff\u0c08"+
		"\u0005\u0089\u0000\u0000\u0c00\u0c08\u0005\u013c\u0000\u0000\u0c01\u0c08"+
		"\u0005\u013d\u0000\u0000\u0c02\u0c08\u0005\u013e\u0000\u0000\u0c03\u0c08"+
		"\u0005\u013f\u0000\u0000\u0c04\u0c08\u0005\u0140\u0000\u0000\u0c05\u0c08"+
		"\u0005\u0141\u0000\u0000\u0c06\u0c08\u0005\u0142\u0000\u0000\u0c07\u0bf0"+
		"\u0001\u0000\u0000\u0000\u0c07\u0bf1\u0001\u0000\u0000\u0000\u0c07\u0bf2"+
		"\u0001\u0000\u0000\u0000\u0c07\u0bf3\u0001\u0000\u0000\u0000\u0c07\u0bf4"+
		"\u0001\u0000\u0000\u0000\u0c07\u0bf5\u0001\u0000\u0000\u0000\u0c07\u0bf6"+
		"\u0001\u0000\u0000\u0000\u0c07\u0bf7\u0001\u0000\u0000\u0000\u0c07\u0bf8"+
		"\u0001\u0000\u0000\u0000\u0c07\u0bf9\u0001\u0000\u0000\u0000\u0c07\u0bfa"+
		"\u0001\u0000\u0000\u0000\u0c07\u0bfb\u0001\u0000\u0000\u0000\u0c07\u0bfc"+
		"\u0001\u0000\u0000\u0000\u0c07\u0bfd\u0001\u0000\u0000\u0000\u0c07\u0bfe"+
		"\u0001\u0000\u0000\u0000\u0c07\u0bff\u0001\u0000\u0000\u0000\u0c07\u0c00"+
		"\u0001\u0000\u0000\u0000\u0c07\u0c01\u0001\u0000\u0000\u0000\u0c07\u0c02"+
		"\u0001\u0000\u0000\u0000\u0c07\u0c03\u0001\u0000\u0000\u0000\u0c07\u0c04"+
		"\u0001\u0000\u0000\u0000\u0c07\u0c05\u0001\u0000\u0000\u0000\u0c07\u0c06"+
		"\u0001\u0000\u0000\u0000\u0c08\u0145\u0001\u0000\u0000\u0000\u0c09\u0c0e"+
		"\u0003\u00fa}\u0000\u0c0a\u0c0e\u0003\u00d2i\u0000\u0c0b\u0c0e\u0003\u0124"+
		"\u0092\u0000\u0c0c\u0c0e\u0003\u014a\u00a5\u0000\u0c0d\u0c09\u0001\u0000"+
		"\u0000\u0000\u0c0d\u0c0a\u0001\u0000\u0000\u0000\u0c0d\u0c0b\u0001\u0000"+
		"\u0000\u0000\u0c0d\u0c0c\u0001\u0000\u0000\u0000\u0c0e\u0c18\u0001\u0000"+
		"\u0000\u0000\u0c0f\u0c14\u0005\u0465\u0000\u0000\u0c10\u0c15\u0003\u00fa"+
		"}\u0000\u0c11\u0c15\u0003\u00d2i\u0000\u0c12\u0c15\u0003\u0124\u0092\u0000"+
		"\u0c13\u0c15\u0003\u014a\u00a5\u0000\u0c14\u0c10\u0001\u0000\u0000\u0000"+
		"\u0c14\u0c11\u0001\u0000\u0000\u0000\u0c14\u0c12\u0001\u0000\u0000\u0000"+
		"\u0c14\u0c13\u0001\u0000\u0000\u0000\u0c15\u0c17\u0001\u0000\u0000\u0000"+
		"\u0c16\u0c0f\u0001\u0000\u0000\u0000\u0c17\u0c1a\u0001\u0000\u0000\u0000"+
		"\u0c18\u0c16\u0001\u0000\u0000\u0000\u0c18\u0c19\u0001\u0000\u0000\u0000"+
		"\u0c19\u0147\u0001\u0000\u0000\u0000\u0c1a\u0c18\u0001\u0000\u0000\u0000"+
		"\u0c1b\u0c20\u0003\u00fa}\u0000\u0c1c\u0c20\u0003\u00d2i\u0000\u0c1d\u0c20"+
		"\u0003\u0124\u0092\u0000\u0c1e\u0c20\u0003\u014a\u00a5\u0000\u0c1f\u0c1b"+
		"\u0001\u0000\u0000\u0000\u0c1f\u0c1c\u0001\u0000\u0000\u0000\u0c1f\u0c1d"+
		"\u0001\u0000\u0000\u0000\u0c1f\u0c1e\u0001\u0000\u0000\u0000\u0c20\u0149"+
		"\u0001\u0000\u0000\u0000\u0c21\u0c22\u0006\u00a5\uffff\uffff\u0000\u0c22"+
		"\u0c23\u0007T\u0000\u0000\u0c23\u0c2d\u0003\u014a\u00a5\u0004\u0c24\u0c25"+
		"\u0003\u014c\u00a6\u0000\u0c25\u0c27\u0005U\u0000\u0000\u0c26\u0c28\u0005"+
		"n\u0000\u0000\u0c27\u0c26\u0001\u0000\u0000\u0000\u0c27\u0c28\u0001\u0000"+
		"\u0000\u0000\u0c28\u0c29\u0001\u0000\u0000\u0000\u0c29\u0c2a\u0007U\u0000"+
		"\u0000\u0c2a\u0c2d\u0001\u0000\u0000\u0000\u0c2b\u0c2d\u0003\u014c\u00a6"+
		"\u0000\u0c2c\u0c21\u0001\u0000\u0000\u0000\u0c2c\u0c24\u0001\u0000\u0000"+
		"\u0000\u0c2c\u0c2b\u0001\u0000\u0000\u0000\u0c2d\u0c34\u0001\u0000\u0000"+
		"\u0000\u0c2e\u0c2f\n\u0003\u0000\u0000\u0c2f\u0c30\u0003\u0154\u00aa\u0000"+
		"\u0c30\u0c31\u0003\u014a\u00a5\u0004\u0c31\u0c33\u0001\u0000\u0000\u0000"+
		"\u0c32\u0c2e\u0001\u0000\u0000\u0000\u0c33\u0c36\u0001\u0000\u0000\u0000"+
		"\u0c34\u0c32\u0001\u0000\u0000\u0000\u0c34\u0c35\u0001\u0000\u0000\u0000"+
		"\u0c35\u014b\u0001\u0000\u0000\u0000\u0c36\u0c34\u0001\u0000\u0000\u0000"+
		"\u0c37\u0c3a\u0006\u00a6\uffff\uffff\u0000\u0c38\u0c39\u0005\u047f\u0000"+
		"\u0000\u0c39\u0c3b\u0005\u044a\u0000\u0000\u0c3a\u0c38\u0001\u0000\u0000"+
		"\u0000\u0c3a\u0c3b\u0001\u0000\u0000\u0000\u0c3b\u0c3c\u0001\u0000\u0000"+
		"\u0000\u0c3c\u0c3d\u0003\u014e\u00a7\u0000\u0c3d\u0c7e\u0001\u0000\u0000"+
		"\u0000\u0c3e\u0c3f\n\b\u0000\u0000\u0c3f\u0c40\u0003\u0152\u00a9\u0000"+
		"\u0c40\u0c41\u0003\u014c\u00a6\t\u0c41\u0c7d\u0001\u0000\u0000\u0000\u0c42"+
		"\u0c44\n\u0006\u0000\u0000\u0c43\u0c45\u0005n\u0000\u0000\u0c44\u0c43"+
		"\u0001\u0000\u0000\u0000\u0c44\u0c45\u0001\u0000\u0000\u0000\u0c45\u0c46"+
		"\u0001\u0000\u0000\u0000\u0c46\u0c47\u0005\u000f\u0000\u0000\u0c47\u0c48"+
		"\u0003\u014c\u00a6\u0000\u0c48\u0c49\u0005\n\u0000\u0000\u0c49\u0c4a\u0003"+
		"\u014c\u00a6\u0007\u0c4a\u0c7d\u0001\u0000\u0000\u0000\u0c4b\u0c4c\n\u0005"+
		"\u0000\u0000\u0c4c\u0c4d\u0005\u025b\u0000\u0000\u0c4d\u0c4e\u0005^\u0000"+
		"\u0000\u0c4e\u0c7d\u0003\u014c\u00a6\u0006\u0c4f\u0c51\n\u0003\u0000\u0000"+
		"\u0c50\u0c52\u0005n\u0000\u0000\u0c51\u0c50\u0001\u0000\u0000\u0000\u0c51"+
		"\u0c52\u0001\u0000\u0000\u0000\u0c52\u0c53\u0001\u0000\u0000\u0000\u0c53"+
		"\u0c54\u0007V\u0000\u0000\u0c54\u0c7d\u0003\u014c\u00a6\u0004\u0c55\u0c57"+
		"\n\n\u0000\u0000\u0c56\u0c58\u0005n\u0000\u0000\u0c57\u0c56\u0001\u0000"+
		"\u0000\u0000\u0c57\u0c58\u0001\u0000\u0000\u0000\u0c58\u0c59\u0001\u0000"+
		"\u0000\u0000\u0c59\u0c5a\u0005M\u0000\u0000\u0c5a\u0c5d\u0005\u0463\u0000"+
		"\u0000\u0c5b\u0c5e\u0003Z-\u0000\u0c5c\u0c5e\u0003\u010e\u0087\u0000\u0c5d"+
		"\u0c5b\u0001\u0000\u0000\u0000\u0c5d\u0c5c\u0001\u0000\u0000\u0000\u0c5e"+
		"\u0c5f\u0001\u0000\u0000\u0000\u0c5f\u0c60\u0005\u0464\u0000\u0000\u0c60"+
		"\u0c7d\u0001\u0000\u0000\u0000\u0c61\u0c62\n\t\u0000\u0000\u0c62\u0c63"+
		"\u0005U\u0000\u0000\u0c63\u0c7d\u0003\u00f8|\u0000\u0c64\u0c65\n\u0007"+
		"\u0000\u0000\u0c65\u0c66\u0003\u0152\u00a9\u0000\u0c66\u0c67\u0007W\u0000"+
		"\u0000\u0c67\u0c68\u0005\u0463\u0000\u0000\u0c68\u0c69\u0003Z-\u0000\u0c69"+
		"\u0c6a\u0005\u0464\u0000\u0000\u0c6a\u0c7d\u0001\u0000\u0000\u0000\u0c6b"+
		"\u0c6d\n\u0004\u0000\u0000\u0c6c\u0c6e\u0005n\u0000\u0000\u0c6d\u0c6c"+
		"\u0001\u0000\u0000\u0000\u0c6d\u0c6e\u0001\u0000\u0000\u0000\u0c6e\u0c6f"+
		"\u0001\u0000\u0000\u0000\u0c6f\u0c70\u0005^\u0000\u0000\u0c70\u0c73\u0003"+
		"\u014c\u00a6\u0000\u0c71\u0c72\u0005\u0192\u0000\u0000\u0c72\u0c74\u0005"+
		"\u0472\u0000\u0000\u0c73\u0c71\u0001\u0000\u0000\u0000\u0c73\u0c74\u0001"+
		"\u0000\u0000\u0000\u0c74\u0c7d\u0001\u0000\u0000\u0000\u0c75\u0c76\n\u0001"+
		"\u0000\u0000\u0c76\u0c77\u0005\u01ec\u0000\u0000\u0c77\u0c78\u0005\u0208"+
		"\u0000\u0000\u0c78\u0c79\u0005\u0463\u0000\u0000\u0c79\u0c7a\u0003\u014c"+
		"\u00a6\u0000\u0c7a\u0c7b\u0005\u0464\u0000\u0000\u0c7b\u0c7d\u0001\u0000"+
		"\u0000\u0000\u0c7c\u0c3e\u0001\u0000\u0000\u0000\u0c7c\u0c42\u0001\u0000"+
		"\u0000\u0000\u0c7c\u0c4b\u0001\u0000\u0000\u0000\u0c7c\u0c4f\u0001\u0000"+
		"\u0000\u0000\u0c7c\u0c55\u0001\u0000\u0000\u0000\u0c7c\u0c61\u0001\u0000"+
		"\u0000\u0000\u0c7c\u0c64\u0001\u0000\u0000\u0000\u0c7c\u0c6b\u0001\u0000"+
		"\u0000\u0000\u0c7c\u0c75\u0001\u0000\u0000\u0000\u0c7d\u0c80\u0001\u0000"+
		"\u0000\u0000\u0c7e\u0c7c\u0001\u0000\u0000\u0000\u0c7e\u0c7f\u0001\u0000"+
		"\u0000\u0000\u0c7f\u014d\u0001\u0000\u0000\u0000\u0c80\u0c7e\u0001\u0000"+
		"\u0000\u0000\u0c81\u0c82\u0006\u00a7\uffff\uffff\u0000\u0c82\u0caf\u0003"+
		"\u00fa}\u0000\u0c83\u0caf\u0003\u00d2i\u0000\u0c84\u0caf\u0003\u0124\u0092"+
		"\u0000\u0c85\u0caf\u0003\u00d8l\u0000\u0c86\u0c87\u0003\u0150\u00a8\u0000"+
		"\u0c87\u0c88\u0003\u014e\u00a7\n\u0c88\u0caf\u0001\u0000\u0000\u0000\u0c89"+
		"\u0c8a\u0005\u00dc\u0000\u0000\u0c8a\u0caf\u0003\u014e\u00a7\t\u0c8b\u0c8c"+
		"\u0005\u0463\u0000\u0000\u0c8c\u0c91\u0003\u014a\u00a5\u0000\u0c8d\u0c8e"+
		"\u0005\u0465\u0000\u0000\u0c8e\u0c90\u0003\u014a\u00a5\u0000\u0c8f\u0c8d"+
		"\u0001\u0000\u0000\u0000\u0c90\u0c93\u0001\u0000\u0000\u0000\u0c91\u0c8f"+
		"\u0001\u0000\u0000\u0000\u0c91\u0c92\u0001\u0000\u0000\u0000\u0c92\u0c94"+
		"\u0001\u0000\u0000\u0000\u0c93\u0c91\u0001\u0000\u0000\u0000\u0c94\u0c95"+
		"\u0005\u0464\u0000\u0000\u0c95\u0caf\u0001\u0000\u0000\u0000\u0c96\u0c97"+
		"\u0005\u0247\u0000\u0000\u0c97\u0c98\u0005\u0463\u0000\u0000\u0c98\u0c9b"+
		"\u0003\u014a\u00a5\u0000\u0c99\u0c9a\u0005\u0465\u0000\u0000\u0c9a\u0c9c"+
		"\u0003\u014a\u00a5\u0000\u0c9b\u0c99\u0001\u0000\u0000\u0000\u0c9c\u0c9d"+
		"\u0001\u0000\u0000\u0000\u0c9d\u0c9b\u0001\u0000\u0000\u0000\u0c9d\u0c9e"+
		"\u0001\u0000\u0000\u0000\u0c9e\u0c9f\u0001\u0000\u0000\u0000\u0c9f\u0ca0"+
		"\u0005\u0464\u0000\u0000\u0ca0\u0caf\u0001\u0000\u0000\u0000\u0ca1\u0ca2"+
		"\u00059\u0000\u0000\u0ca2\u0ca3\u0005\u0463\u0000\u0000\u0ca3\u0ca4\u0003"+
		"Z-\u0000\u0ca4\u0ca5\u0005\u0464\u0000\u0000\u0ca5\u0caf\u0001\u0000\u0000"+
		"\u0000\u0ca6\u0ca7\u0005\u0463\u0000\u0000\u0ca7\u0ca8\u0003Z-\u0000\u0ca8"+
		"\u0ca9\u0005\u0464\u0000\u0000\u0ca9\u0caf\u0001\u0000\u0000\u0000\u0caa"+
		"\u0cab\u0005S\u0000\u0000\u0cab\u0cac\u0003\u014a\u00a5\u0000\u0cac\u0cad"+
		"\u0003\u001a\r\u0000\u0cad\u0caf\u0001\u0000\u0000\u0000\u0cae\u0c81\u0001"+
		"\u0000\u0000\u0000\u0cae\u0c83\u0001\u0000\u0000\u0000\u0cae\u0c84\u0001"+
		"\u0000\u0000\u0000\u0cae\u0c85\u0001\u0000\u0000\u0000\u0cae\u0c86\u0001"+
		"\u0000\u0000\u0000\u0cae\u0c89\u0001\u0000\u0000\u0000\u0cae\u0c8b\u0001"+
		"\u0000\u0000\u0000\u0cae\u0c96\u0001\u0000\u0000\u0000\u0cae\u0ca1\u0001"+
		"\u0000\u0000\u0000\u0cae\u0ca6\u0001\u0000\u0000\u0000\u0cae\u0caa\u0001"+
		"\u0000\u0000\u0000\u0caf\u0cc1\u0001\u0000\u0000\u0000\u0cb0\u0cb1\n\u0003"+
		"\u0000\u0000\u0cb1\u0cb2\u0003\u0156\u00ab\u0000\u0cb2\u0cb3\u0003\u014e"+
		"\u00a7\u0004\u0cb3\u0cc0\u0001\u0000\u0000\u0000\u0cb4\u0cb5\n\u0002\u0000"+
		"\u0000\u0cb5\u0cb6\u0003\u0158\u00ac\u0000\u0cb6\u0cb7\u0003\u014e\u00a7"+
		"\u0003\u0cb7\u0cc0\u0001\u0000\u0000\u0000\u0cb8\u0cb9\n\u0001\u0000\u0000"+
		"\u0cb9\u0cba\u0003\u015a\u00ad\u0000\u0cba\u0cbb\u0003\u014e\u00a7\u0002"+
		"\u0cbb\u0cc0\u0001\u0000\u0000\u0000\u0cbc\u0cbd\n\f\u0000\u0000\u0cbd"+
		"\u0cbe\u0005\u001a\u0000\u0000\u0cbe\u0cc0\u0003\u00dcn\u0000\u0cbf\u0cb0"+
		"\u0001\u0000\u0000\u0000\u0cbf\u0cb4\u0001\u0000\u0000\u0000\u0cbf\u0cb8"+
		"\u0001\u0000\u0000\u0000\u0cbf\u0cbc\u0001\u0000\u0000\u0000\u0cc0\u0cc3"+
		"\u0001\u0000\u0000\u0000\u0cc1\u0cbf\u0001\u0000\u0000\u0000\u0cc1\u0cc2"+
		"\u0001\u0000\u0000\u0000\u0cc2\u014f\u0001\u0000\u0000\u0000\u0cc3\u0cc1"+
		"\u0001\u0000\u0000\u0000\u0cc4\u0cc5\u0007X\u0000\u0000\u0cc5\u0151\u0001"+
		"\u0000\u0000\u0000\u0cc6\u0cd5\u0005\u045a\u0000\u0000\u0cc7\u0cd5\u0005"+
		"\u045b\u0000\u0000\u0cc8\u0cd5\u0005\u045c\u0000\u0000\u0cc9\u0cca\u0005"+
		"\u045c\u0000\u0000\u0cca\u0cd5\u0005\u045a\u0000\u0000\u0ccb\u0ccc\u0005"+
		"\u045b\u0000\u0000\u0ccc\u0cd5\u0005\u045a\u0000\u0000\u0ccd\u0cce\u0005"+
		"\u045c\u0000\u0000\u0cce\u0cd5\u0005\u045b\u0000\u0000\u0ccf\u0cd0\u0005"+
		"\u045d\u0000\u0000\u0cd0\u0cd5\u0005\u045a\u0000\u0000\u0cd1\u0cd2\u0005"+
		"\u045c\u0000\u0000\u0cd2\u0cd3\u0005\u045a\u0000\u0000\u0cd3\u0cd5\u0005"+
		"\u045b\u0000\u0000\u0cd4\u0cc6\u0001\u0000\u0000\u0000\u0cd4\u0cc7\u0001"+
		"\u0000\u0000\u0000\u0cd4\u0cc8\u0001\u0000\u0000\u0000\u0cd4\u0cc9\u0001"+
		"\u0000\u0000\u0000\u0cd4\u0ccb\u0001\u0000\u0000\u0000\u0cd4\u0ccd\u0001"+
		"\u0000\u0000\u0000\u0cd4\u0ccf\u0001\u0000\u0000\u0000\u0cd4\u0cd1\u0001"+
		"\u0000\u0000\u0000\u0cd5\u0153\u0001\u0000\u0000\u0000\u0cd6\u0cde\u0005"+
		"\n\u0000\u0000\u0cd7\u0cd8\u0005\u0460\u0000\u0000\u0cd8\u0cde\u0005\u0460"+
		"\u0000\u0000\u0cd9\u0cde\u0005\u00bc\u0000\u0000\u0cda\u0cde\u0005w\u0000"+
		"\u0000\u0cdb\u0cdc\u0005\u045f\u0000\u0000\u0cdc\u0cde\u0005\u045f\u0000"+
		"\u0000\u0cdd\u0cd6\u0001\u0000\u0000\u0000\u0cdd\u0cd7\u0001\u0000\u0000"+
		"\u0000\u0cdd\u0cd9\u0001\u0000\u0000\u0000\u0cdd\u0cda\u0001\u0000\u0000"+
		"\u0000\u0cdd\u0cdb\u0001\u0000\u0000\u0000\u0cde\u0155\u0001\u0000\u0000"+
		"\u0000\u0cdf\u0ce0\u0005\u045c\u0000\u0000\u0ce0\u0ce7\u0005\u045c\u0000"+
		"\u0000\u0ce1\u0ce2\u0005\u045b\u0000\u0000\u0ce2\u0ce7\u0005\u045b\u0000"+
		"\u0000\u0ce3\u0ce7\u0005\u0460\u0000\u0000\u0ce4\u0ce7\u0005\u0461\u0000"+
		"\u0000\u0ce5\u0ce7\u0005\u045f\u0000\u0000\u0ce6\u0cdf\u0001\u0000\u0000"+
		"\u0000\u0ce6\u0ce1\u0001\u0000\u0000\u0000\u0ce6\u0ce3\u0001\u0000\u0000"+
		"\u0000\u0ce6\u0ce4\u0001\u0000\u0000\u0000\u0ce6\u0ce5\u0001\u0000\u0000"+
		"\u0000\u0ce7\u0157\u0001\u0000\u0000\u0000\u0ce8\u0ce9\u0007Y\u0000\u0000"+
		"\u0ce9\u0159\u0001\u0000\u0000\u0000\u0cea\u0ceb\u0005\u0457\u0000\u0000"+
		"\u0ceb\u0cf0\u0005\u045b\u0000\u0000\u0cec\u0ced\u0005\u0457\u0000\u0000"+
		"\u0ced\u0cee\u0005\u045b\u0000\u0000\u0cee\u0cf0\u0005\u045b\u0000\u0000"+
		"\u0cef\u0cea\u0001\u0000\u0000\u0000\u0cef\u0cec\u0001\u0000\u0000\u0000"+
		"\u0cf0\u015b\u0001\u0000\u0000\u0000\u0cf1\u0cf2\u0007Z\u0000\u0000\u0cf2"+
		"\u015d\u0001\u0000\u0000\u0000\u0cf3\u0cf4\u0007[\u0000\u0000\u0cf4\u015f"+
		"\u0001\u0000\u0000\u0000\u0cf5\u0cf6\u0007\\\u0000\u0000\u0cf6\u0161\u0001"+
		"\u0000\u0000\u0000\u0cf7\u0cf8\u0007]\u0000\u0000\u0cf8\u0163\u0001\u0000"+
		"\u0000\u0000\u0cf9\u0cfa\u0007^\u0000\u0000\u0cfa\u0165\u0001\u0000\u0000"+
		"\u0000\u0cfb\u0cfc\u0007_\u0000\u0000\u0cfc\u0167\u0001\u0000\u0000\u0000"+
		"\u0cfd\u0cfe\u0007`\u0000\u0000\u0cfe\u0169\u0001\u0000\u0000\u0000\u01e9"+
		"\u016d\u0170\u0173\u0175\u017b\u017e\u0181\u0185\u018e\u019a\u019f\u01a5"+
		"\u01b0\u01b5\u01bd\u01c5\u01ca\u01d2\u01da\u01df\u01e7\u01ea\u01f0\u01f6"+
		"\u0207\u020e\u0215\u0221\u0226\u022f\u0231\u0234\u0241\u024e\u0253\u0263"+
		"\u026b\u0275\u027b\u0287\u028a\u028f\u029c\u02a3\u02aa\u02ac\u02b3\u02b7"+
		"\u02b9\u02be\u02c1\u02c7\u02cc\u02ce\u02d2\u02d5\u02d8\u02de\u02e3\u02e5"+
		"\u02ea\u02f1\u02f3\u02fa\u02ff\u0303\u0306\u030e\u0316\u0318\u0320\u0324"+
		"\u0327\u032d\u0332\u0335\u033b\u033e\u0348\u034e\u0352\u0356\u0359\u0362"+
		"\u0367\u036e\u0372\u0379\u037c\u0380\u0389\u038d\u0390\u0393\u0399\u039c"+
		"\u03a2\u03ab\u03ae\u03b9\u03bc\u03c1\u03c4\u03c9\u03d3\u03d8\u03de\u03e0"+
		"\u03e6\u03e8\u03ee\u03f6\u03fb\u0403\u0406\u040b\u040e\u0413\u041b\u0423"+
		"\u0429\u0431\u0436\u043e\u0441\u0445\u0448\u0450\u0456\u045f\u0462\u046a"+
		"\u046e\u0472\u0474\u0477\u047a\u0480\u0484\u0487\u048a\u048d\u048f\u0493"+
		"\u0499\u049f\u04a4\u04a7\u04ad\u04b1\u04b5\u04b8\u04bb\u04c4\u04c8\u04cb"+
		"\u04cf\u04d3\u04d6\u04d9\u04de\u04e4\u04e8\u04f2\u04f8\u04fc\u0502\u0506"+
		"\u050c\u050f\u051b\u051f\u0523\u052b\u052f\u0537\u053a\u053e\u0541\u0549"+
		"\u054e\u0551\u0554\u0558\u055b\u0564\u0569\u0572\u0577\u057e\u0585\u058d"+
		"\u0592\u059a\u059d\u05a0\u05a7\u05aa\u05b1\u05b4\u05bc\u05c2\u05cd\u05d0"+
		"\u05db\u05e1\u05e5\u05f0\u05f5\u05f7\u05fb\u0605\u060f\u0615\u061a\u061d"+
		"\u0620\u0623\u0626\u0629\u062c\u0632\u0637\u063a\u063d\u0640\u0643\u0646"+
		"\u0649\u064b\u0651\u0656\u0659\u065c\u065f\u0662\u0665\u0669\u066f\u0673"+
		"\u067d\u0681\u0687\u0690\u0693\u0697\u069a\u069e\u06a2\u06a5\u06a7\u06af"+
		"\u06bb\u06c1\u06c3\u06c9\u06cb\u06cd\u06d3\u06db\u06e3\u06e7\u06eb\u06f4"+
		"\u06f9\u070d\u0712\u0718\u071f\u0724\u072e\u0732\u0738\u073b\u0740\u0744"+
		"\u074b\u074e\u0754\u076c\u076f\u077b\u077e\u0788\u0790\u0794\u079b\u079e"+
		"\u07a7\u07ad\u07b3\u07bd\u07bf\u07c5\u07c8\u07cb\u07d7\u07da\u07e0\u07e3"+
		"\u07eb\u07f3\u07f9\u07fd\u080b\u0811\u0817\u0824\u0829\u0831\u0834\u0839"+
		"\u083e\u0846\u0849\u0851\u0855\u0862\u0868\u0874\u0877\u0880\u0885\u088b"+
		"\u0891\u0896\u0898\u089d\u089f\u08a3\u08a9\u08ac\u08af\u08b7\u08bf\u08c3"+
		"\u08d7\u08de\u08e0\u08e7\u08e9\u08ed\u08f2\u08fd\u0902\u0908\u090b\u090f"+
		"\u0914\u0917\u091b\u091f\u0921\u0926\u092b\u0938\u093b\u093f\u0942\u0945"+
		"\u094a\u094f\u0952\u0957\u095a\u0960\u0963\u0967\u096c\u0971\u0976\u097b"+
		"\u097e\u0983\u0988\u098d\u0993\u0998\u099d\u09a0\u09a4\u09a8\u09b0\u09b7"+
		"\u09bb\u09c0\u09c4\u09c6\u09c9\u09d9\u09e2\u09ea\u09f3\u09fd\u0a05\u0a0d"+
		"\u0a15\u0a1d\u0a29\u0a30\u0a43\u0a48\u0a4b\u0a50\u0a53\u0a57\u0a63\u0a6b"+
		"\u0a72\u0a76\u0a7b\u0a9c\u0aa0\u0aa8\u0aac\u0ab5\u0abd\u0ac2\u0aca\u0acf"+
		"\u0ad4\u0ad6\u0adf\u0ae4\u0aec\u0af1\u0af9\u0b01\u0b04\u0b0e\u0b20\u0b26"+
		"\u0b2a\u0b30\u0b34\u0b38\u0b45\u0b4d\u0b51\u0b56\u0b5b\u0b61\u0b66\u0b6a"+
		"\u0b6f\u0b74\u0b79\u0b83\u0b86\u0b8a\u0b8e\u0b95\u0b99\u0bb6\u0bbb\u0bbf"+
		"\u0bc2\u0bc5\u0bc8\u0bcb\u0bd6\u0be4\u0bed\u0c07\u0c0d\u0c14\u0c18\u0c1f"+
		"\u0c27\u0c2c\u0c34\u0c3a\u0c44\u0c51\u0c57\u0c5d\u0c6d\u0c73\u0c7c\u0c7e"+
		"\u0c91\u0c9d\u0cae\u0cbf\u0cc1\u0cd4\u0cdd\u0ce6\u0cef";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}